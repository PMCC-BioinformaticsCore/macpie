[{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 macpie authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/assessing_zero_inflation.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Assessing zero-inflation in your data","text":"quick demonstration check_zeroinflation() function macpie package. function fast diagnostic tool help assess whether MACseq data exhibits zero-inflation relative negative binomial (NB) model. use lightweight convenience wrapper subsample_genes() around seqgendiff::select_counts() create smaller object subset genes faster computation. function also part macpie package. hood, check_zeroinflation() uses edgeR estimate gene-wise dispersions compute expected zero probabilities NB model. compares observed expected zero-inflated indexes gene within group defined metadata. function: estimates gene-wise tagwise dispersions edgeR (using selected groups), builds NB-expected zero probabilities TMMwsp-scaled means, returns per-gene ZI (observed zeros minus NB-expected zeros) per-group summaries (e.g., % genes ZI > 0.05). ZI-cutoffs user-defined. output list two elements: summary_by_group: summary table showing number percentage genes zero-inflated group specified cutoffs. gene_metrics_by_group: detailed table gene-wise metrics, including observed expected zero numbers proportions, zero-inflation index (ZI), mean count, dispersion estimates gene group. Note: check_zeroinflation() relies edgeR estimate dispersion. current implementation requires ≥2 groups design edgeR can stabilize gene-wise dispersions across groups. single group still want design-aware baseline expected zeros, fit Gamma–Poisson/NB GLM compute expected zero probabilities fitted means -dispersion.  Load data preprocess subsampling genes checking zero-inflation.","code":"#install.packages(\"macpie\")  # or devtools::install_github(\"PMCC-BioinformaticsCore/macpie\") library(macpie) library(seqgendiff) library(ggplot2) library(cowplot)  # Define project variables project_name <- \"PMMSq033\" project_metadata <- system.file(\"extdata/PMMSq033_metadata.csv\", package = \"macpie\") # Load metadata metadata <- read_metadata(project_metadata) # Import raw data project_rawdata <- paste0(dir, \"/macpieData/PMMSq033/raw_matrix\") project_name <- \"PMMSq033\" raw_counts <- Read10X(data.dir = project_rawdata) # Create tidySeurat object mac <- CreateSeuratObject(counts = raw_counts,                           project = project_name,                           min.cells = 1,                           min.features = 1) #> Warning: Feature names cannot have underscores ('_'), replacing with dashes #> ('-') # Join with metadata mac <- mac %>%   inner_join(metadata, by = c(\".cell\" = \"Barcode\")) # Add unique identifier mac <- mac %>%   mutate(combined_id = str_c(Compound_ID, Concentration_1, sep = \"_\")) %>%   mutate(combined_id = gsub(\" \", \"\", .data$combined_id)) mac <- mac %>%   filter(Project == \"Current\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/assessing_zero_inflation.html","id":"subsample-genes-without-filtering","dir":"Articles","previous_headings":"","what":"Subsample genes without filtering","title":"Assessing zero-inflation in your data","text":"first subsample genes without filtering see zero-inflation results filtering lowly expressed genes. randomly select subset 1000 genes quick check. comprehensive analysis, consider using larger subset. now look zero-inflation across high dose treatment groups DMSO control.","code":"# Subsample genes for faster computation sub_mac_unfiltered <- subsample_genes(mac, ngene = 1000, gselect = \"random\", seed = 1) sub_mac_unfiltered %>% nrow() #> [1] 1000 # Check for zero-inflation high_doses <- grep(\"_10$\", unique(sub_mac_unfiltered$combined_id), value = TRUE) #add DMSO_0 high_doses <- c(high_doses, \"DMSO_0\") zi_results_unfiltered <- check_zeroinflation(sub_mac_unfiltered,                                    group_by = \"combined_id\",                                   samples = high_doses,                                   batch = 1,                                   cutoffs = c(0.1, 0.2))"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/assessing_zero_inflation.html","id":"view-gene-wise-metrics-for-each-group","dir":"Articles","previous_headings":"Subsample genes without filtering","what":"View gene-wise metrics for each group","title":"Assessing zero-inflation in your data","text":"example, view first rows DMSO_0 group: Staurosporine_10 group:","code":"zi_results_unfiltered$gene_metrics_by_group %>% filter(group==\"DMSO_0\") %>% head() #>                    group            gene mean_count_group dispersion p0_obs #> ENSG0000028644827 DMSO_0 ENSG00000286448            0.000   1.20e-01  1.000 #> VWA127            DMSO_0            VWA1            0.158   2.11e-02  0.842 #> ENSG0000027210627 DMSO_0 ENSG00000272106            0.526   3.71e-02  0.579 #> ENSG0000028758627 DMSO_0 ENSG00000287586            0.000   9.90e-03  1.000 #> FBXO4427          DMSO_0          FBXO44            5.474   9.77e-05  0.000 #> FHAD127           DMSO_0           FHAD1            0.158   9.90e-03  0.842 #>                   obs_zeros_num   p0_nb expected_zeros_num       ZI #> ENSG0000028644827            19 1.00000             19.000  0.00000 #> VWA127                       16 0.85439             16.233 -0.01228 #> ENSG0000027210627            11 0.59545             11.314 -0.01650 #> ENSG0000028758627            19 1.00000             19.000  0.00000 #> FBXO4427                      0 0.00547              0.104 -0.00547 #> FHAD127                      16 0.85426             16.231 -0.01216 zi_results_unfiltered$gene_metrics_by_group %>% filter(group==\"Staurosporine_10\") %>% head() #>                            group            gene mean_count_group dispersion #> ENSG00000286448 Staurosporine_10 ENSG00000286448                0   1.20e-01 #> VWA1            Staurosporine_10            VWA1                0   2.11e-02 #> ENSG00000272106 Staurosporine_10 ENSG00000272106                0   3.71e-02 #> ENSG00000287586 Staurosporine_10 ENSG00000287586                0   9.90e-03 #> FBXO44          Staurosporine_10          FBXO44                1   9.77e-05 #> FHAD1           Staurosporine_10           FHAD1                0   9.90e-03 #>                 p0_obs obs_zeros_num p0_nb expected_zeros_num      ZI #> ENSG00000286448  1.000             3 1.000               3.00  0.0000 #> VWA1             1.000             3 1.000               3.00  0.0000 #> ENSG00000272106  1.000             3 1.000               3.00  0.0000 #> ENSG00000287586  1.000             3 1.000               3.00  0.0000 #> FBXO44           0.333             1 0.414               1.24 -0.0811 #> FHAD1            1.000             3 1.000               3.00  0.0000"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/assessing_zero_inflation.html","id":"view-summary-statistics-for-each-group","dir":"Articles","previous_headings":"Subsample genes without filtering","what":"View summary statistics for each group","title":"Assessing zero-inflation in your data","text":"summary table, can see summary statistics group, including number percentage genes zero-inflated specified cutoffs. columns summary table defined follows: group: treatment group n_genes: Total number genes analyzed group n_wells: Total number wells/samples group mean_p0_obs: mean observed zero proportion across genes group mean_p0_nb: mean expected zero proportion NB model across genes group mean_ZI: mean zero-inflation index (ZI = p0_obs - p0_nb gene) across genes group observed_zeros_num: Number data points observed zeros (shouldn’t n_genes*n_wells group) expected_zeros_num: Number data points expected zeros NB model (, shouldn’t n_genes*n_wells group) pct_ZI_gt_0.1: Percentage genes ZI greater 0.1 pct_ZI_gt_0.2: Percentage genes ZI greater 0.2 Visualisation zero-inflation metrics high dose treatment groups DMSO control.  Ranking groups mean observed zero proportion (mean_p0_obs) shows Staurosporine_10 highest observed zero proportion, followed Camptothecin_10, paclitaxel_10. can see staurosporine_10 group highest mean ZI value highest proportion zeros among treatment groups, indicating significant zero-inflation group. treatment groups show small even negative mean ZI values, suggesting significant zero-inflation. staurosporine cell death control, expected see zero-inflated data group. DMSO control group ~60% zeros small mean ZI value, indicating significant zero-inflation control group.","code":"zi_results_unfiltered$summary_by_group %>% head(10) #>                             group n_genes n_wells mean_p0_obs mean_p0_nb #> 5-Azacytidine_10 5-Azacytidine_10    1000       3       0.659      0.671 #> Abemaciclib_10     Abemaciclib_10    1000       3       0.674      0.678 #> Adavosertib_10     Adavosertib_10    1000       3       0.673      0.683 #> ANASTROZOLE_10     ANASTROZOLE_10    1000       3       0.611      0.626 #> AZD-5991_10           AZD-5991_10    1000       3       0.627      0.641 #> CAMPTOTHECIN_10   CAMPTOTHECIN_10    1000       3       0.747      0.760 #> Capivasertib_10   Capivasertib_10    1000       3       0.602      0.616 #> Ceralasertib_10   Ceralasertib_10    1000       3       0.657      0.669 #> CHLORAMBUCIL_10   CHLORAMBUCIL_10    1000       3       0.610      0.622 #> CYTARABINE_10       CYTARABINE_10    1000       3       0.609      0.625 #>                   mean_ZI observed_zeros_num expected_zeros_num pct_ZI_gt_0.1 #> 5-Azacytidine_10 -0.01180               1978               2013         0.036 #> Abemaciclib_10   -0.00357               2023               2034         0.072 #> Adavosertib_10   -0.00970               2020               2049         0.043 #> ANASTROZOLE_10   -0.01495               1832               1877         0.029 #> AZD-5991_10      -0.01367               1882               1923         0.027 #> CAMPTOTHECIN_10  -0.01304               2241               2280         0.046 #> Capivasertib_10  -0.01376               1806               1847         0.039 #> Ceralasertib_10  -0.01241               1970               2007         0.038 #> CHLORAMBUCIL_10  -0.01273               1829               1867         0.036 #> CYTARABINE_10    -0.01566               1827               1874         0.029 #>                  pct_ZI_gt_0.2 #> 5-Azacytidine_10         0.015 #> Abemaciclib_10           0.034 #> Adavosertib_10           0.013 #> ANASTROZOLE_10           0.007 #> AZD-5991_10              0.007 #> CAMPTOTHECIN_10          0.015 #> Capivasertib_10          0.016 #> Ceralasertib_10          0.012 #> CHLORAMBUCIL_10          0.012 #> CYTARABINE_10            0.009 high_doses_zi_results_unfiltered <- zi_results_unfiltered$summary_by_group %>% filter(grepl(\"_10$\", group)) #concatenate with DMSO high_doses_zi_results_unfiltered <- rbind(high_doses_zi_results_unfiltered,                                 zi_results_unfiltered$summary_by_group %>% filter(group==\"DMSO_0\"))   long_zi_results_unfiltered <- high_doses_zi_results_unfiltered %>% select(group, mean_p0_obs, mean_p0_nb, mean_ZI) %>%   pivot_longer(cols = c(mean_p0_obs, mean_p0_nb, mean_ZI),                 names_to = \"metric\",                 values_to = \"value\")  # rank groups by mean_p0_obs long_zi_results_unfiltered$group <- factor(long_zi_results_unfiltered$group,                                               levels = high_doses_zi_results_unfiltered$group[order(-high_doses_zi_results_unfiltered$mean_p0_obs)])  #only show mean_p0_obs and mean_p0_nb long_zi_results_unfiltered_prop <- long_zi_results_unfiltered %>% filter(metric %in% c(\"mean_p0_obs\", \"mean_p0_nb\"))   p1 <- ggplot(long_zi_results_unfiltered_prop, aes(x = group, y = value, fill = metric)) +   geom_bar(stat = \"identity\", position = \"dodge\") +   labs(title = \"Zero-Inflation Metrics by Treatment Groups (10uM) and DMSO \\nmacseq-unfiltered\",        x = \"Groups\",        y = \"zero-inflation proportion\") +   theme_minimal() +   theme(axis.text.x = element_text(angle = 90, hjust = 1)) +   scale_fill_manual(values = macpie_colours$discrete[1:3])  # show ZI separately p2 <- ggplot(long_zi_results_unfiltered %>% filter(metric==\"mean_ZI\"), aes(x = group, y = value, fill = metric)) +   geom_bar(stat = \"identity\", position = \"dodge\") +   labs(title = \"Mean Zero-Inflation Index (ZI) by Treatment Groups (10uM) and DMSO \\nmacseq-unfiltered\",        x = \"Groups\",        y = \"Mean Zero-Inflation Index (ZI)\") +   theme_minimal() +   theme(axis.text.x = element_text(angle = 90, hjust = 1)) +   scale_fill_manual(values = macpie_colours$discrete[1])   plot_grid(p1, p2, ncol = 1)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/assessing_zero_inflation.html","id":"subsample-genes-after-filtering-lowly-expressed-genes","dir":"Articles","previous_headings":"","what":"Subsample genes after filtering lowly expressed genes","title":"Assessing zero-inflation in your data","text":"Filter genes low counts across samples. step important genes extremely low expression can lead unreliable estimates dispersion expected zero probabilities, can skew zero-inflation assessment. filter genes least 10 counts least 2 samples within group defined combined_id.","code":"# Filter by read count per sample group mac <- filter_genes_by_expression(mac,                                    group_by = \"combined_id\",                                    min_counts = 10,                                    min_samples = 2)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/assessing_zero_inflation.html","id":"subsample-genes-for-faster-computation","dir":"Articles","previous_headings":"Subsample genes after filtering lowly expressed genes","what":"Subsample genes for faster computation","title":"Assessing zero-inflation in your data","text":"randomly select subset 1000 genes quick check. comprehensive analysis, consider using larger subset.","code":"# Subsample genes for faster computation sub_mac <- subsample_genes(mac, ngene = 1000, gselect = \"random\", seed = 1) sub_mac %>% nrow() #> [1] 1000 # Check for zero-inflation all_conditions <- unique(sub_mac$combined_id) zi_results <- check_zeroinflation(sub_mac,                                    group_by = \"combined_id\",                                   samples = all_conditions,                                   batch = 1,                                   cutoffs = c(0.1, 0.2))"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/assessing_zero_inflation.html","id":"view-gene-wise-metrics-for-each-group-1","dir":"Articles","previous_headings":"Subsample genes after filtering lowly expressed genes > Subsample genes for faster computation","what":"View gene-wise metrics for each group","title":"Assessing zero-inflation in your data","text":"filtering lowly expressed genes, observe proportions expected observed zeros decrease across treatment groups compared unfiltered data. results suggest lowly expressed genes contribute significantly overall zero counts sparsity data. DMSO control group lowest observed expected zero proportions among groups, staurosporine_10 highest observed expected zero proportions. findings expected vehicle positive controls.","code":"zi_results$gene_metrics_by_group %>% filter(group==\"Luminespib_10\") %>% head() #>                    group     gene mean_count_group dispersion p0_obs #> MTND1P2364 Luminespib_10 MTND1P23             8.67   9.77e-05      0 #> MTATP6P164 Luminespib_10 MTATP6P1             5.67   1.64e-02      0 #> ISG1564    Luminespib_10    ISG15             7.00   9.77e-05      0 #> PUSL164    Luminespib_10    PUSL1             8.00   9.77e-05      0 #> DVL164     Luminespib_10     DVL1             5.33   9.77e-05      0 #> MRPL2064   Luminespib_10   MRPL20             8.67   4.96e-02      0 #>            obs_zeros_num    p0_nb expected_zeros_num        ZI #> MTND1P2364             0 0.000301           0.000904 -0.000301 #> MTATP6P164             0 0.005591           0.016773 -0.005591 #> ISG1564                0 0.001346           0.004038 -0.001346 #> PUSL164                0 0.000547           0.001641 -0.000547 #> DVL164                 0 0.006143           0.018428 -0.006143 #> MRPL2064               0 0.001014           0.003043 -0.001014 zi_results$summary_by_group %>% head(10) #>                               group n_genes n_wells mean_p0_obs mean_p0_nb #> 5-Azacytidine_0.1 5-Azacytidine_0.1    1000       3    0.002667    0.01072 #> 5-Azacytidine_1     5-Azacytidine_1    1000       3    0.004000    0.00958 #> 5-Azacytidine_10   5-Azacytidine_10    1000       3    0.019667    0.02903 #> Abemaciclib_0.1     Abemaciclib_0.1    1000       3    0.001667    0.00614 #> Abemaciclib_1         Abemaciclib_1    1000       3    0.005333    0.01020 #> Abemaciclib_10       Abemaciclib_10    1000       3    0.037333    0.02891 #> Adavosertib_0.1     Adavosertib_0.1    1000       3    0.002333    0.00660 #> Adavosertib_1         Adavosertib_1    1000       3    0.004333    0.00784 #> Adavosertib_10       Adavosertib_10    1000       3    0.015333    0.02170 #> ANASTROZOLE_0.1     ANASTROZOLE_0.1    1000       3    0.000333    0.00875 #>                    mean_ZI observed_zeros_num expected_zeros_num pct_ZI_gt_0.1 #> 5-Azacytidine_0.1 -0.00805                  8               32.2         0.007 #> 5-Azacytidine_1   -0.00558                 12               28.7         0.007 #> 5-Azacytidine_10  -0.00936                 59               87.1         0.030 #> Abemaciclib_0.1   -0.00447                  5               18.4         0.005 #> Abemaciclib_1     -0.00487                 16               30.6         0.013 #> Abemaciclib_10     0.00842                112               86.7         0.098 #> Adavosertib_0.1   -0.00427                  7               19.8         0.007 #> Adavosertib_1     -0.00350                 13               23.5         0.012 #> Adavosertib_10    -0.00637                 46               65.1         0.037 #> ANASTROZOLE_0.1   -0.00842                  1               26.2         0.001 #>                   pct_ZI_gt_0.2 #> 5-Azacytidine_0.1         0.007 #> 5-Azacytidine_1           0.004 #> 5-Azacytidine_10          0.018 #> Abemaciclib_0.1           0.005 #> Abemaciclib_1             0.012 #> Abemaciclib_10            0.084 #> Adavosertib_0.1           0.006 #> Adavosertib_1             0.010 #> Adavosertib_10            0.025 #> ANASTROZOLE_0.1           0.001 high_doses_zi_results <- zi_results$summary_by_group %>% filter(grepl(\"_10$\", group)) #concatenate with DMSO high_doses_zi_results <- rbind(high_doses_zi_results,                                 zi_results$summary_by_group %>% filter(group==\"DMSO_0\"))   long_zi_results <- high_doses_zi_results %>% select(group, mean_p0_obs, mean_p0_nb, mean_ZI) %>%   pivot_longer(cols = c(mean_p0_obs, mean_p0_nb, mean_ZI),                 names_to = \"metric\",                 values_to = \"value\")  # rank groups by mean_p0_obs long_zi_results$group <- factor(long_zi_results$group,                                               levels = high_doses_zi_results$group[order(-high_doses_zi_results$mean_p0_obs)])  #only show mean_p0_obs and mean_p0_nb long_zi_results_prop <- long_zi_results %>% filter(metric %in% c(\"mean_p0_obs\", \"mean_p0_nb\"))   p1 <- ggplot(long_zi_results_prop, aes(x = group, y = value, fill = metric)) +   geom_bar(stat = \"identity\", position = \"dodge\") +   labs(title = \"Zero-Inflation Metrics by Treatment Groups (10uM) and DMSO \\nmacseq-filtered\",        x = \"Groups\",        y = \"zero-inflation proportion\") +   theme_minimal() +   theme(axis.text.x = element_text(angle = 90, hjust = 1)) +   scale_fill_manual(values = macpie_colours$discrete[1:3])  # show ZI separately p2 <- ggplot(long_zi_results %>% filter(metric==\"mean_ZI\"), aes(x = group, y = value, fill = metric)) +   geom_bar(stat = \"identity\", position = \"dodge\") +   labs(title = \"Mean Zero-Inflation Index (ZI) by Treatment Groups (10uM) and DMSO \\nmacseq-filtered\",        x = \"Groups\",        y = \"Mean Zero-Inflation Index (ZI)\") +   theme_minimal() +   theme(axis.text.x = element_text(angle = 90, hjust = 1)) +   scale_fill_manual(values = macpie_colours$discrete[1])   plot_grid(p1, p2, ncol = 1)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Cross platform compatibility","text":"vignette demonstrate adapt macpie’s MACseq workflows high-throughput transcriptomic profiling (HTTr) data format DRUGseq. experimental design DRUGseq plates bit different MACseq. MACseq experimental design, prefer replicate wells plate. DRUGseq, replicates different plates. Key points: vignette cover following two parts: 1. Converting DRUGseq plate Mapping DRUGseq plate layouts macpie’s metadata format. Validating metadata format content. basic QC steps QC vignette. 2. Converting multiple DRUGseq plates Importing multiple plates single macpie object. Detecting batch effects across plates QC section. Performing differential expression pathway enrichment tests merged data limma-voom correction. 3. Benchmark Benchmarking performance macpie functions DRUGseq data. includes filtering robust DMSO controls DEG concordance. DRUGseq dataset large-scale drug screening dataset includes large set small molecules (N = 4,343) tested U2OS cells. dataset retrieved Zenodo (Ozer et al., 2024).","code":"suppressMessages(library(macpie)) suppressMessages(library(tibble)) suppressMessages(library(stringr)) suppressMessages(library(pheatmap)) suppressMessages(library(ggiraph)) suppressMessages(library(tidyseurat)) suppressMessages(library(purrr)) suppressMessages(library(ggrepel)) options(scipen=999, digits=3)"},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"metadata-import-and-validation","dir":"Articles","previous_headings":"Converting a DRUGseq plate to a macpie object","what":"1. Metadata import and validation","title":"Cross platform compatibility","text":"Experimental background metadata files Novartis_drugseq_U2OS_MoABox/ DRUGseq Github data can downloaded ZENODO link: Novartis/DRUG-seq U2OS MoABox Dataset Creators. metadata contains plate well-level information 59,904 samples, read metadata plate VH02012944, plate use vignette.","code":"plate_well_metadata <- read.csv(paste0(dir,\"DRUGseqData/DRUGseq_U2OS_MoABox_plate_wells_metadata_public.txt\"), sep = \"\\t\") metadata <- plate_well_metadata%>%filter(plate_barcode == \"VH02012944\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"convert-drugseq-metadata-to-macpie-metadata-format","dir":"Articles","previous_headings":"Converting a DRUGseq plate to a macpie object > 1. Metadata import and validation","what":"1.1 Convert DRUGseq metadata to macpie metadata format","title":"Cross platform compatibility","text":"example DRUGseq plate content format also available DRUGseq Github. First, can look content column names: Next, convert relevant columns DRUGseq metadata macpie metadata format.","code":"head(metadata) #>   analysis_id investigation_id    investigation_name batch_id plate_replicate #> 1          24             2384 DRUG-seq_CBT_U2OS_MoA       24               2 #> 2          24             2384 DRUG-seq_CBT_U2OS_MoA       24               2 #> 3          24             2384 DRUG-seq_CBT_U2OS_MoA       24               2 #> 4          24             2384 DRUG-seq_CBT_U2OS_MoA       24               2 #> 5          24             2384 DRUG-seq_CBT_U2OS_MoA       24               2 #> 6          24             2384 DRUG-seq_CBT_U2OS_MoA       24               2 #>   experiment_id              plate_name plate_barcode plate_index well_id #> 1          6487 U-2_OS_MoA_batch24_rep2    VH02012944    TTACAGGA     A01 #> 2          6487 U-2_OS_MoA_batch24_rep2    VH02012944    TTACAGGA     J01 #> 3          6487 U-2_OS_MoA_batch24_rep2    VH02012944    TTACAGGA     K01 #> 4          6487 U-2_OS_MoA_batch24_rep2    VH02012944    TTACAGGA     L01 #> 5          6487 U-2_OS_MoA_batch24_rep2    VH02012944    TTACAGGA     M01 #> 6          6487 U-2_OS_MoA_batch24_rep2    VH02012944    TTACAGGA     N01 #>   well_index col row well_type cell_line_name cell_line_ncn concentration unit #> 1 AACAAGGTAC   1   1        SA         U-2 OS     FH55-48QE            10   uM #> 2 AAGATCGGCG   1  10        SA         U-2 OS     FH55-48QE            10   uM #> 3 AAGCGATGTT   1  11        SA         U-2 OS     FH55-48QE            10   uM #> 4 AAGCGTTCAG   1  12        SA         U-2 OS     FH55-48QE            10   uM #> 5 AAGGTCTGGA   1  13        SA         U-2 OS     FH55-48QE            10   uM #> 6 AAGTTAGCGC   1  14        SA         U-2 OS     FH55-48QE            10   uM #>   hours_post_treatment biosample_id external_biosample_id cmpd_sample_id #> 1                   24      2018772            KA-74-VF86     BA-86-AL61 #> 2                   24      2018988            AB-94-KK84     BB-79-AG41 #> 3                   24      2019012            OD-91-CJ88     BB-41-XE67 #> 4                   24      2019036            AE-90-GO84     ED-91-LA02 #> 5                   24      2019060            MF-99-JS89     DF-11-IL69 #> 6                   24      2019084            UB-01-LS89     LE-80-BM08 #>              plate_well #> 1 VH02012944_AACAAGGTAC #> 2 VH02012944_AAGATCGGCG #> 3 VH02012944_AAGCGATGTT #> 4 VH02012944_AAGCGTTCAG #> 5 VH02012944_AAGGTCTGGA #> 6 VH02012944_AAGTTAGCGC #extract relevant columns from DRUGseq plate  macpie_metadata <- metadata %>%   select(plate_barcode, well_id, well_index, row, col, well_type, cell_line_name, concentration, unit, hours_post_treatment, cmpd_sample_id) %>%   mutate(     Plate_ID = plate_barcode,     Well_ID = well_id,     Barcode = well_index,     Cell_type = \"U2OS\",     Unit_1 = unit,      Treatment_1 = cmpd_sample_id,     Sample_type = well_type,     Concentration_1 = as.numeric(concentration),     Row = LETTERS[row],     Column = as.integer(col),     Time = as.factor(hours_post_treatment),     Unit = \"h\",     Species = \"human\",     Model_type = \"2D_adherent\",     Sample_type = if_else(well_type == \"SA\" & col == 24,                                   \"Positive Control\",                                   well_type)  )  #Column names for macpie col_names <- c(\"Plate_ID\", \"Well_ID\", \"Row\", \"Column\", \"Species\",                \"Cell_type\",  \"Model_type\", \"Time\", \"Unit\", \"Treatment_1\",                 \"Concentration_1\", \"Unit_1\",  \"Sample_type\", \"Barcode\") macpie_metadata <- macpie_metadata[, col_names] head(macpie_metadata) #>     Plate_ID Well_ID Row Column Species Cell_type  Model_type Time Unit #> 1 VH02012944     A01   A      1   human      U2OS 2D_adherent   24    h #> 2 VH02012944     J01   J      1   human      U2OS 2D_adherent   24    h #> 3 VH02012944     K01   K      1   human      U2OS 2D_adherent   24    h #> 4 VH02012944     L01   L      1   human      U2OS 2D_adherent   24    h #> 5 VH02012944     M01   M      1   human      U2OS 2D_adherent   24    h #> 6 VH02012944     N01   N      1   human      U2OS 2D_adherent   24    h #>   Treatment_1 Concentration_1 Unit_1 Sample_type    Barcode #> 1  BA-86-AL61              10     uM          SA AACAAGGTAC #> 2  BB-79-AG41              10     uM          SA AAGATCGGCG #> 3  BB-41-XE67              10     uM          SA AAGCGATGTT #> 4  ED-91-LA02              10     uM          SA AAGCGTTCAG #> 5  DF-11-IL69              10     uM          SA AAGGTCTGGA #> 6  LE-80-BM08              10     uM          SA AAGTTAGCGC"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"validate-drugseq-metadata","dir":"Articles","previous_headings":"Converting a DRUGseq plate to a macpie object > 1. Metadata import and validation","what":"1.2 Validate DRUGseq metadata","title":"Cross platform compatibility","text":"Now, can test metadata validation function ensure metadata correct format contains required columns. Visualizing inspecting metadata layout","code":"validate_metadata(macpie_metadata) #>  #> No validation issues found. Metadata is clean. #>  #> Generating summary table grouped by Plate_ID... #>     Plate_ID count_Species count_Cell_type count_Model_type count_Time #> 1 VH02012944             1               1                1          1 #>   count_Unit count_Treatment_1 count_Concentration_1 count_Unit_1 #> 1          1               341                     2            1 #>   count_Sample_type #> 1                 4 plot_metadata_heatmap(macpie_metadata)"},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"import-data","dir":"Articles","previous_headings":"Converting a DRUGseq plate to a macpie object > 2. Quality control","what":"2.1 Import data","title":"Cross platform compatibility","text":"Let’s import one replicate plates VH02012944 batch 24. DRUGseq data downloaded ./Exp_gzip.RData Zenodo link saved Exp_batch24.Rds locally faster loading. batch list plates, plate contains UMI counts matrix corresponding metadata. Quick check UMI counts matrix dimensions first row names: Row names DRUGseq data format “gene_chromosome”. keep gene names macpie data. UMI counts matrix metadata now ready used macpie functions. can create tidySeurat object join metadata. Filtering: previously saved filtered data set, filtered genes < 5 reads least 1 replicate well treatment.","code":"# load(\"DRUGseqData/Exp_gzip.RData\") # batch24 <- Exp$`24` # saveRDS(batch24, file = \"DRUGseqData/Exp_batch24.Rds\") batch24 <- readRDS(paste0(dir,\"DRUGseqData/Exp_batch24.Rds\")) data <- batch24$VH02012944 counts <- data$UMI.counts colnames(counts) <- str_remove_all(colnames(counts), \"VH02012944_\") dim(data$UMI.counts) #> [1] 59594   384 rownames(data$UMI.counts)[1:10] #>  [1] \"DUX4L9,grch38_4\"      \"AC010378.2,grch38_5\"  \"AL136295.5,grch38_14\" #>  [4] \"AC106786.1,grch38_5\"  \"AC138956.2,grch38_5\"  \"MTND2P40,grch38_19\"   #>  [7] \"AC104109.2,grch38_5\"  \"RNU6-1263P,grch38_3\"  \"AC243972.3,grch38_14\" #> [10] \"COX6B1P5,grch38_4\" counts <- rownames_to_column(as.data.frame(counts), var= \"gene_id\") %>%   separate(gene_id, into = c(\"gene_name\", \"chrom\"), sep = \",\")  counts[1:10,1:5] #>     gene_name     chrom CGGAGATTGG ACACCGAATT AGCCACTAGC #> 1      DUX4L9  grch38_4          0          0          0 #> 2  AC010378.2  grch38_5          0          0          0 #> 3  AL136295.5 grch38_14          4          2          9 #> 4  AC106786.1  grch38_5          0          0          0 #> 5  AC138956.2  grch38_5          0          0          0 #> 6    MTND2P40 grch38_19          0          0          0 #> 7  AC104109.2  grch38_5          0          0          0 #> 8  RNU6-1263P  grch38_3          0          0          0 #> 9  AC243972.3 grch38_14          0          0          0 #> 10   COX6B1P5  grch38_4          0          0          0 counts$gene_name <- make.unique(counts$gene_name) counts <- counts %>%   select(-chrom) %>%   tibble::column_to_rownames(var = \"gene_name\")  %>%   as.matrix() as_mac<- CreateSeuratObject(counts = counts,                                       assay = \"RNA\",                                       project = \"VH02012944\") #> Warning: Feature names cannot have underscores ('_'), replacing with dashes #> ('-') #> Warning: Data is of class matrix. Coercing to dgCMatrix. as_mac<- as_mac%>% inner_join(macpie_metadata, by = c(\".cell\"=\"Barcode\")) # as_mac <- filter_genes_by_expression(as_mac,  #                                      group_by = \"Treatment_1\", #                                      min_counts = 5, #                                      min_samples = 1) as_mac <- readRDS(paste0(dir, \"/DRUGseqData/macpie_filtered_VH02012944.rds\"))"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"visualize-plate-layout","dir":"Articles","previous_headings":"Converting a DRUGseq plate to a macpie object > 2. Quality control","what":"2.2 Visualize plate layout","title":"Cross platform compatibility","text":"Now, can check UMI counts sample types wells. can check common QC plots Seurat package visualise number genes, reads, percentage mitochondrial ribosomal genes per sample.","code":"p <- plot_plate_layout(as_mac, \"nCount_RNA\", \"Sample_type\") girafe(ggobj = p,    fonts = list(sans = \"sans\"),   options = list(     opts_hover(css = \"stroke:black; stroke-width:0.8px;\")  # <- slight darkening   )) # Calculate percent of mitochondrial and ribosomal genes as_mac[[\"percent.mt\"]] <- PercentageFeatureSet(as_mac, pattern = \"^mt-|^MT-\") as_mac[[\"percent.ribo\"]] <- PercentageFeatureSet(as_mac, pattern = \"^Rp[slp][[:digit:]]|^Rpsa|^RP[SLP][[:digit:]]|^RPSA\")  # Example of a function from Seurat QC  VlnPlot(as_mac, features = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent.mt\", \"percent.ribo\"),          ncol = 4, group.by = \"Sample_type\") &    scale_fill_manual(values = macpie_colours$discrete)  #> Warning: Default search for \"data\" layer in \"RNA\" assay yielded no results; #> utilizing \"counts\" layer instead. #> Warning: The `slot` argument of `FetchData()` is deprecated as of SeuratObject 5.0.0. #> ℹ Please use the `layer` argument instead. #> ℹ The deprecated feature was likely used in the Seurat package. #>   Please report the issue at <https://github.com/satijalab/seurat/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> Warning: `PackageCheck()` was deprecated in SeuratObject 5.0.0. #> ℹ Please use `rlang::check_installed()` instead. #> ℹ The deprecated feature was likely used in the Seurat package. #>   Please report the issue at <https://github.com/satijalab/seurat/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated."},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"sample-grouping","dir":"Articles","previous_headings":"Converting a DRUGseq plate to a macpie object > 2.2 Basic QC metrics","what":"2.2.1 Sample grouping","title":"Cross platform compatibility","text":"Quality control vignette, first visualise grouping samples based top 500 expressed genes limma’s MDS function. Hovering individual dots reveals sample identity grouping.","code":"p <- plot_mds(as_mac, group_by = \"Sample_type\", label = \"Sample_type\", n_labels = 30) #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. girafe(ggobj = p, fonts = list(sans = \"sans\")) #> Warning: ggrepel: 7 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"correction-of-the-batch-effect","dir":"Articles","previous_headings":"Converting a DRUGseq plate to a macpie object > 2.2 Basic QC metrics","what":"2.2.2 Correction of the batch effect","title":"Cross platform compatibility","text":"simplicity, plot RLE (Relative Log Expression) plot different types controls.","code":"plot_rle(as_mac %>% filter(Sample_type !=\"SA\"), label_column = \"Sample_type\", normalisation = \"raw\") #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. plot_rle(as_mac %>% filter(Sample_type !=\"SA\"), label_column = \"Sample_type\", normalisation = \"limma_voom\") #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis."},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"metadata-import-and-validation-1","dir":"Articles","previous_headings":"Coverting multiple DRUGseq plates to a macpie object","what":"1. Metadata import and validation","title":"Cross platform compatibility","text":"part vignette, need three replicate plates batch 24. DRUGseq data downloaded ./Exp_gzip.RData Zenodo link saved Exp_batch24.Rds locally faster loading. batch list plates, plate contains UMI counts matrix corresponding metadata. batch contains 3 replicate plates, UMI counts matrix metadata. Now, convert metadata format macpie metadata format. idea make combined metadata combined count matrix three plates plate_ID labelled.","code":"names(batch24) #> [1] \"VH02012956\" \"VH02012942\" \"VH02012944\" #make a combined metadata for three plates batch24_metadata <- batch24 %>%    map_dfr(~ {     .x$Annotation %>%       mutate(         Plate_ID        = plate_barcode,         Well_ID         = well_id,         Barcode         = paste0(plate_barcode, \"_\", well_index),         Row             = LETTERS[row],         Column          = as.integer(col),         Species         = \"human\",         Cell_type       = \"U2OS\",         Model_type      = \"2D_adherent\",         Time            = as.factor(hours_post_treatment),         Unit            = \"h\",         Treatment_1     = cmpd_sample_id,         Concentration_1 = as.numeric(concentration),         Unit_1          = unit,         Sample_type     = if_else(well_type == \"SA\" & col == 24,                                   \"Positive Control\",                                   well_type)       )   })   batch24_metadata <- batch24_metadata%>%select(-c(batch_id, plate_barcode,plate_index, well_id,                                                  well_index, col, row, biosample_id, external_biosample_id,                                                  cmpd_sample_id, well_type, cell_line_name, cell_line_ncn, concentration, unit, hours_post_treatment, Sample)) # create a combined UMI matrix for 3 plates batch24_counts <- batch24 %>%   map(~ {     .x$UMI.counts %>%       as.data.frame() %>%        rownames_to_column(\"gene_id\") %>%       separate(col = gene_id, into = c(\"gene_name\", \"chrom\"), sep = \",\") %>%       mutate(gene_name = make.unique(gene_name)) %>%       select(-chrom) %>%       tibble::column_to_rownames(var = \"gene_name\") %>%       as.matrix()   })  binded_counts <- do.call(cbind, batch24_counts)"},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"import-data-1","dir":"Articles","previous_headings":"Coverting multiple DRUGseq plates to a macpie object > 2. Quality control","what":"2.1 Import data","title":"Cross platform compatibility","text":", can read combined count matrix metadata. Filtering filtering genes three 384-well plates take . suggest save previously filtered object work . , focus check data quality across three replicate plates, especially batch effects batch 24.","code":"as_mac <- CreateSeuratObject(counts = binded_counts,    min.cells = 1,    min.features = 1) #> Warning: Feature names cannot have underscores ('_'), replacing with dashes #> ('-') #> Warning: Data is of class matrix. Coercing to dgCMatrix.  as_mac<- as_mac%>% inner_join(batch24_metadata, by = c(\".cell\"=\"Barcode\")) as_mac$combined_id <- paste0(as_mac$Treatment_1,\"_\", as_mac$Concentration_1)  min_sample_num <- min(table(as_mac$combined_id))  # mac_filtered <- filter_genes_by_expression(as_mac,  #                                            group_by = \"combined_id\", min_counts = 10, #                                            min_samples = min_sample_num) #  # saveRDS(mac_filtered,  #   file = paste0(dir, \"DRUGseqData/macpie_filtered_batch24.Rds\"))   mac_filtered <- readRDS(paste0(dir, \"/DRUGseqData/macpie_filtered_batch24.Rds\")) mac_filtered[[\"percent.mt\"]] <- PercentageFeatureSet(mac_filtered, pattern = \"^mt-|^MT-\") mac_filtered[[\"percent.ribo\"]] <- PercentageFeatureSet(mac_filtered, pattern = \"^Rp[slp][[:digit:]]|^Rpsa|^RP[SLP][[:digit:]]|^RPSA\") # Example of a function from Seurat QC  VlnPlot(mac_filtered, features = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent.mt\", \"percent.ribo\"),          ncol = 4, group.by = \"Sample_type\", split.by = \"orig.ident\") + theme(legend.position = 'right') +   scale_fill_manual(values = macpie_colours$discrete)  #> Warning: Default search for \"data\" layer in \"RNA\" assay yielded no results; #> utilizing \"counts\" layer instead. #> The default behaviour of split.by has changed. #> Separate violin plots are now plotted side-by-side. #> To restore the old behaviour of a single split violin, #> set split.plot = TRUE. #>        #> This message will be shown once per session. #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. p <- plot_plate_layout(mac_filtered, \"nCount_RNA\", \"combined_id\") + facet_wrap(~orig.ident, ncol = 1) +    theme(strip.text = element_text(size=10),         axis.text.x = element_text(size=10),          axis.text.y = element_text(size=8),         legend.title = element_text(size=10),         legend.text = element_text(size=8),         trip.background = element_blank()) girafe(ggobj = p,    fonts = list(sans = \"sans\"),   options = list(     opts_hover(css = \"stroke:black; stroke-width:1px;\")   )) #> Warning in plot_theme(plot): The `trip.background` theme element is not #> defined in the element hierarchy."},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"sample-grouping-with-mds-plot","dir":"Articles","previous_headings":"Coverting multiple DRUGseq plates to a macpie object > 2. Quality control > 2.2 Basic QC metrics","what":"2.2.1 Sample grouping with MDS plot","title":"Cross platform compatibility","text":", first visualise grouping samples MDS plot.","code":"p <- plot_mds(mac_filtered, group_by = \"Sample_type\", label = \"combined_id\", n_labels = 30) #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis.  p1 <- plot_mds(mac_filtered, group_by = \"orig.ident\", label = \"combined_id\", n_labels = 30) #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis.   g <- patchwork::wrap_plots(list(p, p1), ncol = 1, nrow = 2, rel_widths = c(7, 7), rel_heights = c(10, 10)) girafe(   ggobj      = g,    width_svg  = 10,    # 10 inches wide   height_svg = 10,     #  10 inches tall   fonts      = list(sans = \"sans\"),   options    = list(opts_hover(css = \"stroke:black; stroke-width:0.8px;\")) ) #> Warning: ggrepel: 30 unlabeled data points (too many overlaps). Consider increasing max.overlaps #> ggrepel: 30 unlabeled data points (too many overlaps). Consider increasing max.overlaps"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"sample-grouping-with-umap","dir":"Articles","previous_headings":"Coverting multiple DRUGseq plates to a macpie object > 2. Quality control > 2.2 Basic QC metrics","what":"2.2.2 Sample grouping with UMAP","title":"Cross platform compatibility","text":"Apart MDS plot, show data can also applied Seurat’s SCTransform visualise UMAP.  MDS UMAP, batch effects among three replicate plates. one compound: three wells BA-51-N076_10 formed distinct cluster. wells separated plates.","code":"mac_sct <- SCTransform(mac_filtered, verbose = FALSE) %>%     RunPCA(verbose = FALSE) %>%     RunUMAP(verbose = FALSE,dims = 1:30) DimPlot(mac_sct, reduction = \"umap\", group.by = \"orig.ident\", cols = macpie_colours$discrete)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"distribution-of-umi-counts","dir":"Articles","previous_headings":"Coverting multiple DRUGseq plates to a macpie object > 2. Quality control > 2.2 Basic QC metrics","what":"2.2.3 Distribution of UMI counts","title":"Cross platform compatibility","text":"also want expect distribution UMIs across experiment. end use box plot show distribution UMI counts grouped across treatments. 341 unique combinations compound_concentration, ’s messy show vignette. , show 200 .","code":"length(unique(mac_filtered$combined_id)) #> [1] 341 compounds_subset <- unique(mac_filtered$combined_id) qc_stats <- compute_qc_metrics(mac_filtered %>% filter(combined_id %in% compounds_subset[1:200]), group_by = \"combined_id\", order_by = \"median\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"variability-among-all-replicates","dir":"Articles","previous_headings":"Coverting multiple DRUGseq plates to a macpie object > 2. Quality control > 2.2 Basic QC metrics","what":"2.2.4 Variability among all replicates","title":"Cross platform compatibility","text":"","code":"plot_qc_metrics_heatmap(qc_stats$stats_summary)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"correction-of-batch-effect","dir":"Articles","previous_headings":"Coverting multiple DRUGseq plates to a macpie object > 2. Quality control > 2.2 Basic QC metrics","what":"2.2.5 Correction of batch effect","title":"Cross platform compatibility","text":"According DRUGseq metadata: Wells water labelled EC-27-RY89 Wells DMSO labelled CB-43-EP73   Note: instead discussing correction methods use data, show ways detected corrected batch effect . batch effect adjustment sequencing data implemented different methods, DESeq2, RUVSeq, edgeR. highly recommend users thoroughly checking batch effects exploring different methods. next part vignette, demonstrate batch parameter implemented differential expression test batch correction.","code":"mac_filtered_dmso <- mac_filtered %>% filter(Treatment_1 == \"CB-43-EP73\") plot_rle(mac_filtered_dmso, label_column = \"orig.ident\", normalisation = \"raw\")+ scale_x_discrete(drop = FALSE) +    theme(axis.text.x = element_text(angle = 45, hjust = 1)) #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. #> Scale for x is already present. #> Adding another scale for x, which will replace the existing scale. plot_rle(mac_filtered_dmso, label_column = \"orig.ident\", normalisation = \"limma_voom\")+ scale_x_discrete(drop = FALSE) +    theme(axis.text.x = element_text(angle = 45, hjust = 1)) #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. #> Scale for x is already present. #> Adding another scale for x, which will replace the existing scale."},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"single-comparison","dir":"Articles","previous_headings":"Coverting multiple DRUGseq plates to a macpie object > 3. Differential gene expression","what":"3.1 Single comparison","title":"Cross platform compatibility","text":", can specify single condition combined_id column compare DMSO (.e.CB_43_EP73_0). using plate IDs column orig.ident input batch parameter, compute_singe_de function can perform differential expression analysis using preferred method (limma voom example) batch information.  Now can visualise gene expression (CPM) top 6 genes differential expression analysis.  Pathway enrichment analysis can performed top differentially expressed genes using function enrichr.","code":"mac_filtered$combined_id <- str_replace_all(mac_filtered$combined_id, \"-\",\"_\") treatment_samples <- \"FF_86_NH56_10\" control_samples <- \"CB_43_EP73_0\" subset <- mac_filtered%>%filter(combined_id%in%c(treatment_samples,control_samples)) batch <- subset$orig.ident top_table <- compute_single_de(mac_filtered, treatment_samples, control_samples, method =  \"limma_voom\", batch = batch) plot_volcano(top_table, max.overlaps = 6) #> Warning: ggrepel: 5718 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps genes <- top_table$gene[1:6] group_by <- \"combined_id\" plot_counts(mac_filtered,genes, group_by, treatment_samples, control_samples, normalisation = \"cpm\") #> Normalizing layer: counts"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"multiple-comparisons","dir":"Articles","previous_headings":"Coverting multiple DRUGseq plates to a macpie object > 3. Differential gene expression","what":"3.2 Multiple comparisons","title":"Cross platform compatibility","text":"339 compounds 10uM data, take quite (around 24 mins M3 Pro 18GB memory parallelisation speedup num_cores = 4) run. purpose vignette, include 100 compounds 10uM data. often want ask genes differentially expressed one treatment group. , can visualise treatment groups shared differentially expressed genes, defined top 20 -regulated genes single drug comparison (treatment vs control) found least 2 different treatment groups. heatmap shows shared differentially expressed genes corresponding log2FC values.","code":"treatments <- mac_filtered %>%   filter(Concentration_1 == 10) %>%   select(combined_id) %>%   pull() %>%   unique() #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis.  treatments_subset <- treatments[1:100] # only use 100 compounds for the vignette    mac_filtered <- compute_multi_de(mac_filtered, treatments_subset, control_samples = \"CB_43_EP73_0\", method = \"limma_voom\", num_cores = 4) plot_multi_de(mac_filtered, group_by = \"combined_id\", value = \"log2FC\", p_value_cutoff = 0.01, direction=\"up\", n_genes = 20, control = \"CB_43_EP73_0\", by=\"fc\")"},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"multiple-comparisons-1","dir":"Articles","previous_headings":"Coverting multiple DRUGseq plates to a macpie object > 4. Pathway enrichment analysis","what":"4.1 Multiple comparisons","title":"Cross platform compatibility","text":"pathway enrichment analysis done using enrichR. Results differential gene expression - multiple comparisons used pass pathway enrichment analysis. can visualise pathway enrichment results multiple comparisons heatmap.","code":"# Load genesets from enrichr for a specific species or define your own enrichr_genesets <- download_geneset(\"human\", \"MSigDB_Hallmark_2020\") mac_filtered<- compute_multi_enrichr(mac_filtered, genesets = enrichr_genesets)  enriched_pathways_mat <- mac_filtered@tools$pathway_enrichment %>%   bind_rows() %>%   select(combined_id, Term, Combined.Score) %>%   pivot_wider(names_from = combined_id, values_from = Combined.Score) %>%   column_to_rownames(var = \"Term\") %>%   mutate(across(everything(), ~ ifelse(is.na(.), 0, log1p(.)))) %>%  # Replace NA with 0 across all columns   as.matrix()   pheatmap(enriched_pathways_mat, color = macpie_colours$continuous_rev)"},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"selecting-robust-dmso-controls","dir":"Articles","previous_headings":"Benchmark","what":"Selecting robust DMSO controls","title":"Cross platform compatibility","text":"noticed DRUGseq authors implemented permutation strategy identify robust DMSO wells analytics pipeline. agree robust control selection critical comparative benchmarking. Novartis DRUGseq workflow selects DMSO controls via 500-permutation procedure retains wells minimising spurious DMSO–DMSO differentially expressed genes. make step practical routine QC researchers fewer DMSO wells, implemented alternative method macpie package select_robust_controls function uses correlation-based selection control wells. function ranks control wells based average Fisher-z-transformed correlation coefficients control wells, selecting highest average correlation scores ‘robust’ controls. DRUGseq data contains three replicate plates 48 DMSO controls (CB-43-EP73). applied select_robust_controls function DMSO wells. filters genes, normalises TMMwsp, computes log-CPM, ranks wells mean Fisher-z–transformed correlation replicate wells. top 5 wells highest transformed correlation compared DRUGseq results. benchmark performance macpie’s select_robust_controls function DRUGseq data select robust DMSO controls three replicate plates.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"drugseq-6-robust-dmso-wells","dir":"Articles","previous_headings":"Benchmark > Selecting robust DMSO controls","what":"DRUGseq: 6 robust DMSO wells","title":"Cross platform compatibility","text":"First load file robust DMSO control wells identified DRUGseq authors github repo. , show robust DMSO wells batch 24, contains three plates interested (VH02012942, VH02012944, VH02012956). 6 robust DMSO wells used benchmark standard compare macpie selected robust DMSO wells. results robust DMSO controls, robust DMSO wells batch 24: VH02012942: I23, M23 VH02012944: D23, H23 VH02012956: I23, J23","code":"robust_DMSO_DRUGseq <- read.csv(paste0(dir, \"DRUGseqData/robust_RC_ReferenceControl_DMSO_wells.txt\"), sep=\"\") robust_DMSO_DRUGseq %>% filter(batch_id==24) %>% select(batch_id, plate_barcode, well_id) #>   batch_id plate_barcode well_id #> 1       24    VH02012942     I23 #> 2       24    VH02012942     M23 #> 3       24    VH02012944     D23 #> 4       24    VH02012944     H23 #> 5       24    VH02012956     I23 #> 6       24    VH02012956     J23"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"macpie-select-robust-dmso-wells","dir":"Articles","previous_headings":"Benchmark > Selecting robust DMSO controls","what":"macpie: select robust DMSO wells","title":"Cross platform compatibility","text":"Now use function select_robust_controls identify robust DMSO controls batch 24. function: applies CPM filtering, performs TMMwsp normalisation computes log-CPM, ranks wells mean Fisher-z–transformed sample–sample correlation wells (Pearson Spearman) selects top n wells (user-defined) robust controls. Now apply select_robust_controls function three plates batch 24 identify robust DMSO controls. function generates three plots: Boxplot log2-CPM (TMMwsp) Sample–sample correlation (Pearson, log2-CPM) Sample–sample correlation (Spearman, log2-CPM) plots help visualize distribution gene expression correlation samples, aiding assessment DMSO control quality. make_plots = FALSE function, can now visualise plots plate separately. set make_plots = TRUE, function automatically generate plots .","code":"mac_filtered <- readRDS(paste0(dir, \"/DRUGseqData/macpie_filtered_batch24.Rds\")) mac_filtered$combined_id <- str_replace_all(mac_filtered$combined_id, \"-\",\"_\") #to use lapply on three plates plates <- c(\"VH02012942\", \"VH02012944\", \"VH02012956\") results <- lapply(plates, function(plate) {   select_robust_controls(     mac_filtered,     samples = \"CB_43_EP73_0\",     orig_ident  = plate,     cpm_filter  = 1,     min_samps   = 8,     corr_method = \"spearman\",     top_n       = 5,     make_plots  = FALSE   ) })  names(results) <- plates"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"plate-vh02012942","dir":"Articles","previous_headings":"Benchmark > Selecting robust DMSO controls > macpie: select robust DMSO wells","what":"Plate VH02012942","title":"Cross platform compatibility","text":"Apart correlation heatmaps, function also returns ranking wells mean correlation wells. Finally, returns top N wells robust DMSO controls. Now can see plate VH02012942, 2 top 5 DMSO wells selected macpie I23 J23, exactly robust DMSO wells identified DRUGseq authors. Let’s repeat process two plates batch 24.","code":"pheatmap::pheatmap(results$VH02012942$cor_pearson,   main = \"Sample-sample Pearson correlation (log2-CPM)\",    fontsize_row = 8, fontsize_col = 8) pheatmap::pheatmap(results$VH02012942$cor_spearman,   main = \"Sample-sample Spearman correlation (log2-CPM)\",    fontsize_row = 8, fontsize_col = 8) results$VH02012942$scores_mean_to_others #> VH02012942_K23 VH02012942_M23 VH02012942_J23 VH02012942_I23 VH02012942_C23  #>          0.878          0.877          0.875          0.874          0.872  #> VH02012942_N23 VH02012942_L23 VH02012942_E23 VH02012942_G23 VH02012942_H23  #>          0.870          0.869          0.869          0.866          0.863  #> VH02012942_O23 VH02012942_D23 VH02012942_P23 VH02012942_F23 VH02012942_B23  #>          0.860          0.858          0.858          0.851          0.849  #> VH02012942_A23  #>          0.843 results$VH02012942$topN #> VH02012942_K23 VH02012942_M23 VH02012942_J23 VH02012942_I23 VH02012942_C23  #>          0.878          0.877          0.875          0.874          0.872"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"plate-vh02012944","dir":"Articles","previous_headings":"Benchmark > Selecting robust DMSO controls > macpie: select robust DMSO wells","what":"Plate VH02012944","title":"Cross platform compatibility","text":"Apart correlation heatmaps, function also returns ranking wells mean correlation wells. Finally, returns top N wells robust DMSO controls. plate VH02012944, DRUGseq selected D23 H23 DMSO wells top 5. However, H23 ranked 6th macpie, close top 5.","code":"pheatmap::pheatmap(results$VH02012944$cor_pearson,   main = \"Sample-sample Pearson correlation (log2-CPM)\",    fontsize_row = 8, fontsize_col = 8) pheatmap::pheatmap(results$VH02012944$cor_spearman,   main = \"Sample-sample Spearman correlation (log2-CPM)\",    fontsize_row = 8, fontsize_col = 8) results$VH02012944$scores_mean_to_others #> VH02012944_I23 VH02012944_M23 VH02012944_J23 VH02012944_G23 VH02012944_K23  #>          0.906          0.904          0.903          0.902          0.901  #> VH02012944_H23 VH02012944_C23 VH02012944_L23 VH02012944_E23 VH02012944_D23  #>          0.900          0.899          0.898          0.897          0.897  #> VH02012944_O23 VH02012944_F23 VH02012944_N23 VH02012944_P23 VH02012944_A23  #>          0.897          0.897          0.895          0.890          0.887  #> VH02012944_B23  #>          0.880 results$VH02012944$topN #> VH02012944_I23 VH02012944_M23 VH02012944_J23 VH02012944_G23 VH02012944_K23  #>          0.906          0.904          0.903          0.902          0.901"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"plate-vh02012956","dir":"Articles","previous_headings":"Benchmark > Selecting robust DMSO controls > macpie: select robust DMSO wells","what":"Plate VH02012956","title":"Cross platform compatibility","text":"Apart correlation heatmaps, function also returns ranking wells mean correlation wells. Finally, returns top N wells robust DMSO controls. plate VH02012956, DRUGseq selected I23 J23 DMSO wells exactly top DMSO wells selected macpie.","code":"pheatmap::pheatmap(results$VH02012956$cor_pearson,   main = \"Sample-sample Pearson correlation (log2-CPM)\",    fontsize_row = 8, fontsize_col = 8) pheatmap::pheatmap(results$VH02012956$cor_spearman,   main = \"Sample-sample Spearman correlation (log2-CPM)\",    fontsize_row = 8, fontsize_col = 8) results$VH02012956$scores_mean_to_others #> VH02012956_J23 VH02012956_O23 VH02012956_M23 VH02012956_I23 VH02012956_K23  #>          0.912          0.904          0.902          0.902          0.901  #> VH02012956_N23 VH02012956_G23 VH02012956_H23 VH02012956_L23 VH02012956_P23  #>          0.901          0.900          0.899          0.899          0.897  #> VH02012956_F23 VH02012956_C23 VH02012956_D23 VH02012956_E23 VH02012956_A23  #>          0.894          0.893          0.892          0.891          0.888  #> VH02012956_B23  #>          0.886 results$VH02012942$topN #> VH02012942_K23 VH02012942_M23 VH02012942_J23 VH02012942_I23 VH02012942_C23  #>          0.878          0.877          0.875          0.874          0.872"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"summary","dir":"Articles","previous_headings":"Benchmark","what":"Summary","title":"Cross platform compatibility","text":"summarise performance macpie selecting robust DMSO wells, compare selected top 5 DMSO wells DRUGseq authors’ selected robust DMSO wells plate batch 24.  summary, three plates batch 24, macpie successfully identified 4 6 robust DMSO wells (~66.7% overall recovery rate) also selected DRUGseq authors. plate VH02012944, one DRUGseq selected DMSO wells (D23) top 5, well (H23) ranked 6th macpie, close top 5. demonstrates macpie effective selecting high-quality DMSO controls downstream analysis without running permutation tests, making computationally efficient choice. function runs plate, take account batches plates. ’s cross-plates design, recommended either compute within-plate remove plate effects (e.g. using ComBat, limma removeBatchEffect functions) first.","code":"# DRUG-seq authors' robust DMSO wells (batch 24) expected_df <- as_tibble(data.frame(   plate = c(\"VH02012942\", \"VH02012942\", \"VH02012944\", \"VH02012944\", \"VH02012956\", \"VH02012956\"),   well  = c(\"I23\", \"M23\", \"D23\", \"H23\", \"I23\", \"J23\"),   source = \"expected\"))   # Helper: extract topN wells (names are like \"VH02012942_I23\") extract_top_wells <- function(res_per_plate) {   tibble(sample = names(res_per_plate$topN),          score  = as.numeric(res_per_plate$topN)) |>     mutate(       plate = sub(\"_.*$\", \"\", sample),       well  = sub(\"^.*_\", \"\", sample),       rank  = row_number()     ) |>     select(plate, well, rank, score) }  top_df <- map_df(names(results), ~{   extract_top_wells(results[[.x]]) })   matched_df <- expected_df |>   left_join(top_df, by = c(\"plate\", \"well\")) |>   mutate(found = !is.na(rank))   plate_summary <- matched_df |>   group_by(plate) |>   summarise(     expected = n(),     recovered = sum(found),     recovery_rate = recovered / expected   )  plate_summary #> # A tibble: 3 × 4 #>   plate      expected recovered recovery_rate #>   <chr>         <int>     <int>         <dbl> #> 1 VH02012942        2         2             1 #> 2 VH02012944        2         0             0 #> 3 VH02012956        2         2             1  overall <- summarise(plate_summary,                      total_expected = sum(expected),                      total_recovered = sum(recovered),                      overall_rate = total_recovered / total_expected) overall #> # A tibble: 1 × 3 #>   total_expected total_recovered overall_rate #>            <int>           <int>        <dbl> #> 1              6               4        0.667 ggplot(plate_summary, aes(x = plate, y = recovered, fill = plate)) +   geom_col(width = 0.6, show.legend = FALSE) +   geom_text(aes(label = sprintf(\"%d / %d (%.0f%%)\",                                 recovered, expected, 100*recovery_rate)),             vjust = -0.6) +   ylim(0, max(plate_summary$expected) + 0.8) +   labs(title = \"Recovered DRUG-seq robust DMSO wells by plate\",        x = \"Plate\", y = \"Recovered wells\") +   theme_classic()"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"deg-concordance","dir":"Articles","previous_headings":"Benchmark","what":"DEG concordance","title":"Cross platform compatibility","text":"Now compare macpie implementations limma-voom, edgeR, DEseq2 limma-trend DRUGseq limma-trend result FF_86_NH56 (10uM) vs DMSO control batch 24. evaluated three control settings: () DMSO wells (48 wells), (ii) top 15 DMSO selected correlation-based approach, (iii) 6 DMSO wells identified DRUGseq 500 permutation-based method. focus -regulated genes FF_86_NH56 (genes called DEG BH-adjusted p < 0.05 log2FC > 0).","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"drugseq-deg-results","dir":"Articles","previous_headings":"Benchmark > DEG concordance","what":"DRUGseq DEG results","title":"Cross platform compatibility","text":"purpose vignette, load DRUGseq DEG results FF_86_NH56 (10uM) vs DMSO control batch 24.  1423 -regulated DEGs identified DRUGseq limma-trend method FF_86_NH56 (10uM) vs DMSO control batch 24.","code":"batch24_de <- readRDS(paste0(dir,\"DRUGseqData/DE_batch24.Rds\")) FF86_res <- batch24_de %>% filter(cmpd_sample_id==\"FF-86-NH56\") ff86_res_toptable <- FF86_res[,13:18] ff86_res_toptable <- ff86_res_toptable %>%    separate(gene.ID, into = c(\"gene\", \"chrom\"), sep = \",\") %>%   select(-chrom) %>% mutate(combined_id =\"FF_86_NH56_10\") %>%   rename(log2FC=logFC, p_value_adj = adj.P.Val) plot_volcano(ff86_res_toptable, max.overlaps =3) #> Warning: ggrepel: 4344 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps ff86_res_toptable %>% filter(p_value_adj <0.05 & log2FC >0) %>% nrow() #> [1] 1423  drugseq_deg <- ff86_res_toptable %>% filter(p_value_adj <0.05 & log2FC >0) %>% select(gene) %>% pull()"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"macpie-deg-results-with-all-dmso-wells","dir":"Articles","previous_headings":"Benchmark > DEG concordance","what":"macpie DEG results with all DMSO wells","title":"Cross platform compatibility","text":"Load filered data","code":"mac_filtered <- readRDS(paste0(dir, \"/DRUGseqData/macpie_filtered_batch24.Rds\")) mac_filtered$combined_id <- str_replace_all(mac_filtered$combined_id, \"-\",\"_\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"differential-gene-expression-1","dir":"Articles","previous_headings":"Benchmark > DEG concordance > macpie DEG results with all DMSO wells","what":"Differential gene expression","title":"Cross platform compatibility","text":", can specify single condition combined_id column compare DMSO (.e.CB_43_EP73_0). using plate IDs column orig.ident input batch parameter, compute_singe_de function can perform differential expression analysis using preferred method (limma voom example) batch information.","code":"methods <- c(\"limma_voom\", \"DESeq2\", \"edgeR\", \"limma_trend\")  methods_res <- lapply(methods, function(m){      message(\"\\n\",\"Processing method: \", m,\"\\n\")    # m<-\"limma_voom\"   treatment_samples <- \"FF_86_NH56_10\"   control_samples <- \"CB_43_EP73_0\"   subset <- mac_filtered%>%filter(combined_id%in%c(treatment_samples,control_samples))    batch <- subset$orig.ident     top_table <- compute_single_de(subset, treatment_samples, control_samples, method =  m, batch = batch)      # plot(plot_volcano(top_table, max.overlaps = 5))   alldmso_degs <- top_table %>% filter(p_value_adj <0.05 & log2FC>0) %>% select(gene) %>% pull()   length(intersect(alldmso_degs, drugseq_deg))      top_table <- top_table %>%     arrange(p_value_adj, desc(log2FC)) %>%     mutate(gene = factor(gene, levels = unique(gene)))   # add a column if there are in the intersect(alldmso_degs, drugseq_deg)   top_table <- top_table %>%     mutate(in_drugseq_deg = ifelse(gene %in% intersect(alldmso_degs, drugseq_deg), \"yes\", \"no\"))    # label a few top overlapping genes   lab_genes <- top_table[top_table$in_drugseq_deg==\"yes\", ] |>     dplyr::arrange(p_value_adj, dplyr::desc(log2FC))       volcano_overlap <- ggplot(top_table, aes(x = log2FC, y = -log10(p_value_adj), color = in_drugseq_deg)) +     geom_point(alpha = 0.6, size = 1.2) +     geom_text_repel(data = lab_genes, aes(label = gene), size = 3, max.overlaps = 50) +     scale_color_manual(values = c(\"no\"=\"#bdbdbd\",\"yes\"=\"#2b8cbe\"))+     theme_classic()         #return    result_list <- list(top_table = top_table,                       num_degs_macpie = length(alldmso_degs),                       n_overlap = length(intersect(alldmso_degs, drugseq_deg)),                       volcano_plot = volcano_overlap)    return(result_list)    }) #>  #> Processing method: limma_voom #>  #> Processing method: DESeq2 #> converting counts to integer mode #> estimating size factors #> estimating dispersions #> gene-wise dispersion estimates #> mean-dispersion relationship #> -- note: fitType='parametric', but the dispersion trend was not well captured by the #>    function: y = a/x + b, and a local regression fit was automatically substituted. #>    specify fitType='local' or 'mean' to avoid this message next time. #> final dispersion estimates #> fitting model and testing #> -- replacing outliers and refitting for 1196 genes #> -- DESeq argument 'minReplicatesForReplace' = 7  #> -- original counts are preserved in counts(dds) #> estimating dispersions #> fitting model and testing #>  #> Processing method: edgeR #>  #> Processing method: limma_trend  names(methods_res) <- methods"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"summary-table","dir":"Articles","previous_headings":"Benchmark > DEG concordance > macpie DEG results with all DMSO wells","what":"Summary table","title":"Cross platform compatibility","text":"","code":"#get a table to show number of DEGs and number of overlapping genes with DRUGseq for each method deg_summary <- map_df(methods_res, function(x) {   data.frame(     num_degs_macpie = x$num_degs_macpie,     n_overlap = x$n_overlap,     num_degs_DRUGseq = length(drugseq_deg)   ) }, .id = paste0(\"macpie_methods\"))  deg_summary #>   macpie_methods num_degs_macpie n_overlap num_degs_DRUGseq #> 1     limma_voom            5597       890             1423 #> 2         DESeq2            2188       817             1423 #> 3          edgeR            2340       719             1423 #> 4    limma_trend            3047       666             1423"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"overlapping-volcano-plot","dir":"Articles","previous_headings":"Benchmark > DEG concordance > macpie DEG results with all DMSO wells","what":"Overlapping volcano plot","title":"Cross platform compatibility","text":"","code":"methods_res$limma_voom$volcano_plot #> Warning: ggrepel: 862 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps methods_res$DESeq2$volcano_plot #> Warning: Removed 3480 rows containing missing values or values outside the scale range #> (`geom_point()`). #> Warning: ggrepel: 779 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps methods_res$edgeR$volcano_plot #> Warning: ggrepel: 652 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps methods_res$limma_trend$volcano_plot #> Warning: ggrepel: 644 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"macpie-deg-results-with-15-robust-dmso-wells","dir":"Articles","previous_headings":"Benchmark > DEG concordance","what":"macpie DEG results with 15 robust DMSO wells","title":"Cross platform compatibility","text":"select_robust_controls function , identified following top 15 DMSO wells three plates batch 24 using select_robust_controls:","code":"batch24 <- readRDS(paste0(dir,\"DRUGseqData/Exp_batch24.Rds\")) names(batch24) #> [1] \"VH02012956\" \"VH02012942\" \"VH02012944\" #make a combined metadata for three plates batch24_metadata <- batch24 %>%    map_dfr(~ {     .x$Annotation %>%       mutate(         Plate_ID        = plate_barcode,         Well_ID         = well_id,         Barcode         = paste0(plate_barcode, \"_\", well_index),         Row             = LETTERS[row],         Column          = as.integer(col),         Species         = \"human\",         Cell_type       = \"U2OS\",         Model_type      = \"2D_adherent\",         Time            = as.factor(hours_post_treatment),         Unit            = \"h\",         Treatment_1     = cmpd_sample_id,         Concentration_1 = as.numeric(concentration),         Unit_1          = unit,         Sample_type     = if_else(well_type == \"SA\" & col == 24,                                   \"Positive Control\",                                   well_type)       )   })   batch24_metadata <- batch24_metadata%>%select(-c(batch_id, plate_barcode,plate_index, well_id,                                                  well_index, col, row, biosample_id, external_biosample_id,                                                  cmpd_sample_id, well_type, cell_line_name, cell_line_ncn, concentration, unit, hours_post_treatment, Sample)) # create a combined UMI matrix for 3 plates batch24_counts <- batch24 %>%   map(~ {     .x$UMI.counts %>%       as.data.frame() %>%        rownames_to_column(\"gene_id\") %>%       separate(col = gene_id, into = c(\"gene_name\", \"chrom\"), sep = \",\") %>%       mutate(gene_name = make.unique(gene_name)) %>%       select(-chrom) %>%       tibble::column_to_rownames(var = \"gene_name\") %>%       as.matrix()   })  binded_counts <- do.call(cbind, batch24_counts) as_mac <- CreateSeuratObject(counts = binded_counts,    min.cells = 1,    min.features = 1) #> Warning: Feature names cannot have underscores ('_'), replacing with dashes #> ('-') #> Warning: Data is of class matrix. Coercing to dgCMatrix.  as_mac<- as_mac%>% inner_join(batch24_metadata, by = c(\".cell\"=\"Barcode\")) as_mac$combined_id <- paste0(as_mac$Treatment_1,\"_\", as_mac$Concentration_1)  badDMSO <- as_mac@meta.data %>% filter(Treatment_1 == \"CB-43-EP73\") %>%   filter((Plate_ID == \"VH02012942\" & !(Well_ID %in% c(\"I23\", \"M23\", \"K23\", \"J23\",\"C23\"))) |         (Plate_ID == \"VH02012944\" & !(Well_ID %in% c(\"I23\", \"M23\", \"J23\", \"G23\", \"K23\")))|         (Plate_ID == \"VH02012956\" & !  (Well_ID %in% c(\"I23\", \"J23\", \"O23\",\"M23\",\"K23\"))))    keep_wells <- setdiff(rownames(as_mac@meta.data), rownames(badDMSO))   mac_badDSMOremoved <- as_mac[,keep_wells]  mac_badDSMOremoved$combined_id <- str_replace_all(mac_badDSMOremoved$combined_id, \"-\",\"_\") min_sample_num <- min(table(mac_badDSMOremoved$combined_id)) mac_badDSMOremoved <- filter_genes_by_expression(mac_badDSMOremoved,                                            group_by = \"combined_id\", min_counts =10,                                            min_samples = min_sample_num)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"differential-gene-expression-2","dir":"Articles","previous_headings":"Benchmark > DEG concordance > macpie DEG results with 15 robust DMSO wells","what":"Differential gene expression","title":"Cross platform compatibility","text":"","code":"methods <- c(\"limma_voom\", \"DESeq2\", \"edgeR\", \"limma_trend\")  five_dmso_methods_res <- lapply(methods, function(m){   message(\"Processing method: \", m)    # m<-\"limma_voom\"   treatment_samples <- \"FF_86_NH56_10\"   control_samples <- \"CB_43_EP73_0\"   subset <- mac_badDSMOremoved%>%filter(combined_id%in%c(treatment_samples,control_samples))    batch <- subset$orig.ident    badDMSO_out_top_table <- compute_single_de(subset, treatment_samples, control_samples, method =  m, batch = batch)      # plot(plot_volcano(top_table, max.overlaps = 5))   badDMSO_out_degs <- badDMSO_out_top_table %>% filter(p_value_adj <0.05 & log2FC>0) %>% select(gene) %>% pull()   length(intersect(badDMSO_out_degs, drugseq_deg))      badDMSO_out_top_table <- badDMSO_out_top_table %>%     arrange(p_value_adj, desc(log2FC)) %>%     mutate(gene = factor(gene, levels = unique(gene)))   # add a column if there are in the intersect(alldmso_degs, drugseq_deg)   badDMSO_out_top_table <- badDMSO_out_top_table %>%     mutate(in_drugseq_deg = ifelse(gene %in% intersect(badDMSO_out_degs, drugseq_deg), \"yes\", \"no\"))      # label a few top overlapping genes   lab_genes <- badDMSO_out_top_table[badDMSO_out_top_table$in_drugseq_deg==\"yes\", ] |>     dplyr::arrange(p_value_adj, dplyr::desc(log2FC))       volcano_overlap <- ggplot(badDMSO_out_top_table, aes(x = log2FC, y = -log10(p_value_adj), color = in_drugseq_deg)) +     geom_point(alpha = 0.6, size = 1.2) +     geom_text_repel(data = lab_genes, aes(label = gene), size = 3, max.overlaps = 10) +     scale_color_manual(values = c(\"no\"=\"#bdbdbd\",\"yes\"=\"#2b8cbe\"))+     theme_classic()    #return    result_list <- list(top_table = badDMSO_out_top_table,                       num_degs_macpie = length(badDMSO_out_degs),                       n_overlap = length(intersect(badDMSO_out_degs, drugseq_deg)),                       volcano_plot = volcano_overlap)   return(result_list)    }) #> Processing method: limma_voom #> Processing method: DESeq2 #> converting counts to integer mode #> estimating size factors #> estimating dispersions #> gene-wise dispersion estimates #> mean-dispersion relationship #> final dispersion estimates #> fitting model and testing #> Processing method: edgeR #> Processing method: limma_trend  names(five_dmso_methods_res) <- methods"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"summary-table-1","dir":"Articles","previous_headings":"Benchmark > DEG concordance > macpie DEG results with 15 robust DMSO wells","what":"Summary table","title":"Cross platform compatibility","text":"","code":"#get a table to show number of DEGs and number of overlapping genes with DRUGseq for each method deg_summary <- map_df(five_dmso_methods_res, function(x) {   data.frame(     num_degs_macpie = x$num_degs_macpie,     n_overlap = x$n_overlap,     num_degs_DRUGseq = length(drugseq_deg)   ) }, .id = paste0(\"macpie_methods\"))  deg_summary #>   macpie_methods num_degs_macpie n_overlap num_degs_DRUGseq #> 1     limma_voom            3456       592             1423 #> 2         DESeq2            1107       549             1423 #> 3          edgeR            2185       690             1423 #> 4    limma_trend              60        15             1423"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"overlapping-volcano-plot-1","dir":"Articles","previous_headings":"Benchmark > DEG concordance > macpie DEG results with 15 robust DMSO wells","what":"Overlapping volcano plot","title":"Cross platform compatibility","text":"","code":"five_dmso_methods_res$limma_voom$volcano_plot #> Warning: ggrepel: 575 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps five_dmso_methods_res$DESeq2$volcano_plot #> Warning: Removed 12331 rows containing missing values or values outside the scale range #> (`geom_point()`). #> Warning: ggrepel: 535 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps five_dmso_methods_res$edgeR$volcano_plot #> Warning: ggrepel: 664 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps five_dmso_methods_res$limma_trend$volcano_plot #> Warning: ggrepel: 11 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"macpie-deg-results-with-6-robust-dmso-wells-from-drugseq","dir":"Articles","previous_headings":"Benchmark > DEG concordance","what":"macpie DEG results with 6 robust DMSO wells from DRUGseq","title":"Cross platform compatibility","text":"public DRUG-seq analysis pipeline, authors identified two reference controls: DMSO wells ‘robust DMSO’ wells. know robust DMSO wells batch 24 published data: VH02012942: I23, M23 VH02012944: D23, H23 VH02012956: I23, J23","code":"batch24 <- readRDS(paste0(dir,\"DRUGseqData/Exp_batch24.Rds\")) names(batch24) #> [1] \"VH02012956\" \"VH02012942\" \"VH02012944\" #make a combined metadata for three plates batch24_metadata <- batch24 %>%    map_dfr(~ {     .x$Annotation %>%       mutate(         Plate_ID        = plate_barcode,         Well_ID         = well_id,         Barcode         = paste0(plate_barcode, \"_\", well_index),         Row             = LETTERS[row],         Column          = as.integer(col),         Species         = \"human\",         Cell_type       = \"U2OS\",         Model_type      = \"2D_adherent\",         Time            = as.factor(hours_post_treatment),         Unit            = \"h\",         Treatment_1     = cmpd_sample_id,         Concentration_1 = as.numeric(concentration),         Unit_1          = unit,         Sample_type     = if_else(well_type == \"SA\" & col == 24,                                   \"Positive Control\",                                   well_type)       )   })   batch24_metadata <- batch24_metadata%>%select(-c(batch_id, plate_barcode,plate_index, well_id,                                                  well_index, col, row, biosample_id, external_biosample_id,                                                  cmpd_sample_id, well_type, cell_line_name, cell_line_ncn, concentration, unit, hours_post_treatment, Sample)) # create a combined UMI matrix for 3 plates batch24_counts <- batch24 %>%   map(~ {     .x$UMI.counts %>%       as.data.frame() %>%        rownames_to_column(\"gene_id\") %>%       separate(col = gene_id, into = c(\"gene_name\", \"chrom\"), sep = \",\") %>%       mutate(gene_name = make.unique(gene_name)) %>%       select(-chrom) %>%       tibble::column_to_rownames(var = \"gene_name\") %>%       as.matrix()   })  binded_counts <- do.call(cbind, batch24_counts) as_mac <- CreateSeuratObject(counts = binded_counts,    min.cells = 1,    min.features = 1) #> Warning: Feature names cannot have underscores ('_'), replacing with dashes #> ('-') #> Warning: Data is of class matrix. Coercing to dgCMatrix.  as_mac<- as_mac%>% inner_join(batch24_metadata, by = c(\".cell\"=\"Barcode\")) as_mac$combined_id <- paste0(as_mac$Treatment_1,\"_\", as_mac$Concentration_1)  badDMSO <- as_mac@meta.data %>% filter(Treatment_1 == \"CB-43-EP73\") %>%   filter((Plate_ID == \"VH02012942\" & !(Well_ID %in% c(\"I23\", \"M23\"))) |         (Plate_ID == \"VH02012944\" & !(Well_ID %in% c(\"D23\", \"H23\")))|         (Plate_ID == \"VH02012956\" & !  (Well_ID %in% c(\"I23\", \"J23\"))))    keep_wells <- setdiff(rownames(as_mac@meta.data), rownames(badDMSO))   mac_badDSMOremoved <- as_mac[,keep_wells]  mac_badDSMOremoved$combined_id <- str_replace_all(mac_badDSMOremoved$combined_id, \"-\",\"_\") min_sample_num <- min(table(mac_badDSMOremoved$combined_id)) mac_badDSMOremoved <- filter_genes_by_expression(mac_badDSMOremoved,                                            group_by = \"combined_id\", min_counts =10,                                            min_samples = min_sample_num)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"differential-gene-expression-3","dir":"Articles","previous_headings":"Benchmark > DEG concordance > macpie DEG results with 6 robust DMSO wells from DRUGseq","what":"Differential gene expression","title":"Cross platform compatibility","text":"","code":"methods <- c(\"limma_voom\", \"DESeq2\", \"edgeR\", \"limma_trend\")  robust_dmso_methods_res <- lapply(methods, function(m){   message(\"Processing method: \", m)    # m<-\"limma_voom\"   treatment_samples <- \"FF_86_NH56_10\"   control_samples <- \"CB_43_EP73_0\"   subset <- mac_badDSMOremoved%>%filter(combined_id%in%c(treatment_samples,control_samples))    batch <- subset$orig.ident    badDMSO_out_top_table <- compute_single_de(subset, treatment_samples, control_samples, method =  m, batch = batch)    # plot(plot_volcano(top_table, max.overlaps = 5))   badDMSO_out_degs <- badDMSO_out_top_table %>% filter(p_value_adj <0.05 & log2FC>0) %>% select(gene) %>% pull()   length(intersect(badDMSO_out_degs, drugseq_deg))      badDMSO_out_top_table <- badDMSO_out_top_table %>%     arrange(p_value_adj, desc(log2FC)) %>%     mutate(gene = factor(gene, levels = unique(gene)))   # add a column if there are in the intersect(alldmso_degs, drugseq_deg)   badDMSO_out_top_table <- badDMSO_out_top_table %>%     mutate(in_drugseq_deg = ifelse(gene %in% intersect(badDMSO_out_degs, drugseq_deg), \"yes\", \"no\"))    # label a few top overlapping genes   lab_genes <- badDMSO_out_top_table[badDMSO_out_top_table$in_drugseq_deg==\"yes\", ] |>     dplyr::arrange(p_value_adj, dplyr::desc(log2FC))       volcano_overlap <- ggplot(badDMSO_out_top_table, aes(x = log2FC, y = -log10(p_value_adj), color = in_drugseq_deg)) +     geom_point(alpha = 0.6, size = 1.2) +     geom_text_repel(data = lab_genes, aes(label = gene), size = 3, max.overlaps = 10) +     scale_color_manual(values = c(\"no\"=\"#bdbdbd\",\"yes\"=\"#2b8cbe\"))+     theme_classic()      #return    result_list <- list(top_table = badDMSO_out_top_table,                       num_degs_macpie = length(badDMSO_out_degs),                       n_overlap = length(intersect(badDMSO_out_degs, drugseq_deg)),                       volcano_plot = volcano_overlap)   return(result_list)    }) #> Processing method: limma_voom #> Processing method: DESeq2 #> converting counts to integer mode #> estimating size factors #> estimating dispersions #> gene-wise dispersion estimates #> mean-dispersion relationship #> final dispersion estimates #> fitting model and testing #> Processing method: edgeR #> Processing method: limma_trend  names(robust_dmso_methods_res) <- methods"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"summary-table-2","dir":"Articles","previous_headings":"Benchmark > DEG concordance > macpie DEG results with 6 robust DMSO wells from DRUGseq","what":"Summary table","title":"Cross platform compatibility","text":"","code":"#get a table to show number of DEGs and number of overlapping genes with DRUGseq for each method deg_summary <- map_df(robust_dmso_methods_res, function(x) {   data.frame(     num_degs_macpie = x$num_degs_macpie,     n_overlap = x$n_overlap,     num_degs_DRUGseq = length(drugseq_deg)   ) }, .id = paste0(\"macpie_methods\"))  deg_summary #>   macpie_methods num_degs_macpie n_overlap num_degs_DRUGseq #> 1     limma_voom            1352       204             1423 #> 2         DESeq2              10         8             1423 #> 3          edgeR            1757       604             1423 #> 4    limma_trend               1         1             1423"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"overlapping-volcano-plot-2","dir":"Articles","previous_headings":"Benchmark > DEG concordance > macpie DEG results with 6 robust DMSO wells from DRUGseq","what":"Overlapping volcano plot","title":"Cross platform compatibility","text":"","code":"robust_dmso_methods_res$limma_voom$volcano_plot #> Warning: ggrepel: 196 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps robust_dmso_methods_res$DESeq2$volcano_plot #> Warning: Removed 19705 rows containing missing values or values outside the scale range #> (`geom_point()`). robust_dmso_methods_res$edgeR$volcano_plot #> Warning: ggrepel: 583 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps robust_dmso_methods_res$limma_trend$volcano_plot"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"summary-of-deg-concordance","dir":"Articles","previous_headings":"Benchmark","what":"Summary of DEG concordance","title":"Cross platform compatibility","text":"compare DEGs different replicate numbers different methods","code":"methods <- c(\"limma_voom\", \"DESeq2\", \"edgeR\", \"limma_trend\")  get_jaccard <- function(deg_set, drugseq_deg){   intersection <- length(intersect(deg_set, drugseq_deg))   union <- length(union(deg_set, drugseq_deg))   jaccard_index <- intersection / union   return(jaccard_index) }  jaccard_index <- lapply(methods, function(m){   # all dmso   degs <- methods_res[[m]]$top_table %>% filter(p_value_adj <0.05 & log2FC>0) %>% select(gene) %>% pull()   jaccard_all <- get_jaccard(degs, drugseq_deg)   # five dmso   degs <- five_dmso_methods_res[[m]]$top_table %>% filter(p_value_adj <0.05 & log2FC>0) %>% select(gene) %>% pull()   jaccard_five <- get_jaccard(degs, drugseq_deg)   # three dmso   degs <- robust_dmso_methods_res[[m]]$top_table %>% filter(p_value_adj <0.05 & log2FC>0) %>% select(gene) %>% pull()   jaccard_three <- get_jaccard(degs, drugseq_deg)   jaccard_index <- data.frame(     method = m,     jaccard_all = jaccard_all,     jaccard_five = jaccard_five,     jaccard_three = jaccard_three   )   return(jaccard_index) })  df <- as.data.frame(do.call(rbind, jaccard_index)) rownames(df) <- df$method df <- df %>% select(-method) colnames(df) <- c(\"All DMSO\", \"macpie: 15 DMSO\", \"DRUGseq: 6 DMSO\") pheatmap::pheatmap(df,          cluster_rows = FALSE,          cluster_cols = FALSE,          display_numbers = TRUE,          main = \"Jaccard Index between macpie DEGs and DRUGseq DEGs\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"overlap-of-degs-using-all-dmso-wells","dir":"Articles","previous_headings":"Benchmark > Summary of DEG concordance","what":"Overlap of DEGs using all DMSO wells","title":"Cross platform compatibility","text":"","code":"library(UpSetR) all_dmso <- list(   limma_voom = methods_res$limma_voom$top_table %>% filter(p_value_adj <0.05 & log2FC>0) %>% select(gene) %>% pull(),   DESeq2 = methods_res$DESeq2$top_table %>% filter(p_value_adj <0.05 & log2FC>0) %>% select(gene) %>% pull(),   edgeR = methods_res$edgeR$top_table %>% filter(p_value_adj <0.05 & log2FC>0) %>% select(gene) %>% pull(),   limma_trend = methods_res$limma_trend$top_table %>% filter(p_value_adj <0.05 & log2FC>0) %>% select(gene) %>% pull(),   DRUGseq = drugseq_deg ) upset(fromList(all_dmso),        nsets = 5,        order.by = \"freq\",       main.bar.color = \"black\",       sets.bar.color = \"gray23\",       text.scale = c(2, 2, 2, 1.5, 2, 1.5),       mainbar.y.label = \"Number of common DEGs\",       sets.x.label = \"Number of DEGs\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"overlap-of-degs-using-15-dmso-wells","dir":"Articles","previous_headings":"Benchmark > Summary of DEG concordance","what":"Overlap of DEGs using 15 DMSO wells","title":"Cross platform compatibility","text":"","code":"five_dmso <- list(   limma_voom = five_dmso_methods_res$limma_voom$top_table %>% filter(p_value_adj <0.05 & log2FC>0) %>% select(gene) %>% pull(),   DESeq2 = five_dmso_methods_res$DESeq2$top_table %>% filter(p_value_adj <0.05 & log2FC>0) %>% select(gene) %>% pull(),   edgeR = five_dmso_methods_res$edgeR$top_table %>% filter(p_value_adj <0.05 & log2FC>0) %>% select(gene) %>% pull(),   limma_trend = five_dmso_methods_res$limma_trend$top_table %>% filter(p_value_adj <0.05 & log2FC>0) %>% select(gene) %>% pull(),   DRUGseq = drugseq_deg ) upset(fromList(five_dmso),        nsets = 5,        order.by = \"freq\",       main.bar.color = \"black\",       sets.bar.color = \"gray23\",       text.scale = c(2, 2, 2, 1.5, 2, 1.5),       mainbar.y.label = \"Number of common DEGs\",       sets.x.label = \"Number of DEGs\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"overlap-of-degs-using-6-dmso-wells","dir":"Articles","previous_headings":"Benchmark > Summary of DEG concordance","what":"Overlap of DEGs using 6 DMSO wells","title":"Cross platform compatibility","text":"Jaccard heatmap UpSet plots, 48 DMSO controls, DESeq2 edgeR show largest overlaps DRGseq (Jaccard = 0.29 0.24; UpSet intersections hundreds). Limma-voom shows moderate similarity (J=0.15), limma-trend returns smaller set (J=0.18). Using 15 macpie-selected DMSO reduces totals overlaps methods; DEseq2 edgeR remains relatively stable (J = 0.28 0.24). 6 DRUGseq controls, DEG sets shrink pair-wise intersection numbers drop. Especially DEseq2 drops J=0.01 limma_voom reduces J=0.08. edgeR remains relatively stable J=0.23. limma-trend run yields DEGs setting.","code":"robust_dmso <- list(   limma_voom = robust_dmso_methods_res$limma_voom$top_table %>% filter(p_value_adj <0.05 & log2FC>0) %>% select(gene) %>% pull(),   DESeq2 = robust_dmso_methods_res$DESeq2$top_table %>% filter(p_value_adj <0.05 & log2FC>0) %>% select(gene) %>% pull(),   edgeR = robust_dmso_methods_res$edgeR$top_table %>% filter(p_value_adj <0.05 & log2FC>0) %>% select(gene) %>% pull(),   limma_trend = robust_dmso_methods_res$limma_trend$top_table %>% filter(p_value_adj <0.05 & log2FC>0) %>% select(gene) %>% pull(),   DRUGseq = drugseq_deg ) upset(fromList(robust_dmso),        nsets = 5,        order.by = \"freq\",       main.bar.color = \"black\",       sets.bar.color = \"gray23\",       text.scale = c(2, 2, 2, 1.5, 2, 1.5),       mainbar.y.label = \"Number of common DEGs\",       sets.x.label = \"Number of DEGs\")"},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"why-robust-dmso-subsets-can-reduce-concordance-with-drugseq-degs","dir":"Articles","previous_headings":"Conclusion","what":"Why robust DMSO subsets can reduce concordance with DRUGseq DEGs?","title":"Cross platform compatibility","text":"Possible reasons fewer control samples, group-aware filter (>= 10 counts least 3 samples) becomes stringent, leading fewer genes tested DE analysis. reduction number tested genes can impact identification DEGs overlap DRUGseq results. Additionally, fewer control samples can increase variability estimates dispersion, can affect statistical power detect true DEGs. increased variability may lead less consistent results across different methods, thereby reducing concordance DRUGseq DEGs. Robust DMSO selected based similarity overall expression profiles, may slightly shift normalisation mean-variance trend estimating TMM/TMMwsp.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"minimal-workflow-we-recommend-for-macpie-deg-analysis","dir":"Articles","previous_headings":"Conclusion","what":"Minimal workflow we recommend for macpie DEG analysis","title":"Cross platform compatibility","text":"QC filtering: Use group-aware filtering filter_genes_by_expression retain genes consistent expression within treatment. Examine batch/unwanted variation, potential outliers data. Check zero-inflation: Run check_zeroinflation filtering ensure zero-inflation minimized. Decision heuristic: example, observed zero proportions significantly higher expected NB filtering, consider using methods account zero-inflation. Pick controls consciously: Start available controls assess potential outliers. Choose DE method: zero-inflation present, use method accounts (compute_single_de edgeR ZINB-WaVE weights). zero-inflation concern, edgeR (QLFit) limma-voom (TMMwsp): methods designed account gene-specific variability handle heteroscedasticity effectively. limma-trend: remains suitable uniformly sequenced experiments assumes similar library sizes/sequencing depth. DESeq2: strong shrinkage & automatic independent filtering. batch/unwanted variation, include design (~ batch + condition) adjust limma’s removeBatchEffect / edgeR design. strong, apply RUVseq (e.g. RUVg empirical negative controls RUVs replicate samples) DE. Re-compute normalization RUV re-fit DE model.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/high_throughput_screens.html","id":"data-import","dir":"Articles","previous_headings":"","what":"1. Data import","title":"High throughput screening","text":"First import data providing either directory, vector directories (multiple plates) Read10X function, described previous vignettes, Quality control.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/high_throughput_screens.html","id":"single-perturbation","dir":"Articles","previous_headings":"","what":"2. Single perturbation","title":"High throughput screening","text":"using “MSigDB_Hallmark_2020” standard choice pathway enrichment, number gene sets available enrichR might relevant screens, “RNA-Seq_Disease_Gene_and_Drug_Signatures_from_GEO”, even cell direction specific ones “MCF7_Perturbations_from_GEO_down”. full list available listEnrichrDbs(). following example, investigate compounds similar profile Erlotinib (SN02373723), showcase profile can confirmed public datasets, even different cell line (lung adencarcinoma, (GSE65420).","code":"# First perform the differential expression analysis treatment_samples <- \"Erlotinib_Hydrochloride_10\" control_samples <- \"DMSO_0\" top_table <- compute_single_de(mac, treatment_samples, control_samples, method = \"limma_voom\") top_genes <- top_table %>%   filter(p_value_adj < 0.01) %>%   select(gene) %>%   pull()  # Perform enrichment analysis. Warning, you will require internet access to use EnrichR enriched <- enrichR::enrichr(top_genes, c(\"RNA-Seq_Disease_Gene_and_Drug_Signatures_from_GEO\")) #> Uploading data to Enrichr... Done. #>   Querying RNA-Seq_Disease_Gene_and_Drug_Signatures_from_GEO... Done. #> Parsing results... Done. p1 <- enrichR::plotEnrich(enriched[[1]]) +    macpie_theme(legend_position_ = 'right') +    scale_fill_gradientn(colors = macpie_colours$divergent) p1"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/high_throughput_screens.html","id":"screen-level-analyses","dir":"Articles","previous_headings":"","what":"3. Screen-level analyses","title":"High throughput screening","text":"high-throughput screens commonly want compare multiple samples control parallel. First select vector perturbations, case “combined_ids” contain term “DMSO”.","code":"treatments <- mac %>%   filter(Concentration_1 == 10) %>%   select(combined_id) %>%   filter(!grepl(\"DMSO\", combined_id)) %>%   pull() %>%   unique() mac <- compute_multi_de(mac, treatments, control_samples = \"DMSO_0\", method = \"limma_voom\", num_cores = 1)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/high_throughput_screens.html","id":"expression-profiles-of-individual-genes","dir":"Articles","previous_headings":"3. Screen-level analyses","what":"3.1 Expression profiles of individual genes","title":"High throughput screening","text":"visualise logFC expression top 20 genes Erlotinib (SN02373723) DE analysis across screen plot_multi_de.","code":"plot_multi_de(mac, group_by = \"combined_id\", value = \"log2FC\", p_value_cutoff = 0.01, direction=\"up\", control = \"DMSO_0\", by=\"fc\", gene_list = head(top_genes, 20))"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/high_throughput_screens.html","id":"pathway-enrichment","dir":"Articles","previous_headings":"3. Screen-level analyses","what":"3.2 Pathway enrichment","title":"High throughput screening","text":"Similarly, can observe gene sets, either provided user publicly available, shared across treatments, specific individual perturbations.","code":"# Load genesets from enrichr for a specific species or define your own enrichr_genesets <- download_geneset(\"human\", \"MSigDB_Hallmark_2020\") mac <- compute_multi_enrichr(mac, genesets = enrichr_genesets)  enriched_pathways_mat <- mac@tools$pathway_enrichment %>%   bind_rows() %>%   group_by(combined_id) %>%   slice_max(order_by = Combined.Score, n = 8, with_ties = FALSE) %>%  # Select top 10 per group   ungroup() %>%   select(combined_id, Term, Combined.Score) %>%   pivot_wider(names_from = combined_id, values_from = Combined.Score) %>%   column_to_rownames(var = \"Term\") %>%   mutate(across(everything(), ~ ifelse(is.na(.), 0, log1p(.)))) %>%   as.matrix()  pheatmap(enriched_pathways_mat, color = macpie_colours$continuous_rev)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/high_throughput_screens.html","id":"clustering-of-expression-profiles","dir":"Articles","previous_headings":"3. Screen-level analyses","what":"3.3 Clustering of expression profiles","title":"High throughput screening","text":"UMAP dimensionality reduction commonly used visualise clustering samples according expression profiles. Instead using individual replicates UMAP, can cluster based statistical metric differential gene expression vs control, allows control batch-correction data reduction replicate noise. Function aggregate_by_de creates new Seurat object, collapsing metadata across replicates.  number analyses become available, including plotting biological signatures UMAP plots.","code":"mac_agg <- aggregate_by_de(mac) mac_agg <- compute_de_umap(mac_agg) mac_agg <- FindNeighbors(mac_agg, reduction = \"umap_de\", dims = 1:2, verbose = FALSE) # This command creates a column \"seurat_clusters\" mac_agg <- FindClusters(mac_agg, resolution = 1.1, verbose = FALSE) # Plot a umap plot_de_umap(mac_agg, color_by = \"seurat_clusters\") # Perform AUCell analysis cells_rankings <- AUCell_buildRankings(   GetAssayData(mac_agg), plotStats = FALSE) cells_AUC <- AUCell_calcAUC(enrichr_genesets, cells_rankings, verbose = FALSE)   # Add AUCell results to the original object auc_df <- getAUC(cells_AUC) %>%   t() %>%   as.data.frame() %>%   tibble::rownames_to_column(\".cell\")  mac_agg <- mac_agg %>%   left_join(auc_df,by = \".cell\")    # We can then plot by any of the pathways, for example: p <- plot_de_umap(mac_agg, color_by = \"Oxidative Phosphorylation\") girafe(ggobj = p,    fonts = list(sans = \"sans\"),   options = list(     opts_hover(css = \"stroke:black; stroke-width:0.8px;\")  # <- slight darkening   ))"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/high_throughput_screens.html","id":"similarity-to-a-known-profile","dir":"Articles","previous_headings":"3. Screen-level analyses","what":"3.4 Similarity to a known profile","title":"High throughput screening","text":"Additionally, performing screen, sometimes want measure similarity either existing profile, user-defined gene-set defines desired phenotype. Similarly, can compare enrichments known gene set.","code":"mac_agg <- compute_multi_screen_profile(mac_agg, target = \"Staurosporine_10\", num_cores = 1) p <- plot_multi_screen_profile(mac_agg, color_by = \"seurat_clusters\") girafe(ggobj = p,    fonts = list(sans = \"sans\"),   options = list(     opts_hover(css = \"stroke:black; stroke-width:0.8px;\")  # <- slight darkening   )) enrichr_genesets <- download_geneset(\"human\", \"MSigDB_Hallmark_2020\")  mac_agg <- compute_multi_screen_profile(mac_agg, geneset = enrichr_genesets[[\"Oxidative Phosphorylation\"]]) p <- plot_multi_screen_profile(mac_agg, color_by = \"seurat_clusters\") girafe(ggobj = p,    fonts = list(sans = \"sans\"),   options = list(     opts_hover(css = \"stroke:black; stroke-width:0.8px;\")  # <- slight darkening   ))"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/high_throughput_screens.html","id":"estimate-of-dose-response","dir":"Articles","previous_headings":"","what":"4. Estimate of dose-response","title":"High throughput screening","text":"macpie can used calculate dose-response curves individual genes, pathways external measurement cell viability available metadata, based R package drc also available paralelisable format function “compute_multiple_dose_response”.","code":"enrichr_genesets <- download_geneset(\"human\", \"MSigDB_Hallmark_2020\")  # Note that we are not using the aggregated object, since we need replicates mac <- compute_multi_enrichr(mac, genesets = enrichr_genesets) res <- compute_single_dose_response(data = mac,   gene = \"EIF2B5\",   normalisation = \"limma_voom\",   treatment_value = \"Staurosporine\") #>  #> Estimated effective doses #>  #>        Estimate Std. Error    Lower    Upper #> e:1:50   2.0412     6.5744 -11.5277  15.6101 # All of the properties res$plot res <- compute_single_dose_response(data = mac,   pathway = \"Myc Targets V1\",   treatment_value = \"CAMPTOTHECIN\") #>  #> Estimated effective doses #>  #>        Estimate Std. Error Lower Upper #> e:1:50   4.6533    10.0000   NaN   NaN res$plot"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/high_throughput_screens.html","id":"working-with-chemical-descriptors","dir":"Articles","previous_headings":"","what":"4. Working with chemical descriptors","title":"High throughput screening","text":"macpie provides easy way find smiles compounds names, compute chemical descriptors compounds identify important phenotype. example , Wiener path number, representing overall branching molecule important targeting estrogen activity, measured percentage increase Mean Squared Error (%IncMSE).","code":"# Add smiles based on a column with generic names of compounds #(warning, this process requires internet connection and can take a while) #mac <- compute_smiles(mac, compound_column = \"Compound_ID\") # ## Calculate descriptors mac <- compute_chem_descriptors(mac)  #change column names for joining colnames(mac@tools$chem_descriptors)[1] <- \"combined_id\"  # Join with target variable (e.g. pathway score) model_df <- mac@tools$pathway_enrichment %>%   filter(Term == \"Estrogen Response Early\") %>%   left_join(., mac@meta.data, join_by(combined_id)) %>%   filter(Concentration_1 == 10) %>%   select(Treatment_1, Combined.Score, combined_id) %>%   unique() %>%   left_join(., mac@tools$chem_descriptors, join_by(combined_id)) %>%   select(-combined_id) %>%   drop_na()  # Train random forest rf_model <- randomForest(Combined.Score ~ ., data = model_df, importance = TRUE, na.action = na.omit)  # Get importance scores rf_importance <- importance(rf_model, type = 1)  # %IncMSE = predictive power rf_ranked <- sort(rf_importance[, 1], decreasing = TRUE)  # Top 20 important descriptors head(rf_ranked, 20) #>           Fsp3        MDEO.11          ATSm1         WTPT.5        nRings5  #>     2.61882136     2.02448505     1.86901073     1.52871682     1.36434306  #> tpsaEfficiency          nAcid          SCH.5          C1SP3          XLogP  #>     1.09144808     1.00100150     0.98454638     0.90667258     0.78385517  #>       khs.aaaC      topoShape    nSmallRings        MDEC.11        nRings4  #>     0.77161789     0.45889299     0.28752283     0.03567346     0.00000000  #>        MDEN.11       khs.dCH2        khs.tCH        khs.dNH        khs.dsN  #>     0.00000000     0.00000000     0.00000000     0.00000000     0.00000000 #>      WTPT.2     nRings5     MDEC.11     nRings7     MDEO.22     MDEO.11  #> 3.361393653 2.150421361 1.214784237 1.001001503 0.783327367 0.709299485  #>   khs.ssCH2 nSmallRings     MDEN.33     MDEC.14   topoShape      ALogp2  #> 0.474955644 0.366086694 0.115293479 0.085759728 0.077678537 0.007617685  #>     nRings4     MDEN.11    khs.dCH2     khs.tCH     khs.dNH    khs.aaNH  #> 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000  #>     khs.dsN     khs.aaO  #> 0.000000000 0.000000000 #>  rf_importance_clean <- rf_importance %>%   as.data.frame() %>%   rownames_to_column(\"Feature\") %>%   filter(is.finite(`%IncMSE`)) %>%   arrange(desc(`%IncMSE`))  top_n <- min(20, nrow(rf_importance_clean))  dotchart(   rf_importance_clean$`%IncMSE`[1:top_n],   labels = rf_importance_clean$Feature[1:top_n],   main = \"Top Random Forest Features\",   xlab = \"%IncMSE\" )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/integration_across_modalities.html","id":"import-screen-data","dir":"Articles","previous_headings":"","what":"1. Import screen data","title":"Data integration","text":"First import data providing either directory, vector directories (multiple plates) Read10X function, described previous vignettes, Quality control.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/integration_across_modalities.html","id":"data-collection","dir":"Articles","previous_headings":"","what":"2. Data collection","title":"Data integration","text":"section collate data across various modalities regularly associated transcriptomic screens. show import sample annotations, integrate gene expression pathway enrichment.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/integration_across_modalities.html","id":"import-external-annotations","dir":"Articles","previous_headings":"2. Data collection","what":"2.1 Import external annotations","title":"Data integration","text":"example loading additional sample information, case cell viability confluence, merging metadata based column Well_ID.","code":"file_path <- system.file(\"extdata\", \"PMMSq033/PMMSq033_CTG_cellcount.csv\", package = \"macpie\") cell_viability <- read.csv(file_path) %>%   #mutate(   #  cell_viability = scale(cell_viability)[, 1],   #  cell_confluence = scale(cell_confluence)[, 1]   #) %>%   dplyr::select(Well_ID, cell_viability, cell_confluence)  # Modify metadata mac@meta.data <- mac@meta.data %>%   left_join(cell_viability, by = \"Well_ID\") %>%   column_to_rownames(\"Barcode\") #tidyverse does not preserve row names that Seurat needs"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/integration_across_modalities.html","id":"calculate-differentially-expressed-genes","dir":"Articles","previous_headings":"2. Data collection","what":"2.2 Calculate differentially expressed genes","title":"Data integration","text":"","code":"treatments <- mac %>%   filter(Concentration_1 == 10) %>%   select(combined_id) %>%   filter(!grepl(\"DMSO\", combined_id)) %>%   pull() %>%   unique() mac <- compute_multi_de(mac, treatments, control_samples = \"DMSO_0\", method = \"limma_voom\", num_cores = 1)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/integration_across_modalities.html","id":"calculate-pathway-enrichment","dir":"Articles","previous_headings":"2. Data collection","what":"2.3 Calculate pathway enrichment","title":"Data integration","text":"","code":"enrichr_genesets <- download_geneset(\"human\", \"MSigDB_Hallmark_2020\") mac <- compute_multi_enrichr(mac, genesets = enrichr_genesets, p_value_cutoff = 0.05)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/integration_across_modalities.html","id":"calculate-chemical-descriptors-of-compounds","dir":"Articles","previous_headings":"2. Data collection","what":"2.4 Calculate chemical descriptors of compounds","title":"Data integration","text":"perturbations small molecules, straightforward add information chemical descriptors based smiles column data.","code":"# If you don't have smiles in your metadata, calculate them based on the compound ID  #mac <- compute_smiles(mac, compound_column = \"Compound_ID\") mac <- compute_chem_descriptors(mac)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/integration_across_modalities.html","id":"mofa-workflow","dir":"Articles","previous_headings":"","what":"3. MOFA workflow","title":"Data integration","text":"MOFA provides framework integration multiomics datasets, identifying “Factors” (principal components) define main sources variation dataset, across modalities. order identify , follow MOFA workflow. key functions include: create_mofa (import multiomics data.frame long format) prepare_mofa (set traning options) run_mofa (train MOFA model) macpie package streamlines analysis MOFA, extracting multimodal data required first step creating MOFA object user. load data “MOFAobject” start analysis, us build_mofa, function prepares MOFA object based genes pathways (previously calculated, slot @tools) chemical descriptors (previously calculated, optional) tables slot @tools containing column “Treatment”, unique treatment ids first instance try identify Factors capture variation chemical descriptors gene expression / pathway enrichment.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/integration_across_modalities.html","id":"mofa-object","dir":"Articles","previous_headings":"3. MOFA workflow","what":"3.1 MOFA object","title":"Data integration","text":"include metadata columns define cell viability confluence.","code":"MOFAobject <- build_mofa(data = mac,                          combined_ids = treatments, #unique samples IDs (treat+conc) to be used                          metadata_columns = c(\"cell_confluence\", \"cell_viability\"), #vector of metadata columns to include in the analysis                          de_metric = \"metric\", #column name of data for DE analysis, such as:                                                #\"log2FC\" or \"metric\" (test statistic)                          de_pval_thresh = 0.01,                          de_padj_col = \"p_value_adj\",                          pathway_pval_thresh = 1, #p-value cutoff for pathway significance                          pathway_pval_col = \"Adjusted.P.value\", #column used for p-valye cutoff                          pathway_score_col = \"Combined.Score\" #column used as pathway enrichment metric ) MOFA2::plot_data_overview(MOFAobject)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/integration_across_modalities.html","id":"scaling","dir":"Articles","previous_headings":"3. MOFA workflow","what":"3.2 Scaling","title":"Data integration","text":"groups modalities (views) different ranges/variances, good practice scale unit variance modifying model options scale_views scale_groups (default FALSE).","code":"data_opts <- MOFA2::get_default_data_options(MOFAobject) data_opts$scale_views <- TRUE data_opts$scale_groups <- TRUE"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/integration_across_modalities.html","id":"model-parameters","dir":"Articles","previous_headings":"3. MOFA workflow","what":"3.3 Model parameters","title":"Data integration","text":"Modify model training parameters , including likelihoods distributions, number iterations usage GPU.","code":"model_opts <- MOFA2::get_default_model_options(MOFAobject) train_opts <- MOFA2::get_default_training_options(MOFAobject) train_opts$seed <- 1  # for reproducibility"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/integration_across_modalities.html","id":"running-the-model","dir":"Articles","previous_headings":"3. MOFA workflow","what":"3.4 Running the model","title":"Data integration","text":"","code":"MOFAobject <- MOFA2::prepare_mofa(MOFAobject,                             data_options = data_opts,                            model_options = model_opts,                             training_options = train_opts) model <- MOFA2::run_mofa(MOFAobject, use_basilisk = TRUE)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/integration_across_modalities.html","id":"investigation-of-factors","dir":"Articles","previous_headings":"3. MOFA workflow","what":"3.5 Investigation of Factors","title":"Data integration","text":"plot allows us evaluate whether Factors correlated, case eliminated future analyses.","code":"MOFA2::plot_factor_cor(model)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/integration_across_modalities.html","id":"variance-decomposition","dir":"Articles","previous_headings":"3. MOFA workflow","what":"3.6 Variance decomposition","title":"Data integration","text":"running model, now easy follow standard MOFA worklow. can quantify amount variance explained (𝑅2) factor, data modality. seems first factor captures lot variability across modalities, least pathways (8.1%) chemical descriptors (0%). explained fact lot information content pathways directly contained gene expression, already captured MOFA. Also, number molecules might small chemical properties able explain variability dataset.","code":"head(model@cache$variance_explained$r2_per_factor$group1) # group 1 #>         cell_confluence cell_viability     genes     pathways chem_descriptors #> Factor1    3.829609e+01   1.993528e+01 34.349394 0.0814557076                0 #> Factor2    7.075602e+00   3.376725e+01  5.242789 0.0003278255                0 #> Factor3    1.805512e+01   1.282811e-01  9.765500 0.0020205975                0 #> Factor4    4.338485e+00   1.340080e+01  3.388435 0.0007033348                0 #> Factor5   -4.768372e-05   4.529953e-04  3.786212 0.0009715557                0 p<-MOFA2::plot_variance_explained(model) p<-p+theme(axis.text.x = element_text(angle = 45, hjust = 1)) p"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/integration_across_modalities.html","id":"visualisation-of-feature-weights","dir":"Articles","previous_headings":"3. MOFA workflow","what":"3.7 Visualisation of feature weights","title":"Data integration","text":"“Factors” correspond principle componenets PCA analysis, “weight” corresponds “loadings”. positive weight feature, case genes PPP2R1A DCTN3, marks strong relation Factor 1. sign weight indicates direction effect, features PPP2R1A DCTN3 higher levels cells positive Factor 1 values, cell viability opposite.  can use MOFA’s scatter plots visualise factor values, establish whether relationship features factor values linear  DCTN3 encodes dynactin subunit 3, part dynactin motor complex essential intracellular transport formation mitotic spindle. High DCTN3 may influence cell viability cells treated microtubule inhibitors. Similarly, PPP2R1 serine/threonine phosphatase regulates chromatin remodeling, high levels PPP2R1A may detrimental combination epigenetic drugs.  DCTN3 expression appears stratify differential cellular responses diverse therapeutic agents. High DCTN3 levels correlate reduced viability cells treated camptothecin, 5’-azacytidine, paclitaxel - drugs rely active cell division efficient mitotic machinery cytotoxic effects, suggesting DCTN3-dependent trafficking spindle dynamics may sensitize cells genotoxic stress. Conversely, low DCTN3 expression associated increased viability response capivasertib, cytarabine, ribociclib, SB590885, potentially reflecting drug-tolerant state marked reduced proliferation, impaired retrograde transport, altered checkpoint engagement.","code":"p1<-MOFA2::plot_top_weights(model,                  view = \"genes\",                  factor = 1,                  nfeatures = 5 ) p2<-MOFA2::plot_top_weights(model,                  view = \"cell_viability\",                  factor = 1,                  nfeatures = 5 ) p1+p2 p <- plot_data_scatter(model,   view = \"genes\",         # view of interest   factor = 1,             # factor of interest   features = 5,           # number of features to plot (they are selected by weight)   add_lm = TRUE,          # add linear regression   color_by = \"cell_viability\" ) p p1<- plot_factor(model,              factors = c(1),             group_by = \"sample\",             color_by = \"DCTN3\" ) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) #p1 p2<- plot_factor(model,              factors = c(1),             group_by = \"sample\",             color_by = \"cell_viability\" ) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) p1+p2"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"macpie: overview","text":"MAC-seq cost-effective, high-throughput transcriptomic platform, developed collaboration Victorian Centre Functional Genomics (VCFG) Molecular Genomics Core (MGC) facilities Peter MacCallum Cancer Centre (Peter Mac), primarily designed small molecule screening. However, versatility extends beyond application, thanks integration high-throughput microscopy 3D cell culturing techniques. macpie toolkit designed researchers, originally MAC-seq data mind, validated general High-Throughput Transcriptomics (HTTr) data applications. primary aim deliver latest tools quality control (QC), visualization, analysis. macpie result collaborative effort workgroup PeterMac, substantial support VCFG amd MGC core facilities. vignette cover basic functionality macpie, input, quality control transcriptional screen-related analyses. -depth workflows, please refer vignettes: Quality control Transcriptional analysis Compound screening Cross-platform compatibility","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"metadata-import-and-qc","dir":"Articles","previous_headings":"Introduction","what":"1. Metadata import and QC","title":"macpie: overview","text":"Key points: metadata contain least columns Plate_ID, Well_ID, Row, Column, Species, Sample_type, Treatment_1, Concentration_1 Barcode. Metadata tabular format contain standardised set columns define coordinates sample plate, provide minimum information sample, allow connection transcriptomic data sample barcodes. ensure integrity metadata future analyses, provide user set tools verify metadata consistency visualize key variables, described depth QC vignette. first visually inspect experimental variables, order identify potential artefacts.  Key Lessons Robust Experimental Design Based experience, specific metadata need vary greatly experiment’s design. crucial lessons ’ve learned help achieve reliable results: Plate Layout Matters: Always place replicate sample wells assay plate, across multiple plates. Minimum Replicates: Aim minimum 3 replicates per condition ensure statistical robustness. Strategic Negative Controls: negative control wells, recommend including 10 wells randomized across assay plate. provides robust baseline.","code":"#install.packages(\"macpie\")  # or devtools::install_github(\"PMCC-BioinformaticsCore/macpie\") library(macpie) library(enrichR) library(randomForest) library(pheatmap) library(ggrepel)  # Load metadata project_metadata <- system.file(\"extdata/PMMSq033_metadata.csv\", package = \"macpie\")  # Load metadata metadata <- read_metadata(project_metadata) plot_metadata_heatmap(metadata)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"sequencing-data-import-and-qc","dir":"Articles","previous_headings":"Introduction","what":"2. Sequencing data import and QC","title":"macpie: overview","text":"Key points: pay special attention removal lowly expressed genes : use plot_plate_layout check plate-level effects (edge vs centre, plates) use plot_mds check sample grouping (umap/pca also available using Seurat’s functions) use compute_qc_metrics, plot_qc_metrics_heatmap, plot_distance check sample variability outliers use plot_rle check row/column/plate effects compare normalization methods detailed methods avaailable vignette Quality control","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"import-data-to-tidyseurat-object","dir":"Articles","previous_headings":"Introduction > 2. Sequencing data import and QC","what":"2.1 Import data to tidySeurat object","title":"macpie: overview","text":"Data access: load raw counts providing Read10X function path directory containing matrix.mtx.gz, barcodes.tsv.gz, features.tsv.gz, commonly “raw_matrix” CellRanger StarSolo output full manuscript dataset (>10 MB .rds files) currently restricted release become publicly available upon publication (Zenodo). meantime, please contact us early access use data(mini_mac) load subsample (308 samples, 500 genes) full dataset, commented code ","code":"# 1. Load your own gene counts per sample or 2. data from the publication project_rawdata <- paste0(dir, \"/macpieData/PMMSq033/raw_matrix\") project_name <- \"PMMSq033\" raw_counts <- Read10X(data.dir = project_rawdata)  # Create tidySeurat object mac <- CreateSeuratObject(counts = raw_counts,                           project = project_name,                           min.cells = 1,                           min.features = 1)  # 3. Alternatively, load a premade example: # data(mini_mac) # mac <- mini_mac  # Join gene counts per sample with metadata mac <- mac %>%   inner_join(metadata, by = c(\".cell\" = \"Barcode\"))  # Create unique identifier for your treatments based on metadata mac <- mac %>%   mutate(combined_id = str_c(Treatment_1, Concentration_1, sep = \"_\")) %>%   mutate(combined_id = gsub(\" \", \"\", .data$combined_id)) %>%   mutate(combined_id = make.names(combined_id))  # # Filter by read count per sample group mac <- filter_genes_by_expression(mac,                                   group_by = \"combined_id\",                                   min_counts = 5,                                   min_samples = 1)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"basic-qc-metrics","dir":"Articles","previous_headings":"Introduction > 2. Sequencing data import and QC","what":"2.2 Basic QC metrics","title":"macpie: overview","text":"macpie allows use common QC plots Seurat package visualise number genes, reads, percentage mitochondrial ribosomal genes per sample.  addition, can apply tidyverse functions explore dataset. example, let’s subset Seurat object based column “Project” metadata visualise grouping data plate vs MDS plot. Plate layout plots provide interactive way inspect spatial patterns across plate, helping identify anomalies unexpected trends. hovering plot, sample groups automatically highlighted aid interpretation.","code":"# Calculate the percent of mitochondrial and ribosomal genes mac[[\"percent.mt\"]] <- PercentageFeatureSet(mac, pattern = \"^mt-|^MT-\") mac[[\"percent.ribo\"]] <- PercentageFeatureSet(mac, pattern = \"^Rp[slp][[:digit:]]|^Rpsa|^RP[SLP][[:digit:]]|^RPSA\")  # Example of a function from Seurat quality control  VlnPlot(mac, features = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent.mt\", \"percent.ribo\"),          ncol = 4, group.by = \"Sample_type\") &    scale_fill_manual(values = macpie_colours$discrete) unique(mac$Project) #> [1] \"Trial\"   \"Current\" mac <- mac %>%   filter(Project == \"Current\")  # Interactive QC plot plate layout (all metadata columns can be used): p <- plot_plate_layout(mac, \"nCount_RNA\", \"combined_id\") girafe(ggobj = p,    fonts = list(sans = \"sans\"),   options = list(     opts_hover(css = \"stroke:black; stroke-width:0.8px;\")  # <- slight darkening   ))"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"sample-grouping-with-mds-plot","dir":"Articles","previous_headings":"Introduction > 2. Sequencing data import and QC > 2.2 Basic QC metrics","what":"2.2.1 Sample grouping with MDS plot","title":"macpie: overview","text":"order assess sample grouping, visualise sample similarity based limma’s MDS (MultiDimensional Scaling) function. Samples treated lower concentration compound often cluster close negative (vehicle) control. Hovering individual dots reveals sample identity grouping.","code":"p <- plot_mds(mac, group_by = \"Sample_type\", label = \"combined_id\", n_labels = 30) girafe(ggobj = p, fonts = list(sans = \"sans\"))"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"distribution-of-read-counts","dir":"Articles","previous_headings":"Introduction > 2. Sequencing data import and QC > 2.2 Basic QC metrics","what":"2.2.2 Distribution of read counts","title":"macpie: overview","text":"Visualising distribution read counts across treatments easy way compare effects treatments estimate sample variability. Read count commonly directly proportional number cells.","code":"qc_stats <- compute_qc_metrics(mac, group_by = \"combined_id\", order_by = \"median\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"variability-among-all-replicates","dir":"Articles","previous_headings":"Introduction > 2. Sequencing data import and QC > 2.2 Basic QC metrics","what":"2.2.3 Variability among all replicates","title":"macpie: overview","text":"relation previous plot, want user ability quantify dispersion reads sample replicates. Therefore, provide access several statistical metrics standard deviation (sd_value), z score (z_score), mad (mad_value) IQR (IQR) can used parameter function plot_qc_metrics individually, assessed function plot_qc_metrics_heatmap.  Identifying outliers batch effects, especially untreated samples, especially important downstream analysis. statistical methods quantify variability among sample groups inter-replicate variability please refer vignette Quality control.","code":"plot_qc_metrics_heatmap(qc_stats$stats_summary)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"correction-of-the-batch-effect","dir":"Articles","previous_headings":"Introduction > 2. Sequencing data import and QC > 2.2 Basic QC metrics","what":"2.2.4 Correction of the batch effect","title":"macpie: overview","text":"Several methods available scaling normalizing transcriptomic data, effects clearly visualized using RLE (Relative Log Expression) plots. case, limma_voom provides lowest average coefficient variation, compared methods “raw”, Seurat “SCT” “edgeR”.","code":"# First we will subset the data to look at control, DMSO samples only mac_dmso <- mac %>%   filter(Treatment_1 == \"DMSO\")  # Run the RLE function plot_rle(mac_dmso, label_column = \"Row\", normalisation = \"limma_voom\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"differential-gene-expression","dir":"Articles","previous_headings":"Introduction","what":"3. Differential gene expression","title":"macpie: overview","text":"Key points: use compute_single_de perform differential expression analysis one treatment group vs control use compute_multi_de perform differential expression analyses treatment groups vs control use volcano plot, box plot heatmap show results analyses visualise gene expression levels use enrichr pathway enrichment analysis detailed methods available vignette Transcriptional analyses","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"single-comparison","dir":"Articles","previous_headings":"Introduction > 3. Differential gene expression","what":"3.1. Single comparison","title":"macpie: overview","text":"Similar RNA-seq, quality differential gene expression analysis MAC-seq depends low variability among replicates suitability statistical model. aspects assessed quality control stage workflow. Results differential expression analysis classically visualised volcano plot.  Based results, can quickly check gene expression levels counts per million (CPM) selected genes treatment control samples described .","code":"# First perform the differential expression analysis treatment_samples <- \"Staurosporine_10\" control_samples <- \"DMSO_0\" top_table <- compute_single_de(mac, treatment_samples, control_samples, method = \"limma_voom\")  # Let's visualise the results with a volcano plot plot_volcano(top_table, max.overlaps = 16) genes <- top_table$gene[1:6] group_by <- \"combined_id\" plot_counts(mac, genes, group_by, treatment_samples, control_samples, normalisation = \"cpm\", color_by = \"combined_id\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"pathway-analysis","dir":"Articles","previous_headings":"Introduction > 3. Differential gene expression","what":"3.2. Pathway analysis","title":"macpie: overview","text":"Differential gene expression results individual comparisons treatment vs control usually performed functions package enrichR fgsea. following case, effect Staurosporine breast cancer cells Myc inactivation can observed pathway enrichment analyses.","code":"top_genes <- top_table %>%   filter(p_value_adj < 0.01) %>%   select(gene) %>%   pull()  enriched <- enrichR::enrichr(top_genes, c(\"MSigDB_Hallmark_2020\")) #> Uploading data to Enrichr... Done. #>   Querying MSigDB_Hallmark_2020... Done. #> Parsing results... Done. p1 <- enrichR::plotEnrich(enriched[[1]]) +    macpie_theme(legend_position_ = 'right') +    scale_fill_gradientn(colors = macpie_colours$divergent)  gridExtra::grid.arrange(p1, ncol = 1)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"differential-gene-expression---multiple-comparisons","dir":"Articles","previous_headings":"Introduction > 3. Differential gene expression","what":"3.3. Differential gene expression - multiple comparisons","title":"macpie: overview","text":"Since MAC-seq commonly used high-throughput screening compound libraries, often want compare multiple samples screen vs control. process can easily parallelised. First select vector “treatments” combined_ids contain word “DMSO”. (Warning, due limitations “mclapply”, parallelisation speedup currently works OSX Linux machines, Windows.) often want ask genes differentially expressed one treatment group. , can visualise treatment groups shared differentially expressed genes, defined top 5 DE genes single drug comparison (treatment vs control) found least 2 different treatment groups. heatmap shows shared differentially expressed genes corresponding log2FC values.","code":"# Filter out lower concentrations of compounds and untreated samples treatments <- mac %>%   filter(Concentration_1 == 10) %>%   select(combined_id) %>%   filter(!grepl(\"DMSO\", combined_id)) %>%   pull() %>%   unique() mac <- compute_multi_de(mac, treatments, control_samples = \"DMSO_0\", method = \"limma_voom\", num_cores = 1) plot_multi_de(mac, group_by = \"combined_id\", value = \"log2FC\", p_value_cutoff = 0.01, direction=\"up\", n_genes = 5, control = \"DMSO_0\", by=\"fc\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"pathway-analysis---multiple-comparisons","dir":"Articles","previous_headings":"Introduction > 3. Differential gene expression","what":"3.4. Pathway analysis - multiple comparisons","title":"macpie: overview","text":"pathway enrichment analysis done R package enrichR, can summarised heatmap, visualising direct offtarget effects perturbations.","code":"# Load genesets from enrichr for a specific species or define your own enrichr_genesets <- download_geneset(\"human\", \"MSigDB_Hallmark_2020\") mac <- compute_multi_enrichr(mac, genesets = enrichr_genesets)  enriched_pathways_mat <- mac@tools$pathway_enrichment %>%   bind_rows() %>%   select(combined_id, Term, Combined.Score) %>%   pivot_wider(names_from = combined_id, values_from = Combined.Score) %>%   column_to_rownames(var = \"Term\") %>%   mutate(across(everything(), ~ ifelse(is.na(.), 0, log1p(.)))) %>%  # Replace NA with 0 across all columns   as.matrix()  pheatmap(enriched_pathways_mat, color = macpie_colours$continuous_rev)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"methods-for-compound-screening","dir":"Articles","previous_headings":"Introduction","what":"4. Methods for compound screening","title":"macpie: overview","text":"Key points: use plot_de_umap find compounds behave similarly based proximity UMAP maps use compute_single_dose_response evaluate impact compound concentrations gene expression pathway enrichment use compute_multi_screen_profile find perturbations similar target profile known gene set detailed methods avaailable vignette Compound screening","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"umap-clustering-based-on-de-genes","dir":"Articles","previous_headings":"Introduction > 4. Methods for compound screening","what":"4.1. UMAP clustering based on DE genes","title":"macpie: overview","text":"Instead plotting UMAP individual samples, can also visualise samples UMAP differential gene expression vs control. allows us use batch-corrected data reduce replicate noise, showing grouping treatments.","code":"mac_agg <- aggregate_by_de(mac) mac_agg <- compute_de_umap(mac_agg) mac_agg <- FindNeighbors(mac_agg, reduction = \"umap_de\", dims = 1:2) mac_agg <- FindClusters(mac_agg, resolution = 1.3) #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 27 #> Number of edges: 351 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: -0.0139 #> Number of communities: 18 #> Elapsed time: 0 seconds  cell_coords <- Embeddings(mac_agg, reduction = \"umap_de\") %>%   as.data.frame() %>%   rownames_to_column(\"combined_id\") %>%   left_join(mac_agg@meta.data, by = \"combined_id\")  # Plot with clusters and labels ggplot(cell_coords, aes(x = UMAPde_1, y = UMAPde_2, color = seurat_clusters)) +   geom_point(size = 2) +   geom_text_repel(aes(label = combined_id), size = 3, max.overlaps = 10, force_pull = 1) +   theme_minimal() +   guides(color = guide_legend(title = \"Cluster\")) +   labs(x = \"UMAP 1\", y = \"UMAP 2\", title = \"UMAP with Cell Names\") +   theme(legend.position = \"right\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"similarity-to-a-treatment-profile-or-phenotype","dir":"Articles","previous_headings":"Introduction > 4. Methods for compound screening","what":"4.2. Similarity to a treatment profile or phenotype","title":"macpie: overview","text":"Additionally, performing screen, sometimes want measure similarity either existing profile, user-defined gene-set defines desired phenotype.","code":"mac <- compute_multi_screen_profile(mac, target = \"Staurosporine_10\", num_cores = 1) mac_screen_profile <- mac@tools$screen_profile %>%   mutate(logPadj = c(-log10(padj))) %>%   arrange(desc(NES)) %>%   mutate(target_id = factor(target_id, levels = unique(target_id)))   ggplot(mac_screen_profile, aes(target_id, NES)) +   #geom_point(aes(size = logPadj)) +   geom_point() +   facet_wrap(~pathway, scales = \"free\") +   macpie_theme(x_labels_angle = 90, show_x_title = F)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"estimate-of-dose-response","dir":"Articles","previous_headings":"Introduction > 4. Methods for compound screening","what":"4.3. Estimate of dose-response","title":"macpie: overview","text":"macpie can used calculate dose-response curves individual genes, pathways external measurement cell viability available metadata, based R package drc also available paralelisable format function “compute_multiple_dose_response”.","code":"treatments <- mac %>%   select(combined_id) %>%   filter(!grepl(\"DMSO\", combined_id)) %>%   pull() %>%   unique() mac <- compute_multi_de(mac, treatments, control_samples = \"DMSO_0\", method = \"limma_voom\", num_cores = 1) mac <- compute_multi_enrichr(mac, genesets = enrichr_genesets) res <- compute_single_dose_response(data = mac,   gene = \"SOX12\",   normalisation = \"limma_voom\",   treatment_value = \"Staurosporine\") #>  #> Estimated effective doses #>  #>        Estimate Std. Error    Lower    Upper #> e:1:50  0.14865    0.28684 -0.44335  0.74066 res$plot res <- compute_single_dose_response(data = mac,   pathway = \"Myc Targets V1\",   treatment_value = \"SN01005979\") #>  #> Estimated effective doses #>  #>        Estimate Std. Error Lower Upper #> e:1:50   2.9958    10.0000   NaN   NaN res$plot"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"working-with-chemical-descriptors","dir":"Articles","previous_headings":"Introduction > 4. Methods for compound screening","what":"4.4. Working with chemical descriptors","title":"macpie: overview","text":"macpie provides easy way find smiles compounds names, compute chemical descriptors compounds identify important phenotype. example , number rings structures important targeting estrogen activity.","code":"# Add smiles based on a column with generic names of compounds #(warning, this process requires internet connection and can take a while) mac <- compute_smiles(mac, compound_column = \"Compound_ID\")  # Calculate descriptors mac <- compute_chem_descriptors(mac)  #change column names for joining colnames(mac@tools$chem_descriptors)[1] <- \"combined_id\"  # Join with target variable (e.g. pathway score) model_df <- mac@tools$pathway_enrichment %>%   filter(Term == \"Estrogen Response Early\") %>%   left_join(., mac@meta.data, join_by(combined_id)) %>%   filter(Concentration_1 == 10) %>%   select(Treatment_1, Combined.Score, combined_id) %>%   unique() %>%   left_join(., mac@tools$chem_descriptors, join_by(combined_id)) %>%   select(-combined_id) %>%   drop_na()  # Train random forest rf_model <- randomForest(Combined.Score ~ ., data = model_df, importance = TRUE, na.action = na.omit, ntrees = 500)  # Get importance scores rf_importance <- importance(rf_model, type = 1)  # %IncMSE = predictive power rf_ranked <- sort(rf_importance[, 1], decreasing = TRUE)  # Top 20 important descriptors head(rf_ranked, 20) #>   topoShape      WTPT.5     MDEO.22 nRingBlocks  nAromRings     MDEN.22  #>   2.7680771   2.2364722   1.6972571   1.4258409   1.1249207   1.0010015  #>    khs.ssNH    khs.aasN nAromBlocks     nRings4     nRings7     MDEN.11  #>   0.4018917   0.1164148   0.0000000   0.0000000   0.0000000   0.0000000  #>     MDEN.33     khs.tCH    khs.dsCH      khs.sF    khs.dssS     khs.sCl  #>   0.0000000   0.0000000   0.0000000   0.0000000   0.0000000   0.0000000  #>      WTPT.2   khs.ssCH2  #>  -0.4664402  -0.7927457 #>      WTPT.2     nRings5     MDEC.11     nRings7     MDEO.22     MDEO.11 #> 3.361393653 2.150421361 1.214784237 1.001001503 0.783327367 0.709299485 #>   khs.ssCH2 nSmallRings     MDEN.33     MDEC.14   topoShape      ALogp2 #> 0.474955644 0.366086694 0.115293479 0.085759728 0.077678537 0.007617685 #>     nRings4     MDEN.11    khs.dCH2     khs.tCH     khs.dNH    khs.aaNH #> 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 #>     khs.dsN     khs.aaO #> 0.000000000 0.000000000 varImpPlot(rf_model, n.var = 20, main = \"Top 20 Random Forest Features\", type = 2)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_bioc.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"macpie: Working with Bioconductor classes","text":"vignette demonstrates use macpie Bioconductor-native containers: Read raw data SingleCellExperiment (SCE) class SummarizedExperiment (SE) class Perform Bioconductor-native normalization (scuttle::logNormCounts) Convert SCE Seurat object via sce_to_seurat() Run minimal macpie functions vignette: VlnPlot() filter_genes_by_expression() plot_plate_layout() Full workflow macpie functions shown main macpie vignette.","code":"suppressPackageStartupMessages({   library(macpie)   library(Seurat)   library(SingleCellExperiment)   library(SummarizedExperiment)   library(Matrix)   library(scuttle)   # Bioconductor-native normalization   library(dplyr)   library(tibble)   library(DropletUtils) })"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_bioc.html","id":"metadata-import","dir":"Articles","previous_headings":"Overview","what":"1. Metadata import","title":"macpie: Working with Bioconductor classes","text":"Metadata imported using read_metadata(), visualized using plot_metadata_heatmap() like main vignette.","code":"# Load metadata project_metadata <- system.file(\"extdata/PMMSq033_metadata.csv\", package = \"macpie\")  # Load metadata metadata <- read_metadata(project_metadata) plot_metadata_heatmap(metadata)"},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_bioc.html","id":"create-a-singlecellexperiment-object","dir":"Articles","previous_headings":"Overview > 2. Sequencing data import","what":"2.1 Create a SingleCellExperiment object","title":"macpie: Working with Bioconductor classes","text":"First, load raw data SingleCellExperiment (SCE) object, add metadata normalize data using scuttle::logNormCounts().","code":"project_rawdata <- paste0(dir, \"/macpieData/PMMSq033/raw_matrix\") sce <- read10xCounts(project_rawdata, col.names = TRUE,                      row.names = \"symbol\")  # use gene symbols # add metadata sce <- SingleCellExperiment(assays = list(counts = counts(sce))) # with match barcodes colData(sce) <- DataFrame(metadata[match(colnames(sce), metadata$Barcode), ])   # normalize (adds 'logcounts' assay) sce <- scuttle::logNormCounts(sce)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_bioc.html","id":"convert-sce-to-seurat-object","dir":"Articles","previous_headings":"Overview > 2. Sequencing data import","what":"2.2 Convert SCE to Seurat object","title":"macpie: Working with Bioconductor classes","text":"default, sce_to_seurat() uses “counts” assay raw counts “logcounts” assay normalized data. can change parameters SCE object different assay names. function also requires name column colData contains cell IDs (barcodes). also address issues gene names (e.g., underscores) ensure compatibility Seurat.","code":"to_seurat <- sce_to_seurat(sce,                            counts = \"counts\",                           log_counts = \"logcounts\",                           assay = \"RNA\",                           cell_id_col = \"Barcode\",                           project_name = \"PMMSq033\") to_seurat  #> # A Seurat-tibble abstraction: 384 × 22 #> # Features=62700 | Cells=384 | Active assay=RNA | Assays=RNA #>    .cell      orig.ident nCount_RNA nFeature_RNA Plate_ID Well_ID Row   Column #>    <chr>      <fct>           <dbl>        <int> <chr>    <chr>   <chr>  <int> #>  1 AACAAGGTAC PMMSq033          440          348 PMMSq033 A01     A          1 #>  2 AACAATCAGG PMMSq033         6189         3173 PMMSq033 B01     B          1 #>  3 AACACCTAGT PMMSq033          831          590 PMMSq033 A02     A          2 #>  4 AACAGGCAAT PMMSq033         8001         3094 PMMSq033 B02     B          2 #>  5 AACATGGAGA PMMSq033         6998         3307 PMMSq033 C01     C          1 #>  6 AACATTACCG PMMSq033         3494         2004 PMMSq033 D01     D          1 #>  7 AACCAGCCAG PMMSq033        69775        12721 PMMSq033 C02     C          2 #>  8 AACCAGTTGA PMMSq033        52440        11345 PMMSq033 D02     D          2 #>  9 AACCGCGACT PMMSq033         5726         2866 PMMSq033 E01     E          1 #> 10 AACCGGAAGG PMMSq033           63           57 PMMSq033 F01     F          1 #> # ℹ 374 more rows #> # ℹ 14 more variables: Species <chr>, Cell_type <chr>, Model_type <chr>, #> #   Time <fct>, Unit <chr>, Treatment_1 <chr>, Concentration_1 <fct>, #> #   Unit_1 <chr>, Sample_type <chr>, Barcode <chr>, Project <chr>, #> #   Compound_ID <chr>, smiles <chr>, sizeFactor <dbl>"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_bioc.html","id":"sanity-check","dir":"Articles","previous_headings":"Overview > 2. Sequencing data import","what":"2.3 Sanity check","title":"macpie: Working with Bioconductor classes","text":"check conversion successful data Seurat object matches original SCE object. number wells, well barcodes match. Additionally, gene names Seurat object match SCE object.","code":"stopifnot(ncol(to_seurat) == ncol(sce)) stopifnot(all(colnames(to_seurat) == sce$Barcode)) stopifnot(all(rownames(to_seurat@assays$RNA$counts) == rownames(to_seurat@assays$RNA$data)))"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_bioc.html","id":"basic-quality-control-and-filtering","dir":"Articles","previous_headings":"Overview","what":"3. Basic quality control and filtering","title":"macpie: Working with Bioconductor classes","text":"Now, can use basic macpie functions quality control filtering.","code":"to_seurat <- to_seurat %>%   mutate(combined_id = str_c(Treatment_1, Concentration_1, sep = \"_\")) %>%   mutate(combined_id = gsub(\" \", \"\", .data$combined_id)) %>%   mutate(combined_id = make.names(combined_id))   # Filter by read count per sample group to_seurat <- filter_genes_by_expression(to_seurat,                                   group_by = \"combined_id\",                                   min_counts = 5,                                   min_samples = 1)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_bioc.html","id":"visualize-qc-metrics","dir":"Articles","previous_headings":"Overview > 3. Basic quality control and filtering","what":"3.1 Visualize QC metrics","title":"macpie: Working with Bioconductor classes","text":"expect see violin plots using Seurat object main vigette.","code":"to_seurat[[\"percent.mt\"]] <- PercentageFeatureSet(to_seurat, pattern = \"^mt-|^MT-\") to_seurat[[\"percent.ribo\"]] <- PercentageFeatureSet(to_seurat, pattern = \"^Rp[slp][[:digit:]]|^Rpsa|^RP[SLP][[:digit:]]|^RPSA\")  # Example of a function from Seurat quality control  VlnPlot(to_seurat, features = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent.mt\", \"percent.ribo\"),          ncol = 4, group.by = \"Sample_type\") &    scale_fill_manual(values = macpie_colours$discrete)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_bioc.html","id":"subset-data-for-a-specific-project-and-visualize-plate-layout","dir":"Articles","previous_headings":"Overview > 3. Basic quality control and filtering","what":"3.2 Subset data for a specific project and visualize plate layout","title":"macpie: Working with Bioconductor classes","text":"subset data include cells “Current” project visualize plate layout using plot_plate_layout(). interactive plot allows us hover wells see detailed information. plot identical one generated using Seurat object main vignette.","code":"unique(to_seurat$Project) #> [1] \"Trial\"   \"Current\" to_seurat <- to_seurat %>%   filter(Project == \"Current\")  # Interactive QC plot plate layout (all metadata columns can be used): p <- plot_plate_layout(to_seurat, \"nCount_RNA\", \"combined_id\") girafe(ggobj = p,    fonts = list(sans = \"sans\"),   options = list(     opts_hover(css = \"stroke:black; stroke-width:0.8px;\")  # <- slight darkening   ))"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_bioc.html","id":"summary","dir":"Articles","previous_headings":"Overview","what":"4. Summary","title":"macpie: Working with Bioconductor classes","text":"vignette, demonstrated work Bioconductor-native classes using macpie. covered following steps: Importing metadata visualizing . Creating SingleCellExperiment object raw data, adding metadata, normalizing data. Converting SingleCellExperiment object Seurat object using sce_to_seurat(). Performing basic quality control filtering using macpie functions, including visualizing QC metrics plotting plate layout.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/quality_control.html","id":"metadata-import-and-validation","dir":"Articles","previous_headings":"","what":"1. Metadata import and validation","title":"Quality control","text":"part macpie package, provide set functions import validate metadata. metadata file contain information samples, including sample names, experimental conditions, relevant variables. metadata file tabular format, can contain information relevant user, least contain columns Plate_ID, Well_ID, Row, Column, Species, Sample_type, Treatment_1, Concentration_1 Barcode. Key points: use validate_metadata check metadata file common errors use plot_metadata_heatmap visually inspect metadata integrity","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/quality_control.html","id":"metadata-input","dir":"Articles","previous_headings":"1. Metadata import and validation","what":"1.1 Metadata input","title":"Quality control","text":"","code":"#install.packages(\"macpie\")  # or devtools::install_github(\"PMCC-BioinformaticsCore/macpie\") library(macpie)  # Define project variables project_name <- \"PMMSq033\" project_metadata <- system.file(\"extdata/PMMSq033_metadata.csv\", package = \"macpie\") # Load metadata metadata <- read_metadata(project_metadata) #metadata <- read_metadata(project_metadata)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/quality_control.html","id":"check-column-names","dir":"Articles","previous_headings":"1. Metadata import and validation","what":"1.2 Check column names","title":"Quality control","text":"","code":"colnames(metadata) #>  [1] \"Plate_ID\"        \"Well_ID\"         \"Row\"             \"Column\"          #>  [5] \"Species\"         \"Cell_type\"       \"Model_type\"      \"Time\"            #>  [9] \"Unit\"            \"Treatment_1\"     \"Concentration_1\" \"Unit_1\"          #> [13] \"Sample_type\"     \"Barcode\"         \"Project\"         \"Compound_ID\"     #> [17] \"smiles\""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/quality_control.html","id":"validate-metadata","dir":"Articles","previous_headings":"1. Metadata import and validation","what":"1.3 Validate metadata","title":"Quality control","text":"validate_metadata function check metadata file common errors, missing values, incorrect data types, potential issues. also provide summary metadata file, including number samples, number variables, number missing values.","code":"# Validate metadata validate_metadata(metadata) #>  #> Validation Issues: #> smiles: Contains special characters. #>  #> smiles: Contains special characters. #> Model_type: Contains special characters. #> Compound_ID: Contains special characters. #>  #> Generating summary table grouped by Plate_ID... #>   Plate_ID count_Species count_Cell_type count_Model_type count_Time count_Unit #> 1 PMMSq033             1               3                3          1          1 #>   count_Treatment_1 count_Concentration_1 count_Unit_1 count_Sample_type #> 1                36                     4            1                 3"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/quality_control.html","id":"visualize-metadata","dir":"Articles","previous_headings":"1. Metadata import and validation","what":"1.4 Visualize metadata","title":"Quality control","text":"order correct artefacts metadata errors, good practice visually inspect large number experimental variables. case multiple plates, can specify plate visualise, though example one present.","code":"plot_metadata_heatmap(metadata, plate = \"PMMSq033\")"},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/quality_control.html","id":"import-data-to-tidyseurat-object","dir":"Articles","previous_headings":"2. Quality control","what":"2.1 Import data to tidySeurat object","title":"Quality control","text":"Data access full dataset (>10 MB .rds files) currently restricted release become publicly available upon publication (Zenodo). meantime, please contact us early access. Data imported tidySeurat object, allows usage regular Seurat functions, well functionality tidyverse. case multiple plates, instead one directory submit vector directories (named directories, names become barcode prefixes) Read10X function. example, can use common QC plots Seurat package visualise number genes, reads, percentage mitochondrial ribosomal genes per sample. Similar single-cell experiments, higher amounts mitochondrial ribosomal expression can point reduced quality samples.  addition, can use tidyverse functions explore dataset. example, let’s subset Seurat object based column “Project” metadata visualise grouping data plate vs MDS plot. Plate layout plots useful visualising spatial anomalies unexpected patterns.","code":"# Import raw data #project_rawdata <- \"/home/rstudio/macpie/macpieData/PMMSq033/raw_matrix/\" #raw_counts <- Read10X(data.dir = project_rawdata)  # 1. Load your own gene counts per sample or 2. data from the publication project_rawdata <- paste0(dir, \"/macpieData/PMMSq033/raw_matrix\") project_name <- \"PMMSq033\" raw_counts <- Read10X(data.dir = project_rawdata)   #for multiple plates: #raw_counts <- Read10X(data.dir = c(\"path1\", \"path2\", ... \"pathN\"))  # Create tidySeurat object mac <- CreateSeuratObject(counts = raw_counts,                           project = project_name,                           min.cells = 1,                           min.features = 1) #> Warning: Feature names cannot have underscores ('_'), replacing with dashes #> ('-')  # Join with metadata mac <- mac %>%   inner_join(metadata, by = c(\".cell\" = \"Barcode\"))  # Add unique identifier mac <- mac %>%   mutate(combined_id = str_c(Treatment_1, Concentration_1, sep = \"_\")) %>%   mutate(combined_id = gsub(\" \", \"\", .data$combined_id))  # Filter by read count per sample group mac <- filter_genes_by_expression(mac,                                    group_by = \"combined_id\",                                    min_counts = 10,                                    min_samples = 2) # Calculate percent of mitochondrial and ribosomal genes mac[[\"percent.mt\"]] <- PercentageFeatureSet(mac, pattern = \"^mt-|^MT-\") mac[[\"percent.ribo\"]] <- PercentageFeatureSet(mac, pattern = \"^Rp[slp][[:digit:]]|^Rpsa|^RP[SLP][[:digit:]]|^RPSA\")  # Example of a function from Seurat QC  VlnPlot(mac, features = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent.mt\", \"percent.ribo\"),          ncol = 4, group.by = \"Sample_type\") &    scale_fill_manual(values = macpie_colours$discrete)  #> Warning: Default search for \"data\" layer in \"RNA\" assay yielded no results; #> utilizing \"counts\" layer instead. #> Warning: The `slot` argument of `FetchData()` is deprecated as of SeuratObject 5.0.0. #> ℹ Please use the `layer` argument instead. #> ℹ The deprecated feature was likely used in the Seurat package. #>   Please report the issue at <https://github.com/satijalab/seurat/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> Warning: `PackageCheck()` was deprecated in SeuratObject 5.0.0. #> ℹ Please use `rlang::check_installed()` instead. #> ℹ The deprecated feature was likely used in the Seurat package. #>   Please report the issue at <https://github.com/satijalab/seurat/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. unique(mac$Project) #> [1] \"Trial\"   \"Current\" mac <- mac %>%   filter(Project == \"Current\")  # QC plot plate layout (all metadata columns can be used): p <- plot_plate_layout(mac, \"nCount_RNA\", \"combined_id\") girafe(ggobj = p,    fonts = list(sans = \"sans\"),   options = list(     opts_hover(css = \"stroke:black; stroke-width:0.8px;\")  # <- slight darkening   ))"},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/quality_control.html","id":"sample-grouping-with-mds-plot","dir":"Articles","previous_headings":"2. Quality control > 2.2 Basic QC metrics","what":"2.2.1 Sample grouping with MDS plot","title":"Quality control","text":"first step, visualise grouping samples based top 500 expressed genes limma’s MDS function. warning, samples treated lower concentration compound often cluster close negative (vehicle) control. Hovering individual dots reveals sample identity grouping.","code":"p <- plot_mds(mac, group_by = \"Sample_type\", label = \"combined_id\", n_labels = 30) #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. girafe(ggobj = p, fonts = list(sans = \"sans\")) #> Warning: ggrepel: 5 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/quality_control.html","id":"sample-grouping-with-umap-plot","dir":"Articles","previous_headings":"2. Quality control > 2.2 Basic QC metrics","what":"2.2.2 Sample grouping with UMAP plot","title":"Quality control","text":"Since operating standard Seurat object, can also use standard scRNA-seq workflow.","code":"mac_sct <- SCTransform(mac, verbose = FALSE) %>%   RunPCA(verbose = FALSE) %>%   RunUMAP(dims = 1:30, verbose = FALSE)  # For standard Seurat approach use: # DimPlot(mac_sct, reduction = \"umap\", group.by = \"Sample_type\", cols = macpie_colours$discrete)  umap_data <- cbind(Embeddings(mac_sct, \"umap\"), mac_sct@meta.data) %>%   tibble::as_tibble(rownames = \"cell\") %>%   mutate(     tooltip = combined_id   )  # Merge with metadata using Barcode == cell p <- ggplot(umap_data, aes(x = umap_1, y = umap_2)) +   geom_point_interactive(aes(color = Sample_type, tooltip = tooltip), size = 2) +   scale_color_manual(values = macpie_colours$discrete) +   theme_minimal() girafe(ggobj = p, fonts = list(sans = \"sans\"))"},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/quality_control.html","id":"distribution-of-read-counts","dir":"Articles","previous_headings":"2. Quality control > 2.2 Basic QC metrics","what":"2.3.1 Distribution of read counts","title":"Quality control","text":"order perform downstream analysis, ensure addressed technical variability batch effects correctly. start distribution reads across experiment. end use box plot show distribution read counts grouped across treatments.","code":"qc_stats <- compute_qc_metrics(mac, group_by = \"combined_id\", order_by = \"median\") qc_stats$stats_summary #> # A tibble: 83 × 6 #>    combined_id    sd_value mad_value group_median z_score   IQR #>    <chr>             <dbl>     <dbl>        <dbl>   <dbl> <dbl> #>  1 DMSO_0            3260.     3312.       43646    0.659 4788. #>  2 Media_0           2947.     3175.       43178.   0.557 4830. #>  3 Paclitaxel_0.1    6114.      752.       33167   -1.63  5417  #>  4 Paclitaxel_1      6606.     6050.       35783   -1.06  6462. #>  5 Paclitaxel_10     5727.     5161.       30791   -2.15  5595  #>  6 SN01004236_0.1    2394.      595.       41474    0.184 2166  #>  7 SN01004236_1      3291.     1245.       45383    1.04  3036. #>  8 SN01004236_10     4649.     6150.       41983    0.295 4640. #>  9 SN01004272_0.1     987.      145.       41420    0.172  878  #> 10 SN01004272_1      3020.     2302.       38839   -0.392 2916  #> # ℹ 73 more rows"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/quality_control.html","id":"variability-among-all-replicates","dir":"Articles","previous_headings":"2. Quality control > 2.2 Basic QC metrics","what":"2.3.2 Variability among all replicates","title":"Quality control","text":"relation previous plot, want user ability assess dispersion reads within sample. Therefore, enabled access several statistical metrics standard deviation (sd_value), robust z score (z_score), mad (mad_value) IQR (IQR) can used parameter function plot_qc_metrics individually, assessed function plot_qc_metrics_heatmap. Standard deviation (sd_value) interquartile range (IQR) capture spread read counts within single treatment condition. Use want understand consistently reads cluster around mean median one group. Median absolute deviation (mad_value) robust z‐score (z_score) highlight variability treatment conditions. make easy spot conditions whose overall read distributions deviate rest plate. can see , Staurosporine largest variability samples across metrics.","code":"plot_qc_metrics_heatmap(qc_stats$stats_summary)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/quality_control.html","id":"variability-within-a-sample","dir":"Articles","previous_headings":"2. Quality control > 2.2 Basic QC metrics","what":"2.3.3 Variability within a sample","title":"Quality control","text":"Due lower read counts per sample, MAC-seq variable RNA-seq. therefore fairly important estimate bioogical variability replicates. provide way estimate inter-replicate variability using poisson distance within function plot_distance.","code":"plot_distance(mac, \"combined_id\", treatment = \"DMSO_0\") #> tidyseurat says: A data frame is returned for independent data analysis."},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/quality_control.html","id":"evaluating-the-influecne-of-batch-effects-and-normalizations","dir":"Articles","previous_headings":"2. Quality control > 2.2 Basic QC metrics","what":"2.3.4 Evaluating the influecne of batch effects and normalizations","title":"Quality control","text":"Several methods available scaling normalizing transcriptomic data, effects clearly visualized using RLE (Relative Log Expression) plots. case, limma_voom provides lowest average coefficient variation, compared methods “raw”, Seurat “SCT” “edgeR”. User can provide vector batches length data - see example .","code":"# First we will subset the data to look at control, DMSO samples only mac_dmso <- mac %>%   filter(Treatment_1 == \"DMSO\")  # Run the RLE function for raw data plot_rle(mac_dmso, label_column = \"Row\", normalisation = \"raw\") #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. # Run the RLE function for normalised data plot_rle(mac_dmso, label_column = \"Row\", normalisation = \"limma_voom\") #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. # For multiple plates, once can add a vector with batch factors #plot_rle(mac_dmso, label_column = \"Row\", normalisation = \"limma_voom\", batch = mac_dmso$Plate_ID)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/transcriptional_analyses.html","id":"data-import","dir":"Articles","previous_headings":"","what":"1. Data import","title":"Transcriptional analyses","text":"Data access full dataset (>10 MB .rds files) currently restricted release become publicly available upon publication (Zenodo). meantime, please contact us early access. Data imported tidySeurat object, allows usage regular Seurat functions, well functionality tidyverse. samples spread across multiple plates, users can submit vector directories (named directories, names become barcode prefixes) instead one directory Read10X function.","code":"#install.packages(\"macpie\")  # or devtools::install_github(\"PMCC-BioinformaticsCore/macpie\")   library(macpie) suppressPackageStartupMessages(   library(enrichR) ) library(pheatmap)  # Define project variables project_name <- \"PMMSq033\" project_metadata <- system.file(\"extdata/PMMSq033_metadata.csv\", package = \"macpie\") # Load metadata metadata <- read_metadata(project_metadata)   # 1. Load your own gene counts per sample or 2. data from the publication project_rawdata <- paste0(dir, \"/macpieData/PMMSq033/raw_matrix\")  project_name <- \"PMMSq033\" raw_counts <- Read10X(data.dir = project_rawdata)  # Create tidySeurat object mac <- CreateSeuratObject(counts = raw_counts,                           project = project_name,                           min.cells = 1,                           min.features = 1)  # Join with metadata mac <- mac %>%   inner_join(metadata, by = c(\".cell\" = \"Barcode\"))  # Add unique identifier mac <- mac %>%   mutate(combined_id = str_c(Treatment_1, Concentration_1, sep = \"_\")) %>%   mutate(combined_id = gsub(\" \", \"\", .data$combined_id))  # Filter by read count per sample group mac <- filter_genes_by_expression(mac,                                    group_by = \"combined_id\",                                    min_counts = 10,                                    min_samples = 2) # Subset the working dataset mac <- mac %>%   filter(Project == \"Current\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/transcriptional_analyses.html","id":"single-comparison","dir":"Articles","previous_headings":"","what":"2. Single comparison","title":"Transcriptional analyses","text":"Similar scRNA-seq data, MAC-seq gene expression counts excess zero counts compared bulk RNA-seq. Statistical models assuming Poisson negative binomial distribution may fit data distribution well. Additionally, replicates can quite variable due large number potential latent effect high-throughput screening, assessed QC process. One way assess quality normalization methods average coefficient variation across samples.   Normalised data evaluation normalizations methods (plotMA etc) can extracted : Similarly, influence DE methods volcano plots can easily assessed.  Based results, can quickly check gene expression levels counts per million (CPM) selected genes treatment control samples described .  plotting functions also “summarise” version provides collapsed versions results table format.","code":"# First we will subset the data to look at control, DMSO samples only mac_dmso <- mac %>%   filter(Treatment_1 == \"DMSO\")  # Run the RLE function to compare data normalisations plot_rle(mac_dmso, label_column = \"Row\", normalisation = \"edgeR\") #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. plot_rle(mac_dmso, label_column = \"Row\", normalisation = \"limma_voom\") #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. # For multiple plates, once can add a vector with batch factors, for example # plot_rle(mac_dmso, label_column = \"Row\", normalisation = \"limma_voom\", batch = mac_dmso$Plate_ID) normalised_counts <- compute_normalised_counts(mac_dmso, method = \"SCT\", 1) # First perform the differential expression analysis treatment_samples <- \"Staurosporine_10\" control_samples <- \"DMSO_0\" top_table <- compute_single_de(mac, treatment_samples, control_samples, method = \"limma_voom\")  top_table_2 <- compute_single_de(mac, treatment_samples, control_samples, method = \"edgeR\") # Let's visualise the results with a volcano plot p1 <- plot_volcano(top_table, max.overlaps = 18) + ggtitle(\"limma_voom\") p2 <- plot_volcano(top_table_2, max.overlaps = 18) + ggtitle(\"edgeR\") p1+p2 #> Warning: ggrepel: 853 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps #> Warning: ggrepel: 384 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps genes <- top_table$gene[1:6] group_by <- \"combined_id\" plot_counts(mac,genes, group_by, treatment_samples, control_samples, normalisation = \"cpm\", color_by = \"combined_id\") #> Normalizing layer: counts print(summarise_de(top_table, lfc_threshold = 1, padj_threshold = 0.01), width = Inf) #> # A tibble: 1 × 6 #>   Total_genes_tested Significantly_upregulated Significantly_downregulated #>                <int>                     <int>                       <int> #> 1               5660                       128                         234 #>   Total_significant Padj_threshold Log2FC_threshold #>               <int>          <dbl>            <dbl> #> 1               362           0.01                1"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/transcriptional_analyses.html","id":"pathway-analysis","dir":"Articles","previous_headings":"","what":"3.2. Pathway analysis","title":"Transcriptional analyses","text":"Differential gene expression results individual comparisons treatment vs control macpie performed enrichR, access number curated gene sets available enrichR::listEnrichrDbs(). following case, effect Staurosporine breast cancer cells Myc inactivation can observed pathway enrichment analyses.  using “MSigDB_Hallmark_2020” standard, check data “DisGeNET”, see MCF7 (breast cancer cell line) samples correctly enriched breast cancer profiles.","code":"top_genes <- top_table %>%   filter(p_value_adj < 0.01) %>%   select(gene) %>%   pull()  enriched <- enrichR::enrichr(top_genes, c(\"MSigDB_Hallmark_2020\",\"DisGeNET\",                                  \"RNA-Seq_Disease_Gene_and_Drug_Signatures_from_GEO\")) #> Uploading data to Enrichr... Done. #>   Querying MSigDB_Hallmark_2020... Done. #>   Querying DisGeNET... Done. #>   Querying RNA-Seq_Disease_Gene_and_Drug_Signatures_from_GEO... Done. #> Parsing results... Done. p1 <- enrichR::plotEnrich(enriched[[1]]) +    macpie_theme(legend_position_ = 'right') +    scale_fill_gradientn(colors = macpie_colours$divergent) #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale.  gridExtra::grid.arrange(p1, ncol = 1) p1 <- enrichR::plotEnrich(enriched[[2]]) +    macpie_theme(legend_position_ = 'right') +    scale_fill_gradientn(colors = macpie_colours$divergent) #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. gridExtra::grid.arrange(p1, ncol = 1)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/transcriptional_analyses.html","id":"differential-gene-expression---multiple-comparisons","dir":"Articles","previous_headings":"","what":"3.3. Differential gene expression - multiple comparisons","title":"Transcriptional analyses","text":"Since MAC-seq commonly used high-throughput screening compound libraries, often want compare multiple samples screen vs control. process can easily parallelised. First select vector “treatments” combined_ids contain word “DMSO”. (Warning, due limitations “mclapply”, parallelisation speedup currently works OSX Linux machines, Windows.) want see individual genes expressed across treatment groups, can use two approaches. First, can visualise expression specific list genes heatmap.  Second, can visualise shared differentially expressed (DE) genes, defined top 5 DE genes single drug comparison (treatment vs control) found least 2 different treatment groups. heatmap represents log2FC values DE genes.  prefer see expression level replicate level, can specify logCPM = “lcpm”. Since observing log CPM individual samples, comparisons, can also visualise DMSO control.  outputs analyses can represented table format.","code":"mac$combined_id <- make.names(mac$combined_id)  treatments <- mac %>%   filter(Concentration_1 == 10) %>%   select(combined_id) %>%   filter(!grepl(\"DMSO\", combined_id)) %>%   pull() %>%   unique() #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. mac <- compute_multi_de(mac, treatments, control_samples = \"DMSO_0\", method = \"limma_voom\", num_cores = 1) plot_multi_de(mac, group_by = \"combined_id\", value = \"log2FC\", p_value_cutoff = 0.01, direction=\"up\", control = \"DMSO_0\", by=\"fc\", gene_list = head(top_genes, 10)) plot_multi_de(mac, group_by = \"combined_id\", value = \"log2FC\", p_value_cutoff = 0.01, direction=\"up\", n_genes = 5, control = \"DMSO_0\", by=\"fc\") plot_multi_de(mac, group_by = \"combined_id\", value = \"lcpm\", p_value_cutoff = 0.01, direction=\"up\", n_genes = 5, control = \"DMSO_0\", by=\"fc\") summarise_de(mac, lfc_threshold = 1, padj_threshold = 0.01, multi=TRUE) #> # A tibble: 27 × 7 #>    combined_id  Total_genes_tested Significantly_upregu…¹ Significantly_downre…² #>    <chr>                     <int>                  <int>                  <int> #>  1 Paclitaxel_…               5660                    629                     91 #>  2 SN01004236_…               5660                      0                      0 #>  3 SN01004272_…               5660                      1                      0 #>  4 SN01004569_…               5660                    257                     49 #>  5 SN01004614_…               5660                    220                     36 #>  6 SN01004734_…               5660                      0                      0 #>  7 SN01005060_…               5660                     13                      4 #>  8 SN01005979_…               5660                    936                    853 #>  9 SN01731107_…               5660                      4                      3 #> 10 SN01731137_…               5660                    148                     69 #> # ℹ 17 more rows #> # ℹ abbreviated names: ¹​Significantly_upregulated, ²​Significantly_downregulated #> # ℹ 3 more variables: Total_significant <int>, padj_threshold <dbl>, #> #   Log2FC_threshold <dbl>"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/transcriptional_analyses.html","id":"pathway-analysis---multiple-comparisons","dir":"Articles","previous_headings":"","what":"3.4. Pathway analysis - multiple comparisons","title":"Transcriptional analyses","text":"Pathway enrichment analysis can also performed across treatments, summarised heatmap.  Quick check treatments: Nutlin.3a MDM2-P53 inhibitor stablises p53 protein. induces cell autophagy apotopsis. Nutlin-activated p53 induces G1 G2 arrest cancer cell lines (see pathway enrichment heatmap). Ref: Tovar C, et al. Proc Natl Acad Sci USA. 2006;103(6):1888–1893. Shows Nutlin-3’s effect various p53 targets cancer cell lines.","code":"# Load genesets from enrichr for a specific species or define your own enrichr_genesets <- download_geneset(\"human\", \"MSigDB_Hallmark_2020\") mac <- compute_multi_enrichr(mac, genesets = enrichr_genesets)  enriched_pathways_mat <- mac@tools$pathway_enrichment %>%   bind_rows() %>%   select(combined_id, Term, Combined.Score) %>%   pivot_wider(names_from = combined_id, values_from = Combined.Score) %>%   column_to_rownames(var = \"Term\") %>%   mutate(across(everything(), ~ ifelse(is.na(.), 0, log1p(.)))) %>%  # Replace NA with 0 across all columns   as.matrix()   pheatmap(enriched_pathways_mat, color = macpie_colours$continuous_rev)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nenad Bartonicek. Author, maintainer. Xin Liu. Author. Laura Twomey. Author. Michelle Meier. Author. Richard Lupat. Author. Stuart Craig. Author. David Yoannidis. Author. Jason Li. Author. Tim Semple. Author. Kaylene J Simpson. Author. Mark X Li. Author. Susanne Ramm. Author.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bartonicek N, Liu X, Twomey L, Meier M, Lupat R, Craig S, Yoannidis D, Li J, Semple T, Simpson K, Li M, Ramm S (2025). macpie: Scalable workflow high-throughput transcriptomic profiling. R package version 1.0.0, https://github.com/PMCC-BioinformaticsCore/macpie.git.","code":"@Manual{,   title = {macpie: Scalable workflow for high-throughput transcriptomic profiling},   author = {Nenad Bartonicek and Xin Liu and Laura Twomey and Michelle Meier and Richard Lupat and Stuart Craig and David Yoannidis and Jason Li and Tim Semple and Kaylene J Simpson and Mark X Li and Susanne Ramm},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/PMCC-BioinformaticsCore/macpie.git}, }"},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Scalable workflow for high-throughput transcriptomic profiling","text":"macpie R toolkit designed researchers, originally MAC-seq data mind, validated general High-Throughput Transcriptomics (HTTr) data applications. primary aim deliver latest tools quality control (QC), visualization, analysis. processing raw sequencing data count matrices, please refer companion Nextflow workflow:dinoflow: Nextflow workflow MAC-seq","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Scalable workflow for high-throughput transcriptomic profiling","text":"Full documentation step--step tutorials available :macpie documentation site","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/index.html","id":"example-data","dir":"","previous_headings":"Documentation","what":"Example Data","title":"Scalable workflow for high-throughput transcriptomic profiling","text":"provide full subset datasets testing exploration: Full example dataset hosted Zenodo:https://doi.org/10.5281/zenodo.15778812 Quick-start subset mini_mac bundled package can loaded directly R:","code":"data(\"mini_mac\", package = \"macpie\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/index.html","id":"requirements","dir":"","previous_headings":"","what":"Requirements","title":"Scalable workflow for high-throughput transcriptomic profiling","text":"R ≥ 4.3.3 package developed R 4.3.3, installation (including dependencies) tested latest R 4.5.0.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/index.html","id":"installation-and-dependencies","dir":"","previous_headings":"Requirements","what":"Installation and dependencies","title":"Scalable workflow for high-throughput transcriptomic profiling","text":"required R packages automatically installed: via pak::pkg_install devtools::install_github use pre-built Docker image ready--use environment.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/index.html","id":"installing-locally","dir":"","previous_headings":"Requirements > Installation and dependencies","what":"Installing locally","title":"Scalable workflow for high-throughput transcriptomic profiling","text":"install development version macpie, recommend using pak - fast package installer install directly GitHub. Make sure pak package installed first.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/index.html","id":"configure-your-own-github-pat-optional","dir":"","previous_headings":"Requirements > Installation and dependencies > Installing locally","what":"Configure your own GitHub PAT (optional)","title":"Scalable workflow for high-throughput transcriptomic profiling","text":"pak uses GitHub API resolve versions fetch metadata—unauthenticated requests limited 60 per hour. avoid rate-limit errors, can add Personal Access Token (PAT): Optially, can also install package ","code":"# install gitcreds if you haven’t already install.packages(\"gitcreds\")  # this will prompt you to paste in your PAT gitcreds::gitcreds_set() # 1. Install pak (fast installer) if (!requireNamespace(\"pak\", quietly=TRUE)) {   install.packages(\"pak\") }  # 2. Make sure Bioconductor repos are set if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") } options(repos = BiocManager::repositories())  # 3. Re-install macpie + exactly its Depends & Imports via pak pak::pkg_install(   \"PMCC-BioinformaticsCore/macpie\",   dependencies = c(\"Depends\", \"Imports\") )  # 4. Verify # Should load without error: library(macpie) # First, install devtools if not already installed install.packages(\"devtools\")  # Make sure BiocManager is installed, and point your repos at both CRAN + Bioconductor if (!requireNamespace(\"BiocManager\", quietly=TRUE))   install.packages(\"BiocManager\")  options(repos = BiocManager::repositories())  BiocManager::install(c(   \"edgeR\", \"limma\", \"Biobase\", \"DESeq2\", \"RUVSeq\",   \"EDASeq\", \"fgsea\", \"scran\", \"glmGamPoi\",   \"BiocParallel\", \"SingleCellExperiment\", \"zinbwave\",   \"SummarizedExperiment\" ))   # Install MOFA2 from its GitHub (it’s not on Bioconductor) devtools::install_github(\"bioFAM/MOFA2\")  # Finally, install macpie itself devtools::install_github(\"PMCC-BioinformaticsCore/macpie\", dependencies = TRUE)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/index.html","id":"using-docker-image","dir":"","previous_headings":"Requirements > Installation and dependencies","what":"Using Docker image","title":"Scalable workflow for high-throughput transcriptomic profiling","text":"docker desktop running, open terminal, paste docker pull command install, depending platform. Pull Docker image Run Docker container Replace /path///macpie/ absolute path local repo. Copy paste http://localhost:8787 browser Username: rstudio Password: password (one set docker run command) logging , ’ll find local directory mounted :","code":"docker pull --platform linux/amd64 xliu81/macpie:v1.0.0 docker run --rm -ti \\   -e PASSWORD=password \\   -p 8787:8787 \\   --platform linux/amd64 \\   -v /path/to/your/macpie/:/home/rstudio/macpie:z\\   xliu81/macpie:v1.0.0 /home/rstudio/macpie/"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Scalable workflow for high-throughput transcriptomic profiling","text":"show using mini_mac dataset quick start. vignette website, include couple functions quick start.","code":"library(macpie)  # load mini_mac,  # mini_mac is a tidySeurat object with matched metadata data(\"mini_mac\")  # Quality control # Filter by counts per sample group mini_mac <- filter_genes_by_expression(mini_mac,                                   group_by = \"combined_id\",                                   min_counts = 5,                                   min_samples = 3)    # MDS plot p <- plot_mds(mini_mac, group_by = \"Sample_type\", label = \"combined_id\", n_labels = 30) girafe(ggobj = p, fonts = list(sans = \"sans\"))   # Correction of the batch effect # First we will subset the data to look at control, DMSO samples only mini_mac_dmso <- mini_mac %>%   filter(Treatment_1 == \"DMSO\")  # Run the RLE function plot_rle(mini_mac_dmso, label_column = \"Row\", normalisation = \"limma_voom\")   # Transcriptional analysis # Single comparison # First perform the differential expression analysis treatment_samples <- \"Staurosporine_10\" control_samples <- \"DMSO_0\" top_table <- compute_single_de(mini_mac, treatment_samples, control_samples, method = \"limma_voom\")  top_genes <- top_table %>%   filter(p_value_adj < 0.1) %>%   select(gene) %>%   pull()  # A volcano plot with very small number of genes, as it's a subset of the full dataset  plot_volcano(top_table, max.overlaps = 16)  # Multiple comparisons # Filter out lower concentrations of compounds and untreated samples treatments <- mini_mac %>%   filter(Concentration_1 == 10) %>%   select(combined_id) %>%   filter(!grepl(\"DMSO\", combined_id)) %>%   pull() %>%   unique() mini_mac <- compute_multi_de(mini_mac, treatments, control_samples = \"DMSO_0\", method = \"limma_voom\", num_cores = 1)  # plot shared differentially expressed genes plot_multi_de(mini_mac, group_by = \"combined_id\", value = \"log2FC\", p_value_cutoff = 0.01, direction=\"up\", n_genes = 5, control = \"DMSO_0\", by=\"fc\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Scalable workflow for high-throughput transcriptomic profiling","text":"","code":"citation(\"macpie\") #> To cite the macpie package in publications, please use: #> #>  Bartonicek N, Liu X, Twomey L, Meier M, Lupat R, Craig S, Yoannidis D, Li J, Semple T, #>  Simpson K, Li M, Ramm S (2025). “macpie: a scalable workflow for high-throughput #>  transcriptomic profiling.” bioRxiv. doi:10.1101/2025.08.06.669002 #> #> A BibTeX entry for LaTeX users is #> #>  @Article{, #>    title   = {macpie: a scalable workflow for high-throughput transcriptomic profiling}, #>    author  = {Nenad Bartonicek and Xin Liu and Laura Twomey and Michelle Meier and Richard Lupat and Stuart Craig and David Yoannidis and Jason Li and Tim Semple and Kaylene J Simpson and Mark X Li and Susanne Ramm}, #>    journal = {bioRxiv}, #>    year    = {2025}, #>    doi     = {10.1101/2025.08.06.669002}, #>    url     = {https://www.biorxiv.org/content/10.1101/2025.08.06.669002v1} #>  }"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/aggregate_by_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse Replicates by Differential Expression — aggregate_by_de","title":"Collapse Replicates by Differential Expression — aggregate_by_de","text":"function collapses replicate samples tidyseurat object based differential expression (DE) results. returns new tidyseurat object 'DE' assay containing aggregated values.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/aggregate_by_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse Replicates by Differential Expression — aggregate_by_de","text":"","code":"aggregate_by_de(data, metric_col = \"metric\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/aggregate_by_de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse Replicates by Differential Expression — aggregate_by_de","text":"data tidyseurat object DE results metric_col character string indicating column name DE dataframe use aggregation. Defaults \"metric\".","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/aggregate_by_de.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse Replicates by Differential Expression — aggregate_by_de","text":"new tidyseurat object collapsed metadata","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/aggregate_by_de.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Collapse Replicates by Differential Expression — aggregate_by_de","text":"function performs following steps: Converts list DE comparisons gene--condition matrix. Aggregates metadata across replicates combined_id. Creates new Seurat object matrix \"DE\" assay","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/aggregate_by_de.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse Replicates by Differential Expression — aggregate_by_de","text":"","code":"data(mini_mac) mac_collapsed <- aggregate_by_de(mini_mac)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/check_zeroinflation.html","id":null,"dir":"Reference","previous_headings":"","what":"Quick group-aware zero-inflation check (Negative Binomial baseline via edgeR) — check_zeroinflation","title":"Quick group-aware zero-inflation check (Negative Binomial baseline via edgeR) — check_zeroinflation","text":"Computes sample group-aware Zero-Inflation (ZI) index gene using negative-binomial (NB) baseline fitted edgeR. group (e.g., drug condition), function: estimates gene-wise tagwise dispersions edgeR (using selected groups), builds NB-expected zero probabilities TMMwsp-scaled means, returns per-gene ZI (observed zeros minus NB-expected zeros) per-group summaries (e.g., % genes ZI > 0.05). ZI-cutoffs user-defined. intended fast screening diagnostic decide whether standard NB GLM methods (edgeR/DESeq2) adequate whether zero-aware workflow (e.g., ZINB-WaVE) might warranted. function relies edgeR estimate dispersion. current implementation requires ≥2 groups design edgeR can stabilize gene-wise dispersions across groups. single group still want design-aware baseline expected zeros, fit Gamma–Poisson/NB GLM compute expected zero probabilities fitted means -dispersion.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/check_zeroinflation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quick group-aware zero-inflation check (Negative Binomial baseline via edgeR) — check_zeroinflation","text":"","code":"check_zeroinflation(   data = NULL,   group_by = NULL,   samples = NULL,   batch = 1,   cutoffs = c(0.1, 0.2) )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/check_zeroinflation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quick group-aware zero-inflation check (Negative Binomial baseline via edgeR) — check_zeroinflation","text":"data Seurat object. group_by Character, column data@meta.data defines groups (default: \"combined_id\"). samples Character vector group labels/patterns include. NULL none match, groups group_by used. batch Optional batch indicator; length 1, intercept-free design used group dummies. cutoffs Numeric vector user-supply ZI thresholds summary statistics","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/check_zeroinflation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quick group-aware zero-inflation check (Negative Binomial baseline via edgeR) — check_zeroinflation","text":"list : gene_metrics_by_group: long data frame (group × gene) p0_obs, p0_nb, ZI, counts. summary_by_group: one row per group medians % ZI thresholds, plus observed/expected zero counts group.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/check_zeroinflation.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Quick group-aware zero-inflation check (Negative Binomial baseline via edgeR) — check_zeroinflation","text":"screening tool; replacement fitting full GLM actual design. strong covariates exist, GLM baseline (e.g., glmGamPoi::glm_gp) yield faithful expected-zero rates. single-group experiments, consider either adding reference group switching GLM-based baseline require multiple groups.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/check_zeroinflation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quick group-aware zero-inflation check (Negative Binomial baseline via edgeR) — check_zeroinflation","text":"","code":"data(mini_mac) check_zeroinflation(mini_mac, group_by = \"combined_id\",                      samples = c(\"DMSO_0\",\"Staurosporine_10\")) #> $gene_metrics_by_group #>                  group            gene mean_count_group dispersion p0_obs #> NAMPT           DMSO_0           NAMPT           8.3158  0.0076845  0.000 #> ENSG00000278869 DMSO_0 ENSG00000278869           0.0000  0.0000977  1.000 #> CABP7-DT        DMSO_0        CABP7-DT           0.0000  0.0000977  1.000 #> NBEAP4          DMSO_0          NBEAP4           0.0000  0.0000977  1.000 #> FMO2            DMSO_0            FMO2           0.0000  0.0000977  1.000 #> NDUFA4P2        DMSO_0        NDUFA4P2           0.0000  0.0000977  1.000 #> DPY19L4P2       DMSO_0       DPY19L4P2           0.0000  0.0000977  1.000 #> ENSG00000286114 DMSO_0 ENSG00000286114           0.0000  0.0000977  1.000 #> ENSG00000265935 DMSO_0 ENSG00000265935           0.0000  0.0000977  1.000 #> Y-RNA           DMSO_0           Y-RNA           0.0000  0.0000977  1.000 #> FAM201B         DMSO_0         FAM201B           0.0000  0.0000977  1.000 #> ENSG00000243018 DMSO_0 ENSG00000243018           0.0000  0.0000977  1.000 #> TRBC1           DMSO_0           TRBC1           0.0526  0.0000977  0.947 #> FAM20C          DMSO_0          FAM20C           5.1053  0.0067377  0.000 #> ENSG00000251536 DMSO_0 ENSG00000251536           0.0000  0.0000977  1.000 #> CLDN18          DMSO_0          CLDN18           0.0000  0.0000977  1.000 #> ENSG00000259688 DMSO_0 ENSG00000259688           0.0000  0.0000977  1.000 #> RBM7P1          DMSO_0          RBM7P1           0.0000  0.0000977  1.000 #> UBE2HP1         DMSO_0         UBE2HP1           0.0000  0.0000977  1.000 #> ENSG00000258419 DMSO_0 ENSG00000258419           0.0000  0.0000977  1.000 #> ENSG00000231698 DMSO_0 ENSG00000231698           0.0000  0.0000977  1.000 #> NF1P5           DMSO_0           NF1P5           0.0000  0.0000977  1.000 #> PTPN20          DMSO_0          PTPN20           0.0000  0.0000977  1.000 #> ENSG00000280048 DMSO_0 ENSG00000280048           0.0000  0.0000977  1.000 #> AHCY            DMSO_0            AHCY           5.1053  0.0075781  0.000 #> CCDC127         DMSO_0         CCDC127           7.7368  0.0077213  0.000 #> FSHR            DMSO_0            FSHR           0.0000  0.0000977  1.000 #> TRIM64C         DMSO_0         TRIM64C           0.0000  0.0000977  1.000 #> ENSG00000285971 DMSO_0 ENSG00000285971           0.0000  0.0000977  1.000 #> ENSG00000217239 DMSO_0 ENSG00000217239           0.6842  0.0000977  0.421 #> ENSG00000236366 DMSO_0 ENSG00000236366           0.0000  0.0000977  1.000 #> ENSG00000286853 DMSO_0 ENSG00000286853           0.0000  0.0000977  1.000 #> RN7SL270P       DMSO_0       RN7SL270P           0.0000  0.0000977  1.000 #> CYCSP41         DMSO_0         CYCSP41           0.0000  0.0000977  1.000 #> MIR150          DMSO_0          MIR150           0.0000  0.0000977  1.000 #> ENSG00000289359 DMSO_0 ENSG00000289359           0.0000  0.0000977  1.000 #> Metazoa-SRP     DMSO_0     Metazoa-SRP           0.0000  0.0000977  1.000 #> ENSG00000284620 DMSO_0 ENSG00000284620           0.0000  0.0000977  1.000 #> Y-RNA.1         DMSO_0         Y-RNA.1           0.0000  0.0000977  1.000 #> CNN2P9          DMSO_0          CNN2P9           0.0000  0.0000977  1.000 #> ENSG00000273375 DMSO_0 ENSG00000273375           0.0526  0.0000977  0.947 #> ENSG00000287871 DMSO_0 ENSG00000287871           0.0000  0.0000977  1.000 #> LINC02862       DMSO_0       LINC02862           0.0000  0.0000977  1.000 #> MIR556          DMSO_0          MIR556           0.0000  0.0000977  1.000 #> ENSG00000235609 DMSO_0 ENSG00000235609           0.7368  0.0000977  0.632 #> MBD2            DMSO_0            MBD2           6.7368  0.0077760  0.000 #> HIGD1AP6        DMSO_0        HIGD1AP6           0.0000  0.0000977  1.000 #> ENSG00000276958 DMSO_0 ENSG00000276958           0.0000  0.0000977  1.000 #> ENSG00000275295 DMSO_0 ENSG00000275295           0.0000  0.0000977  1.000 #> ENSG00000285454 DMSO_0 ENSG00000285454           0.0000  0.0000977  1.000 #> C10orf71-AS1    DMSO_0    C10orf71-AS1           0.0000  0.0000977  1.000 #> ENSG00000256001 DMSO_0 ENSG00000256001           0.0000  0.0000977  1.000 #> ENSG00000279294 DMSO_0 ENSG00000279294           0.0000  0.0000977  1.000 #> IFNWP5          DMSO_0          IFNWP5           0.0000  0.0000977  1.000 #> MAN1C1          DMSO_0          MAN1C1           0.0526  0.0000977  0.947 #> RN7SL211P       DMSO_0       RN7SL211P           0.0000  0.0000977  1.000 #> GNRHR2P1        DMSO_0        GNRHR2P1           0.0000  0.0000977  1.000 #> ENSG00000273904 DMSO_0 ENSG00000273904           0.0000  0.0000977  1.000 #> ENSG00000241593 DMSO_0 ENSG00000241593           0.0000  0.0000977  1.000 #> WDR31           DMSO_0           WDR31           0.4211  0.0000977  0.684 #> DRD5            DMSO_0            DRD5           0.0000  0.0000977  1.000 #> ENSG00000256569 DMSO_0 ENSG00000256569           0.0000  0.0000977  1.000 #> EPHX1           DMSO_0           EPHX1           6.2105  0.0077643  0.000 #> ACTN1           DMSO_0           ACTN1           3.4737  0.0051444  0.000 #> MIR5188         DMSO_0         MIR5188           0.0000  0.0000977  1.000 #> RNU6-118P       DMSO_0       RNU6-118P           0.0000  0.0000977  1.000 #> ENSG00000271758 DMSO_0 ENSG00000271758           0.0000  0.0000977  1.000 #> ZNF84-DT        DMSO_0        ZNF84-DT           0.0000  0.0000977  1.000 #> ENSG00000248733 DMSO_0 ENSG00000248733           0.0000  0.0000977  1.000 #> ACTL7A          DMSO_0          ACTL7A           0.0000  0.0000977  1.000 #> GID4            DMSO_0            GID4           3.1053  0.0023841  0.000 #> Y-RNA.2         DMSO_0         Y-RNA.2           0.0000  0.0000977  1.000 #> MIR200C         DMSO_0         MIR200C           0.0000  0.0000977  1.000 #> ENSG00000224644 DMSO_0 ENSG00000224644           0.0000  0.0000977  1.000 #> CSTA            DMSO_0            CSTA           4.4737  0.0071847  0.000 #> MIR664A         DMSO_0         MIR664A           0.0000  0.0000977  1.000 #> MIR4802         DMSO_0         MIR4802           0.0000  0.0000977  1.000 #> ENSG00000278655 DMSO_0 ENSG00000278655           0.0000  0.0000977  1.000 #> ENSG00000280122 DMSO_0 ENSG00000280122           0.0000  0.0000977  1.000 #> ENSG00000254180 DMSO_0 ENSG00000254180           0.0000  0.0000977  1.000 #> RNU6-896P       DMSO_0       RNU6-896P           0.0000  0.0000977  1.000 #> ENSG00000286805 DMSO_0 ENSG00000286805           0.0000  0.0000977  1.000 #> SHANK1          DMSO_0          SHANK1           0.0000  0.0000977  1.000 #> ENSG00000291048 DMSO_0 ENSG00000291048           0.0000  0.0000977  1.000 #> RN7SL268P       DMSO_0       RN7SL268P           0.0000  0.0000977  1.000 #> NLGN2           DMSO_0           NLGN2           0.5263  0.0000977  0.579 #> DMC1            DMSO_0            DMC1           0.2632  0.0000977  0.737 #> KCNAB1-AS1      DMSO_0      KCNAB1-AS1           0.0000  0.0000977  1.000 #> ENSG00000276015 DMSO_0 ENSG00000276015           0.0000  0.0000977  1.000 #> WWTR1-IT1       DMSO_0       WWTR1-IT1           0.0000  0.0000977  1.000 #> ENSG00000260465 DMSO_0 ENSG00000260465           0.0000  0.0000977  1.000 #> RPL5P30         DMSO_0         RPL5P30           0.1053  0.0000977  0.895 #> ENSG00000270988 DMSO_0 ENSG00000270988           0.0000  0.0000977  1.000 #> MIR545          DMSO_0          MIR545           0.0000  0.0000977  1.000 #> ENSG00000257548 DMSO_0 ENSG00000257548           0.0000  0.0000977  1.000 #> ENSG00000289950 DMSO_0 ENSG00000289950           0.0000  0.0000977  1.000 #> ENSG00000262413 DMSO_0 ENSG00000262413           0.1579  0.0000977  0.842 #> ENSG00000249890 DMSO_0 ENSG00000249890           0.0000  0.0000977  1.000 #> RN7SL255P       DMSO_0       RN7SL255P           0.0000  0.0000977  1.000 #> TRIM53CP        DMSO_0        TRIM53CP           0.0000  0.0000977  1.000 #> RNA5SP107       DMSO_0       RNA5SP107           0.0000  0.0000977  1.000 #> RNU6-845P       DMSO_0       RNU6-845P           0.0000  0.0000977  1.000 #> ENSG00000241114 DMSO_0 ENSG00000241114           0.0000  0.0000977  1.000 #> SERBP1P2        DMSO_0        SERBP1P2           0.0000  0.0000977  1.000 #> RPS10-NUDT3     DMSO_0     RPS10-NUDT3           0.0526  0.0000977  0.947 #> CDY12P          DMSO_0          CDY12P           0.0000  0.0000977  1.000 #> MIR4644         DMSO_0         MIR4644           0.0000  0.0000977  1.000 #> ENSG00000223343 DMSO_0 ENSG00000223343           0.0000  0.0000977  1.000 #> MORF4L1P3       DMSO_0       MORF4L1P3           0.0000  0.0000977  1.000 #> MRGPRX3         DMSO_0         MRGPRX3           0.8947  0.0000977  0.316 #> CD160           DMSO_0           CD160           0.0000  0.0000977  1.000 #>                 obs_zeros_num    p0_nb expected_zeros_num        ZI #> NAMPT                       0 0.000564             0.0107 -0.000564 #> ENSG00000278869            19 1.000000            19.0000  0.000000 #> CABP7-DT                   19 1.000000            19.0000  0.000000 #> NBEAP4                     19 1.000000            19.0000  0.000000 #> FMO2                       19 1.000000            19.0000  0.000000 #> NDUFA4P2                   19 1.000000            19.0000  0.000000 #> DPY19L4P2                  19 1.000000            19.0000  0.000000 #> ENSG00000286114            19 1.000000            19.0000  0.000000 #> ENSG00000265935            19 1.000000            19.0000  0.000000 #> Y-RNA                      19 1.000000            19.0000  0.000000 #> FAM201B                    19 1.000000            19.0000  0.000000 #> ENSG00000243018            19 1.000000            19.0000  0.000000 #> TRBC1                      18 0.948760            18.0264 -0.001392 #> FAM20C                      0 0.008519             0.1619 -0.008519 #> ENSG00000251536            19 1.000000            19.0000  0.000000 #> CLDN18                     19 1.000000            19.0000  0.000000 #> ENSG00000259688            19 1.000000            19.0000  0.000000 #> RBM7P1                     19 1.000000            19.0000  0.000000 #> UBE2HP1                    19 1.000000            19.0000  0.000000 #> ENSG00000258419            19 1.000000            19.0000  0.000000 #> ENSG00000231698            19 1.000000            19.0000  0.000000 #> NF1P5                      19 1.000000            19.0000  0.000000 #> PTPN20                     19 1.000000            19.0000  0.000000 #> ENSG00000280048            19 1.000000            19.0000  0.000000 #> AHCY                        0 0.008594             0.1633 -0.008594 #> CCDC127                     0 0.000913             0.0173 -0.000913 #> FSHR                       19 1.000000            19.0000  0.000000 #> TRIM64C                    19 1.000000            19.0000  0.000000 #> ENSG00000285971            19 1.000000            19.0000  0.000000 #> ENSG00000217239             8 0.507246             9.6377 -0.086193 #> ENSG00000236366            19 1.000000            19.0000  0.000000 #> ENSG00000286853            19 1.000000            19.0000  0.000000 #> RN7SL270P                  19 1.000000            19.0000  0.000000 #> CYCSP41                    19 1.000000            19.0000  0.000000 #> MIR150                     19 1.000000            19.0000  0.000000 #> ENSG00000289359            19 1.000000            19.0000  0.000000 #> Metazoa-SRP                19 1.000000            19.0000  0.000000 #> ENSG00000284620            19 1.000000            19.0000  0.000000 #> Y-RNA.1                    19 1.000000            19.0000  0.000000 #> CNN2P9                     19 1.000000            19.0000  0.000000 #> ENSG00000273375            18 0.948760            18.0264 -0.001392 #> ENSG00000287871            19 1.000000            19.0000  0.000000 #> LINC02862                  19 1.000000            19.0000  0.000000 #> MIR556                     19 1.000000            19.0000  0.000000 #> ENSG00000235609            12 0.481655             9.1514  0.149924 #> MBD2                        0 0.002116             0.0402 -0.002116 #> HIGD1AP6                   19 1.000000            19.0000  0.000000 #> ENSG00000276958            19 1.000000            19.0000  0.000000 #> ENSG00000275295            19 1.000000            19.0000  0.000000 #> ENSG00000285454            19 1.000000            19.0000  0.000000 #> C10orf71-AS1               19 1.000000            19.0000  0.000000 #> ENSG00000256001            19 1.000000            19.0000  0.000000 #> ENSG00000279294            19 1.000000            19.0000  0.000000 #> IFNWP5                     19 1.000000            19.0000  0.000000 #> MAN1C1                     18 0.948760            18.0264 -0.001392 #> RN7SL211P                  19 1.000000            19.0000  0.000000 #> GNRHR2P1                   19 1.000000            19.0000  0.000000 #> ENSG00000273904            19 1.000000            19.0000  0.000000 #> ENSG00000241593            19 1.000000            19.0000  0.000000 #> WDR31                      13 0.657719            12.4967  0.026492 #> DRD5                       19 1.000000            19.0000  0.000000 #> ENSG00000256569            19 1.000000            19.0000  0.000000 #> EPHX1                       0 0.003312             0.0629 -0.003312 #> ACTN1                       0 0.036295             0.6896 -0.036295 #> MIR5188                    19 1.000000            19.0000  0.000000 #> RNU6-118P                  19 1.000000            19.0000  0.000000 #> ENSG00000271758            19 1.000000            19.0000  0.000000 #> ZNF84-DT                   19 1.000000            19.0000  0.000000 #> ENSG00000248733            19 1.000000            19.0000  0.000000 #> ACTL7A                     19 1.000000            19.0000  0.000000 #> GID4                        0 0.050308             0.9559 -0.050308 #> Y-RNA.2                    19 1.000000            19.0000  0.000000 #> MIR200C                    19 1.000000            19.0000  0.000000 #> ENSG00000224644            19 1.000000            19.0000  0.000000 #> CSTA                        0 0.014942             0.2839 -0.014942 #> MIR664A                    19 1.000000            19.0000  0.000000 #> MIR4802                    19 1.000000            19.0000  0.000000 #> ENSG00000278655            19 1.000000            19.0000  0.000000 #> ENSG00000280122            19 1.000000            19.0000  0.000000 #> ENSG00000254180            19 1.000000            19.0000  0.000000 #> RNU6-896P                  19 1.000000            19.0000  0.000000 #> ENSG00000286805            19 1.000000            19.0000  0.000000 #> SHANK1                     19 1.000000            19.0000  0.000000 #> ENSG00000291048            19 1.000000            19.0000  0.000000 #> RN7SL268P                  19 1.000000            19.0000  0.000000 #> NLGN2                      11 0.592692            11.2611 -0.013745 #> DMC1                       14 0.769245            14.6157 -0.032403 #> KCNAB1-AS1                 19 1.000000            19.0000  0.000000 #> ENSG00000276015            19 1.000000            19.0000  0.000000 #> WWTR1-IT1                  19 1.000000            19.0000  0.000000 #> ENSG00000260465            19 1.000000            19.0000  0.000000 #> RPL5P30                    17 0.900205            17.1039 -0.005468 #> ENSG00000270988            19 1.000000            19.0000  0.000000 #> MIR545                     19 1.000000            19.0000  0.000000 #> ENSG00000257548            19 1.000000            19.0000  0.000000 #> ENSG00000289950            19 1.000000            19.0000  0.000000 #> ENSG00000262413            16 0.854190            16.2296 -0.012085 #> ENSG00000249890            19 1.000000            19.0000  0.000000 #> RN7SL255P                  19 1.000000            19.0000  0.000000 #> TRIM53CP                   19 1.000000            19.0000  0.000000 #> RNA5SP107                  19 1.000000            19.0000  0.000000 #> RNU6-845P                  19 1.000000            19.0000  0.000000 #> ENSG00000241114            19 1.000000            19.0000  0.000000 #> SERBP1P2                   19 1.000000            19.0000  0.000000 #> RPS10-NUDT3                18 0.948760            18.0264 -0.001392 #> CDY12P                     19 1.000000            19.0000  0.000000 #> MIR4644                    19 1.000000            19.0000  0.000000 #> ENSG00000223343            19 1.000000            19.0000  0.000000 #> MORF4L1P3                  19 1.000000            19.0000  0.000000 #> MRGPRX3                     6 0.412527             7.8380 -0.096737 #> CD160                      19 1.000000            19.0000  0.000000 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 889 rows ] #>  #> $summary_by_group #>                             group n_genes n_wells mean_p0_obs mean_p0_nb #> DMSO_0                     DMSO_0     500      19       0.819      0.820 #> Staurosporine_10 Staurosporine_10     500       3       0.888      0.872 #>                    mean_ZI observed_zeros_num expected_zeros_num pct_ZI_gt_0.1 #> DMSO_0           -0.000968               7780               7789         0.004 #> Staurosporine_10  0.016115               1332               1308         0.080 #>                  pct_ZI_gt_0.2 #> DMSO_0                   0.000 #> Staurosporine_10         0.052 #>"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_chem_descriptors.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute chemical descriptors from SMILES — compute_chem_descriptors","title":"Compute chemical descriptors from SMILES — compute_chem_descriptors","text":"function parses SMILES strings computes chemical descriptors using rcdk. stores cleaned, non-redundant descriptors tools$chem_descriptors.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_chem_descriptors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute chemical descriptors from SMILES — compute_chem_descriptors","text":"","code":"compute_chem_descriptors(   data,   compound_column = NULL,   treatment_ids = NULL,   r_squared = 0.6,   descriptors = NULL )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_chem_descriptors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute chemical descriptors from SMILES — compute_chem_descriptors","text":"data tidyseurat object smiles column. compound_column Column metadata compound identifiers, default combined_ids treatment_ids list unique sample identifiers, default combined_ids r_squared R squared value, default 0.6 descriptors Specify subset descriptors interest rcdk","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_chem_descriptors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute chemical descriptors from SMILES — compute_chem_descriptors","text":"tidyseurat object new entry tools$chem_descriptors.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_chem_descriptors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute chemical descriptors from SMILES — compute_chem_descriptors","text":"","code":"# \\donttest{ mock_data <- tibble::tibble(   Treatment = c(\"Aspirin\", \"Caffeine\", \"NonExistentCompound_123\") ) result <- compute_smiles(mock_data, compound_column = \"Treatment\" ) data <- compute_chem_descriptors(result,     compound_column = \"Treatment\",     treatment_ids = mock_data$Treatment,     descriptors = \"org.openscience.cdk.qsar.descriptors.molecular.FractionalCSP3Descriptor\") # }"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_de_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare DE-based umap — compute_de_umap","title":"Prepare DE-based umap — compute_de_umap","text":"Prepare DE-based umap","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_de_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare DE-based umap — compute_de_umap","text":"","code":"compute_de_umap(data = NULL)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_de_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare DE-based umap — compute_de_umap","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\".","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_de_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare DE-based umap — compute_de_umap","text":"tidyseurat object umap_de data frame slot tools","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_de_umap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare DE-based umap — compute_de_umap","text":"","code":"data(mini_mac) mini_mac <- compute_de_umap(mini_mac) #> Found more than one class \"dist\" in cache; using the first, from namespace 'spam' #> Also defined by ‘BiocGenerics’"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_hyper_enrich_bg.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate enrichment of DE genes in a gene set Compute one‐sided hypergeometric p-values, z-scores, and combined scores for a list of differentially expressed genes (deg) against each entry in a list of gene sets (genesets). Internal function — compute_hyper_enrich_bg","title":"Calculate enrichment of DE genes in a gene set Compute one‐sided hypergeometric p-values, z-scores, and combined scores for a list of differentially expressed genes (deg) against each entry in a list of gene sets (genesets). Internal function — compute_hyper_enrich_bg","text":"Calculate enrichment DE genes gene set Compute one‐sided hypergeometric p-values, z-scores, combined scores list differentially expressed genes (deg) entry list gene sets (genesets). Internal function","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_hyper_enrich_bg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate enrichment of DE genes in a gene set Compute one‐sided hypergeometric p-values, z-scores, and combined scores for a list of differentially expressed genes (deg) against each entry in a list of gene sets (genesets). Internal function — compute_hyper_enrich_bg","text":"","code":"compute_hyper_enrich_bg(deg = NULL, genesets = NULL, background = \"human\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_hyper_enrich_bg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate enrichment of DE genes in a gene set Compute one‐sided hypergeometric p-values, z-scores, and combined scores for a list of differentially expressed genes (deg) against each entry in a list of gene sets (genesets). Internal function — compute_hyper_enrich_bg","text":"deg vector differentially expressed genes genesets list genes per pathway enrichr background integer character (\"human\", \"mouse\", \"geneset\").  \"human\", uses approximate universe 20 000 genes; \"mouse\", 22 000; \"geneset\", total unique genes genesets.  may also supply custom integer (n) equal exact size tested universe.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_hyper_enrich_bg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate enrichment of DE genes in a gene set Compute one‐sided hypergeometric p-values, z-scores, and combined scores for a list of differentially expressed genes (deg) against each entry in a list of gene sets (genesets). Internal function — compute_hyper_enrich_bg","text":"enrichment stats","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_hyper_enrich_bg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate enrichment of DE genes in a gene set Compute one‐sided hypergeometric p-values, z-scores, and combined scores for a list of differentially expressed genes (deg) against each entry in a list of gene sets (genesets). Internal function — compute_hyper_enrich_bg","text":"","code":"data(mini_mac) treatment_samples=\"Staurosporine_0.1\" control_samples<-\"DMSO_0\" top_table <- compute_single_de(mini_mac, treatment_samples, control_samples, method = \"limma_voom\") top_genes <- top_table$gene[top_table$p_value_adj<0.01] data(genesets) results <- compute_hyper_enrich_bg(top_genes, genesets) head(results) #>                                        Term Overlap P.value Adjusted.P.value #> Androgen Response         Androgen Response   1/100  0.0199           0.0394 #> IL-2/STAT5 Signaling   IL-2/STAT5 Signaling   1/199  0.0392           0.0394 #> Apical Junction             Apical Junction   1/200  0.0394           0.0394 #> Xenobiotic Metabolism Xenobiotic Metabolism   1/200  0.0394           0.0394 #>                       Genes Combined.Score #> Androgen Response     ACTN1           27.2 #> IL-2/STAT5 Signaling   AHCY           15.6 #> Apical Junction       ACTN1           15.5 #> Xenobiotic Metabolism  AHCY           15.5"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform DE of multiple samples in a screen vs control — compute_multi_de","title":"Perform DE of multiple samples in a screen vs control — compute_multi_de","text":"Perform DE multiple samples screen vs control","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform DE of multiple samples in a screen vs control — compute_multi_de","text":"","code":"compute_multi_de(   data = NULL,   treatment_samples = NULL,   control_samples = NULL,   method = \"edgeR\",   num_cores = 2,   batch = 1,   k = 2,   spikes = NULL )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform DE of multiple samples in a screen vs control — compute_multi_de","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\" treatment_samples Value column \"combined_id\" representing replicates treatment samples data control_samples Value column \"combined_id\"  representing replicates control samples data method One \"Seurat_wilcox\", \"DESeq2\", \"edgeR\", \"RUVg\", \"RUVs\", \"RUVr\", \"limma_voom\" num_cores Number cores batch Either empty, single value, vector corresponding number samples k Parameter k RUVSeq methods, check RUVSeq tutorial spikes List genes use spike controls","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_de.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform DE of multiple samples in a screen vs control — compute_multi_de","text":"List DE counts vs control","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_de.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform DE of multiple samples in a screen vs control — compute_multi_de","text":"","code":"data(\"mini_mac\") control_samples <- \"DMSO_0\" mini_mac$combined_id<-make.names(mini_mac$combined_id) treatment_samples <- c(\"Staurosporine_10\", \"Paclitaxel_10\",  \"Chlorambucil_10\", \"Vinblastine_sulfate_10\", \"Etoposide_10\" ,  \"Cytarabine_10\", \"Camptothecin_10\", \"Anastrozole_10\",  \"Sb590885_10\", \"Fluvastatin_sodium_10\") mini_mac_test<-compute_multi_de(mini_mac, treatment_samples,  control_samples, num_cores = 1, method = \"edgeR\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_enrichr.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform enrichR-style analysis on a screen — compute_multi_enrichr","title":"Perform enrichR-style analysis on a screen — compute_multi_enrichr","text":"Perform enrichR-style analysis screen","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_enrichr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform enrichR-style analysis on a screen — compute_multi_enrichr","text":"","code":"compute_multi_enrichr(   data,   genesets = NULL,   species = NULL,   direction = \"both\",   p_value_cutoff = 0.01,   n_distinct = 10 )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_enrichr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform enrichR-style analysis on a screen — compute_multi_enrichr","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\". genesets Named list genes species One \"human\", \"mouse\", \"fly\", \"yeast\", \"worm\" \"fish\" direction Direction differentially expressed genes, one \"\", \"\", \"\" (default). p_value_cutoff Cutoff adjusted p-value (column p_value_adj), default 0.01 n_distinct Minimum number genes geneset, default 5","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_enrichr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform enrichR-style analysis on a screen — compute_multi_enrichr","text":"tidyseurat object appended pathway_enrichment dataframe slot tools","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_enrichr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform enrichR-style analysis on a screen — compute_multi_enrichr","text":"","code":"data(mini_mac) data(genesets) compute_multi_enrichr(mini_mac, genesets = genesets) #> # A Seurat-tibble abstraction: 308 × 21 #> # Features=500 | Cells=308 | Active assay=RNA | Assays=RNA #>    .cell      orig.ident   nCount_RNA nFeature_RNA Plate_ID Well_ID Row   Column #>    <chr>      <fct>             <dbl>        <int> <chr>    <chr>   <chr>  <int> #>  1 AACAGGCAAT PMMSq033_mi…         65           29 PMMSq033 B02     B          2 #>  2 AACCAGCCAG PMMSq033_mi…        522           97 PMMSq033 C02     C          2 #>  3 AACCAGTTGA PMMSq033_mi…        415           82 PMMSq033 D02     D          2 #>  4 AACCGGCGTA PMMSq033_mi…        578           93 PMMSq033 E02     E          2 #>  5 AACCTAGTCC PMMSq033_mi…        286           72 PMMSq033 F02     F          2 #>  6 AACTCTACAC PMMSq033_mi…        515           96 PMMSq033 G02     G          2 #>  7 AACTGTGTCA PMMSq033_mi…        408           87 PMMSq033 H02     H          2 #>  8 AAGATGTCCA PMMSq033_mi…        332           78 PMMSq033 I02     I          2 #>  9 AAGCATATGG PMMSq033_mi…        498           92 PMMSq033 J02     J          2 #> 10 AAGCTCACCT PMMSq033_mi…        539          102 PMMSq033 K02     K          2 #> # ℹ 298 more rows #> # ℹ 13 more variables: Species <chr>, Cell_type <chr>, Model_type <chr>, #> #   Time <fct>, Unit <chr>, Treatment_1 <chr>, Concentration_1 <fct>, #> #   Unit_1 <chr>, Sample_type <chr>, Project <chr>, combined_id <chr>, #> #   percent.mt <dbl>, percent.ribo <dbl>"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_screen_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Find similarities between expression profiles with fgsea. Mitochondrial/ribosomal genes are filtered from the analysis — compute_multi_screen_profile","title":"Find similarities between expression profiles with fgsea. Mitochondrial/ribosomal genes are filtered from the analysis — compute_multi_screen_profile","text":"Find similarities expression profiles fgsea. Mitochondrial/ribosomal genes filtered analysis","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_screen_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find similarities between expression profiles with fgsea. Mitochondrial/ribosomal genes are filtered from the analysis — compute_multi_screen_profile","text":"","code":"compute_multi_screen_profile(   data = NULL,   target = NULL,   geneset = NULL,   n_genes_profile = 200,   direction = \"both\",   minSize = 15,   maxSize = 500,   num_cores = 1 )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_screen_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find similarities between expression profiles with fgsea. Mitochondrial/ribosomal genes are filtered from the analysis — compute_multi_screen_profile","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\". target Value target expression profile data (target) others compared . geneset List genes whose enrichment expression profiles evaluated. n_genes_profile Number genes take target profile ranked list, default 200. direction Direction expression DE genes target profile: one \"\", \"\" \"\", default \"\". minSize Minimum size gene sets consider (default 15). maxSize Maximum size gene sets consider (default 500). num_cores Number cores use parallel processing.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_screen_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find similarities between expression profiles with fgsea. Mitochondrial/ribosomal genes are filtered from the analysis — compute_multi_screen_profile","text":"tidyseurat object screen_profile data frame slot tools.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_screen_profile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find similarities between expression profiles with fgsea. Mitochondrial/ribosomal genes are filtered from the analysis — compute_multi_screen_profile","text":"","code":"data(mini_mac) mini_mac@tools$diff_exprs <- mini_mac@tools$diff_exprs[1:2] mini_mac <- compute_multi_screen_profile(mini_mac, target = \"Staurosporine_10\", n_genes_profile = 20, direction = \"up\", num_cores = 1)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multiple_dose_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Model Gene Dose-Response Curves Across Treatments — compute_multiple_dose_response","title":"Model Gene Dose-Response Curves Across Treatments — compute_multiple_dose_response","text":"function fits dose-response models set genes across different treatments using drc package. returns EC50 values per gene per treatment.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multiple_dose_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model Gene Dose-Response Curves Across Treatments — compute_multiple_dose_response","text":"","code":"compute_multiple_dose_response(   data,   genes = NULL,   normalisation = \"limma_voom\",   control_value = \"DMSO\",   batch = 1,   k = 2,   num_cores = 1 )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multiple_dose_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model Gene Dose-Response Curves Across Treatments — compute_multiple_dose_response","text":"data Seurat TidySeurat object containing expression data metadata. genes character vector gene names model. NULL, significant DE genes across comparisons used. normalisation character string indicating normalization method. One : \"raw\", \"logNorm\", \"cpm\", \"clr\", \"SCT\", \"DESeq2\", \"edgeR\", \"RUVg\", \"RUVs\", \"RUVr\", \"limma_voom\", \"zinb\". Default \"limma_voom\". control_value string indicating control condition \"Treatment_1\". Default \"DMSO\". batch Batch variable use normalization applicable. Default 1. k Number unwanted factors RUV normalization. Default 2. num_cores Number CPU cores use parallel model fitting. Default 1.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multiple_dose_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model Gene Dose-Response Curves Across Treatments — compute_multiple_dose_response","text":"data frame EC50 values per gene treatment.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multiple_dose_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model Gene Dose-Response Curves Across Treatments — compute_multiple_dose_response","text":"","code":"data(mini_mac) res <- compute_multiple_dose_response(   data = mini_mac,   genes = c(\"FSHR\", \"ITFG2\"),   normalisation = \"limma_voom\",   control_value = \"DMSO\",   num_cores = 1 ) #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. #> StaurosporineDMSOControl measurements detected for level: 1 #> Control measurements detected for level: 1 #> MediaControl measurements detected for level: 1 #> Control measurements detected for level: 1 #> PaclitaxelThapsigarginError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  :  #>   non-finite finite-difference value [4] #> Vinblastine_sulfateChlorambucilEtoposideCytarabineError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  :  #>   non-finite finite-difference value [4] #> Error in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  :  #>   non-finite finite-difference value [1] #> Azd-59915-azacytidineMik665LuminespibCamptothecinAnastrozoleSb590885Fluvastatin_sodiumCeralasertibCapivasertibError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  :  #>   non-finite finite-difference value [4] #> Erlotinib_hydrochlorideNutlin-3aMk-2206_dihydrochlorideRibociclibAdavosertibTrametinibTemsirolimusAbemaciclibPonatinibFludarabine head(res) #>       Staurosporine DMSO Media Paclitaxel Thapsigargin Vinblastine_sulfate #> FSHR           4.42   NA    NA    5783042           NA               0.127 #> ITFG2          3.99   NA    NA        110        0.709               0.367 #>       Chlorambucil Etoposide Cytarabine                 Azd-5991 5-azacytidine #> FSHR          6.62      4.42         NA 76479449657720373248.000        0.0696 #> ITFG2        26.10     23.80         NA                    0.926        0.0488 #>       Mik665 Luminespib Camptothecin Anastrozole Sb590885 Fluvastatin_sodium #> FSHR    46.1     0.0821         3.13        62.3    0.157               1.66 #> ITFG2    1.5     4.4900       237.00       110.0    1.170              14.40 #>       Ceralasertib Capivasertib Erlotinib_hydrochloride Nutlin-3a #> FSHR         1.260      0.00672                   0.267     0.333 #> ITFG2        0.378           NA                   0.307     0.570 #>       Mk-2206_dihydrochloride Ribociclib Adavosertib Trametinib Temsirolimus #> FSHR                    3.030     0.0658       0.212     0.0173         9.75 #> ITFG2                   0.542     0.5070       1.040     1.1000        18.70 #>       Abemaciclib Ponatinib Fludarabine #> FSHR         1.89      3.03   140255.00 #> ITFG2        0.63      2.73        1.92"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_normalised_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve normalised counts of MAC-seq data — compute_normalised_counts","title":"Retrieve normalised counts of MAC-seq data — compute_normalised_counts","text":"function retrieves  counts number methods available normalisation, default limma-voomLmFit.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_normalised_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve normalised counts of MAC-seq data — compute_normalised_counts","text":"","code":"compute_normalised_counts(   data = NULL,   method = NULL,   batch = NULL,   k = NULL,   spikes = NULL,   max_counts = NULL,   num_cores = NULL )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_normalised_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve normalised counts of MAC-seq data — compute_normalised_counts","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\" method One \"raw\", \"logNorm\", \"cpm\", \"clr\", \"SCT\", \"DESeq2\", \"edgeR\", \"RUVg\", \"RUVs\", \"RUVr\", \"limma_voom\", \"limma_trend\", \"zinb\" batch Either empty, single value, vector corresponding number samples k Parameter k RUVSeq zinb methods spikes List genes use spike controls max_counts Maximum count gene across samples num_cores Number cores","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_normalised_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve normalised counts of MAC-seq data — compute_normalised_counts","text":"Data frame normalised counts","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_normalised_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve normalised counts of MAC-seq data — compute_normalised_counts","text":"","code":"data(mini_mac) compute_normalised_counts(mini_mac) #>                 AACAGGCAAT AACCAGCCAG AACCAGTTGA AACCGGCGTA AACCTAGTCC #> NAMPT                 13.7      14.26       14.4      13.91       13.6 #> ENSG00000278869       12.1       9.87       10.2       9.66       10.8 #> CABP7-DT              12.1       9.87       10.2       9.66       10.8 #>                 AACTCTACAC AACTGTGTCA AAGATGTCCA AAGCATATGG AAGCTCACCT #> NAMPT                 14.0       13.5       14.1      13.84       14.5 #> ENSG00000278869        9.8       10.3       10.6       9.94        9.9 #> CABP7-DT               9.8       10.3       10.6       9.94        9.9 #>                 AAGGCATGCG AAGTTCCTTG AATACCGGTA AATCCATCTG AATCGTCCGC #> NAMPT                 14.1      14.24       12.7      14.39       14.2 #> ENSG00000278869       10.4       9.99       10.3       9.87       10.3 #> CABP7-DT              10.4       9.99       10.3       9.87       10.3 #>                 AATGACCTTC AATGAGAGCA AATGTCAGTG AATTAGGCCG AATTGCGATG #> NAMPT                 14.1       13.8       14.2       14.8       14.0 #> ENSG00000278869       10.2       10.4       10.1       10.3       10.3 #> CABP7-DT              10.2       10.4       10.1       10.3       10.3 #>                 ACAACAGTCG ACAACCATAC ACAACGGAGC ACAAGCGCGA ACACAATCTC #> NAMPT                 14.2       13.7       13.3       13.9       14.2 #> ENSG00000278869       10.3       11.8       10.5       10.2        9.9 #> CABP7-DT              10.3       10.2       10.5       10.2        9.9 #>                 ACACAGTGAA ACACCGAATT ACACGCAGTA ACACGGTCCT ACACTTGCTG #> NAMPT                 13.8       10.3       13.3       14.4       12.6 #> ENSG00000278869       11.0       10.3       10.2       10.0       10.3 #> CABP7-DT              11.0       10.3       10.2       10.0       10.3 #>                 ACAGTGCCAA ACATGTGTGC ACCAGGACCA ACCATAACAC ACCGAACCGT #> NAMPT                 12.6      14.46       14.8       13.9       13.7 #> ENSG00000278869       11.0       9.93       10.1       10.2       10.0 #> CABP7-DT              11.0       9.93       10.1       10.2       10.0 #>                 ACCGAGAGTC ACCGGTACAG ACCGTACTTC ACCTCCGACA ACCTCTCTCC #> NAMPT                 13.6       13.3       13.6       13.8       13.7 #> ENSG00000278869       10.4       10.5       10.4       10.3       10.2 #> CABP7-DT              10.4       10.5       10.4       10.3       10.2 #>                 ACCTGTCCGA ACGAATGACA ACGCTGGATA ACGTAGGCAC ACGTGCTGAT #> NAMPT                 13.9      13.38       14.1       13.6       14.1 #> ENSG00000278869       10.4       9.92       10.4       10.4       10.4 #> CABP7-DT              10.4       9.92       10.4       10.4       10.4 #>                 ACTCCAAGCC ACTGGCGCAT ACTGGCTTCC ACTTAACTGC ACTTCATCAC #> NAMPT                 14.3       14.2       13.2      14.52       13.9 #> ENSG00000278869       10.1       10.1       10.9       9.77       10.2 #> CABP7-DT              10.1       10.1       10.9       9.77       10.2 #>                 ACTTCGTTGA ACTTCTCCTG ACTTGAGGAA ACTTGTAAGG AGAACCACGG #> NAMPT                 14.0       12.9      13.44       12.8       14.2 #> ENSG00000278869       10.1       10.6       9.98       10.4       10.5 #> CABP7-DT              10.1       10.6       9.98       10.4       10.5 #>                 AGAAGCAATC AGACCGTTAT AGACTAGCAT AGAGATGCAG AGAGCTTACA #> NAMPT                 14.2      14.21       13.9       14.0       14.3 #> ENSG00000278869       10.1       9.96       10.8       10.3       10.0 #> CABP7-DT              10.1       9.96       10.8       10.3       10.0 #>                 AGAGTGTAAC AGAGTTCTGC AGATAGTGCT AGCAATGCGC AGCATGTCAT #> NAMPT                 13.7       14.5      13.41       14.0       14.2 #> ENSG00000278869       10.2       10.6       9.95       10.0       10.3 #> CABP7-DT              10.2       10.6       9.95       10.0       10.3 #>                 AGCCACTAGC AGCCAGAATA AGCCAGCTCT AGCGATAACG AGCTATTCCA #> NAMPT                 14.4      14.05      13.90       13.1      14.36 #> ENSG00000278869       10.1       9.96       9.99       10.3       9.96 #> CABP7-DT              10.1       9.96       9.99       10.3       9.96 #>                 AGGCGTCTGT AGGTCACCAA AGTAACTCAC AGTAAGCGTT AGTCCACGTA #> NAMPT                 14.6       13.7       13.9       14.1       14.1 #> ENSG00000278869       10.2       10.2       10.2       10.4       12.3 #> CABP7-DT              10.2       10.2       10.2       10.4       10.0 #>                 AGTCTCGGCA AGTCTGTACG AGTGCAATGT ATAACGCCTC ATAAGAGGTC #> NAMPT                 14.5       13.4       13.8      14.11       14.2 #> ENSG00000278869       10.4       10.2       10.4       9.87       10.5 #> CABP7-DT              10.4       10.2       10.4       9.87       10.5 #>                 ATAAGGTGCA ATACACGACA ATACCTCCGG ATAGCAGTGC ATAGGCCATT #> NAMPT                 13.6       14.2      13.38       12.6       13.9 #> ENSG00000278869       10.1       10.2       9.92       10.3       10.0 #> CABP7-DT              10.1       10.2       9.92       10.3       10.0 #>                 ATATCCGCAT ATCAGCACTT ATCAGCGAGG ATCCAATACG ATCCGCTGTG #> NAMPT                 13.2       14.3       14.3      13.84       13.5 #> ENSG00000278869       10.4       10.4       10.4       9.93       10.3 #> CABP7-DT              10.4       10.4       10.4       9.93       10.3 #>                 ATCCGTCCAT ATCGACGGCT ATCGCGATTA ATCGGTAGGC ATCTAAGGAG #> NAMPT                13.66       14.3       13.7       13.8       14.4 #> ENSG00000278869       9.96       10.4       10.0       10.1        9.9 #> CABP7-DT              9.96       10.4       10.0       10.1        9.9 #>                 ATGACGGTAA ATGACTCAGT ATGCGGACTG ATGGTCTTAG ATGTGGAAGC #> NAMPT                 14.5      13.84      14.71       13.3       13.9 #> ENSG00000278869       10.2       9.93       9.85       10.5       10.4 #> CABP7-DT              10.2       9.93       9.85       10.5       10.4 #>                 ATTATCGGAC ATTCGGAACA CAACAATCCA CAAGAAGCAT CAAGATGAGG #> NAMPT                 14.4       12.8       14.1       13.8      13.76 #> ENSG00000278869       10.3       10.5       10.2       10.3       9.85 #> CABP7-DT              10.3       10.5       10.2       10.3       9.85 #>                 CAAGCCAACG CAAGTGGATC CACAGTTCAT CACGAGTCTG CACGCTCCAA #> NAMPT                 12.8      14.13       14.0       14.6       14.1 #> ENSG00000278869       11.2       9.89       10.3       10.1       10.4 #> CABP7-DT              11.2       9.89       10.3       10.1       10.4 #>                 CACTGAGCAC CAGATCAATG CAGTGCTCTT CAGTTAAGCA CATAGCTATC #> NAMPT                 14.4       13.8      14.23       13.8       13.9 #> ENSG00000278869       10.1       10.4       9.98       10.4       10.2 #> CABP7-DT              10.1       10.4       9.98       10.4       10.2 #>                 CATCACCACC CATGTACGCC CATTACACTG CATTCGACGA CCAACTATGG #> NAMPT                 14.8       13.9       14.1      13.90       12.9 #> ENSG00000278869       10.5       10.0       10.4       9.99       10.6 #> CABP7-DT              10.5       10.0       10.4       9.99       10.6 #>                 CCAAGGAGTT CCAATTGTTC CCACAAGTGC CCAGCTTAGT CCATAACTTG #> NAMPT                14.45       14.4      14.46       14.1      13.62 #> ENSG00000278869       9.81       10.3       9.94       10.9       9.72 #> CABP7-DT              9.81       10.3       9.94       10.9       9.72 #>                 CCATAGATCA CCGAACAAGC CCGAAGACCT CCGAATAGTG CCGACTTCTC #> NAMPT                 14.2       13.6       14.3       14.4       14.7 #> ENSG00000278869        9.8       12.1       10.6       10.0       10.3 #> CABP7-DT               9.8       10.5       10.6       10.0       10.3 #>                 CCGATCCACT CCGATGATAC CCGCGTTATG CCGCTAGCTT CCGGAGTATC #> NAMPT                 13.6       14.0       13.9       14.1       14.8 #> ENSG00000278869       12.0       10.6       10.2       10.2       10.1 #> CABP7-DT              10.4       10.6       10.2       10.2       10.1 #>                 CCGGCCAATT CCGGTCTCTA CCGTACGATG CCGTCAGAAC CCTAGACACG #> NAMPT                 14.0       14.6       13.4      14.17       13.9 #> ENSG00000278869       10.3       10.1       10.6       9.77       10.2 #> CABP7-DT              10.3       10.1       10.6       9.77       10.2 #>                 CCTAGTTGAG CCTATTCTGT CCTCAACCGA CCTCCATAAG CCTGATGCCA #> NAMPT                 14.4       14.8       14.6       14.1      13.95 #> ENSG00000278869       10.2       10.6       10.2       10.2       9.86 #> CABP7-DT              10.2       10.6       10.2       10.2       9.86 #>                 CCTGCAATAC CCTTGTATTC CGAGATCTCT CGAGGAACAA CGATAACCGC #> NAMPT                 13.5       14.0       13.4       14.7       14.2 #> ENSG00000278869       10.3       10.1       10.6       11.7       10.3 #> CABP7-DT              10.3       10.1       10.6       10.1       10.3 #>                 CGATCCTGTG CGCCAACCAT CGCCAGTGTT CGCGGATTCA CGCTTCTTGG #> NAMPT                14.07       13.8       14.5       13.7       14.5 #> ENSG00000278869       9.98       11.4       10.1       10.0       10.3 #> CABP7-DT              9.98       11.4       10.1       10.0       10.3 #>                 CGGAATACAC CGGAGATTGG CGGAGCTCAA CGGATCGGTA CGGATTCTAG #> NAMPT                 14.1       14.5       14.0      14.50       13.1 #> ENSG00000278869       10.4       10.4       10.3       9.86       10.3 #> CABP7-DT              10.4       10.4       10.3       9.86       10.3 #>                 CGGCAACTTA CGGCTCATCA CGGTCGTATT CGGTGACATC CGTAACGGAT #> NAMPT                 12.8       14.1       14.2       12.9       14.3 #> ENSG00000278869       10.0       10.4       10.1       10.6       10.1 #> CABP7-DT              10.0       10.4       10.1       10.6       10.1 #>                 CGTAAGATTC CGTACTGTAA CGTAGAAGAC CGTCCTAGGA CGTCGGCAAT #> NAMPT                 13.6       13.6       14.5      13.89       13.5 #> ENSG00000278869       10.2       10.1       10.4       9.98       10.3 #> CABP7-DT              10.2       10.1       10.4       9.98       10.3 #>                 CGTGAGTTAT CGTGTCAAGC CTAACTTCAG CTAATAGCGT CTACACCAGG #> NAMPT                 14.2       12.9       14.4       13.9      14.20 #> ENSG00000278869       10.1       10.5       10.0       12.0       9.96 #> CABP7-DT              10.1       10.5       10.0       10.4       9.96 #>                 CTAGCACAAT CTATGAACGG CTCAAGGACC CTCACCTGTC CTCCTATTGT #> NAMPT                13.97      14.28       14.0       14.4      13.52 #> ENSG00000278869       9.89       9.89       10.3       10.0       9.82 #> CABP7-DT              9.89       9.89       10.3       10.0       9.82 #>                 CTCGCAACGT CTGGATTGAC CTGTCTGTGT CTTATGTTGC CTTCATATCG #> NAMPT                 13.9       14.3       13.6       14.1       13.9 #> ENSG00000278869       10.0       10.2       10.4       10.2        9.8 #> CABP7-DT              10.0       10.2       10.4       10.2        9.8 #>                 CTTGCTGACG CTTGGATCTT GAAGAGTTCT GAAGGATTAG GAATCGAGCC #> NAMPT                 13.5       14.1       14.6       13.9       13.2 #> ENSG00000278869       10.7       10.0       10.2       10.2       10.4 #> CABP7-DT              10.7       10.0       10.2       10.2       10.4 #>                 GAATCTTCTC GAATTACGGC GACCATCTAA GACGACCACA GAGAACGAAG #> NAMPT                 13.2       14.3      14.17       14.2       14.3 #> ENSG00000278869       10.0       10.4       9.92       10.5       11.7 #> CABP7-DT              10.0       10.4       9.92       10.5       10.1 #>                 GAGACAAGGC GAGACATCTT GAGCGAGTCA GAGTAGACCA GATACGCTTA #> NAMPT                 14.2       13.3       12.8       13.9       12.7 #> ENSG00000278869       11.9       10.1       10.5       10.0       11.1 #> CABP7-DT              10.3       10.1       10.5       10.0       11.1 #>                 GATAGACTGT GATAGAGGCG GATAGGTCAA GATATCAGGA GATCTCATTC #> NAMPT                 13.0       13.5       14.2       13.8       13.6 #> ENSG00000278869       10.6       10.7       10.1       10.3       10.1 #> CABP7-DT              10.6       10.7       10.1       10.3       10.1 #>                 GATCTGGTCG GATGAGTGAC GATGGATACA GATGTGACAG GATTGCACGC #> NAMPT                 13.4      14.23       14.7       14.0       10.9 #> ENSG00000278869       10.3       9.98       10.2       10.1       10.9 #> CABP7-DT              10.3       9.98       10.2       10.1       10.9 #>                 GCACACTATA GCACTGCGTT GCACTTAATC GCAGGAGATG GCAGTACTGG #> NAMPT                 14.1       13.5      13.88       13.9       14.5 #> ENSG00000278869       10.4       10.3       9.97       10.4       10.0 #> CABP7-DT              10.4       10.3       9.97       10.4       10.0 #>                 GCATATGAGT GCATCCGATC GCCAAGTACA GCCACGATTC GCCATAGGTT #> NAMPT                 14.5       14.3       13.4       14.4       13.7 #> ENSG00000278869       10.2       10.0       10.3       10.0       10.2 #> CABP7-DT              10.2       10.0       10.3       10.0       10.2 #>                 GCCATATCGA GCCGTCAATA GCCTGGACAT GCGTAATTAC GCTATTATCC #> NAMPT                14.14       13.8      14.09       13.8      13.49 #> ENSG00000278869       9.89       10.3      11.43       10.4       9.79 #> CABP7-DT              9.89       10.3       9.84       10.4       9.79 #>                 GCTCAGTAAT GCTGCTTATA GGAATAAGCA GGACGATGCT GGCATCGTGA #> NAMPT                 13.6       13.8       14.3       12.4       13.6 #> ENSG00000278869       10.8       10.1       10.4       10.1       10.4 #> CABP7-DT              10.8       10.1       10.4       10.1       10.4 #>                 GGCATTATTG GGCCGAGATT GGCGCTATAA GGCGTTAAGT GGCTATTGAT #> NAMPT                 14.0       13.6      14.16       13.7       13.2 #> ENSG00000278869       10.1       10.2      11.50       10.2       10.0 #> CABP7-DT              10.1       10.2       9.91       10.2       10.0 #>                 GGCTGCTACT GGTAATGTGT GGTGTTCACC GGTTCACTGG GTAACCAGTA #> NAMPT                 13.8       14.3       14.5       14.0       13.6 #> ENSG00000278869       10.3       10.0       10.2       10.6       10.2 #> CABP7-DT              10.3       10.0       10.2       10.6       10.2 #>                 GTAACCTTGG GTAAGAACCT GTAAGGCTCC GTAATCCACG GTATTGTGGA #> NAMPT                 13.7       13.8       13.7       13.5       14.2 #> ENSG00000278869       10.0       10.1       10.2       10.0       10.1 #> CABP7-DT              10.0       10.1       10.2       10.0       10.1 #>                 GTCCGCATCA GTCCTTCGGT GTCGCTCTCT GTCGGTGACA GTCTCGAGTG #> NAMPT                 14.1       15.1       14.0      13.31       13.6 #> ENSG00000278869       10.4       10.2       10.3       9.85       10.5 #> CABP7-DT              10.4       10.2       10.3       9.85       10.5 #>                 GTCTCTTAAG GTCTTCCGAG GTGACTATAC GTGGTTAATG GTGTGCCTGT #> NAMPT                 14.3       13.7      13.94       14.2       13.7 #> ENSG00000278869       10.4       10.5       9.86       10.3       10.3 #> CABP7-DT              10.4       10.5       9.86       10.3       10.3 #>                 GTGTGTGTCC GTTCATTGCC GTTCCGGTGA GTTCGTCGAA GTTGAATTGG #> NAMPT                 14.3       14.2       13.3      13.87       13.6 #> ENSG00000278869       10.2       10.1       10.5       9.96       10.4 #> CABP7-DT              10.2       10.1       10.5       9.96       10.4 #>                 GTTGATCCGC GTTGTATGCT TAACCGTAGC TAACGTCGAT TAAGGTACGG #> NAMPT                12.70      14.04       14.3       14.1      14.60 #> ENSG00000278869       9.89       9.96       10.1       10.2       9.84 #> CABP7-DT              9.89       9.96       10.1       10.2       9.84 #>                 TACTACCGCC TAGCGCCAAC TAGGTTGCAA TAGTAGTCTC TAGTCCGCTG #> NAMPT                14.57       13.5       14.0      14.28       13.6 #> ENSG00000278869       9.93       10.7       10.3       9.89       10.5 #> CABP7-DT              9.93       10.7       10.3       9.89       10.5 #>                 TAGTGGAACT TATCATGCAG TATCGTTACG TCAAGTGCAG TCACAGATAC #> NAMPT                 12.6       13.3       14.0       13.8       14.6 #> ENSG00000278869       10.3       10.2       10.1       10.3       10.0 #> CABP7-DT              10.3       10.2       10.1       10.3       10.0 #>                 TCACCGCCTA TCACGCCACT TCACGTTGGC TCATTGTCCA TCCACACTAG #> NAMPT                 14.0       14.0       13.5       14.6       13.0 #> ENSG00000278869       10.3       10.1       10.3       10.1       10.2 #> CABP7-DT              10.3       10.1       10.3       10.1       10.2 #>                 TCCACGGTCA TCCACTCGCT TCCGACTAAC TCCGTTATCT TCCTAAGAGA #> NAMPT                 14.6       12.3       14.7       14.1       14.3 #> ENSG00000278869       10.1       10.8       10.2       10.2       10.4 #> CABP7-DT              10.1       10.8       10.2       10.2       10.4 #>                 TCCTCTAGTA TCGAAGCATT TCGAGAGAGC TCGCACTTGA TCGCCTACTG #> NAMPT                 13.6       13.8       12.0      14.83       12.7 #> ENSG00000278869       10.8       10.6       10.4       9.88       10.4 #> CABP7-DT              10.8       10.6       10.4       9.88       10.4 #>                 TCGCGTAGCA TCGGCGTTAA TCTACATCCG TCTCTCCTAT TGAAGAAGGT #> NAMPT                 13.5       14.4       14.6      14.93       14.9 #> ENSG00000278869       10.4       10.0       10.5       9.97       10.3 #> CABP7-DT              10.4       10.0       10.5       9.97       10.3 #>                 TGAGCGTTCC TGAGTACGTA TGGAATGGAG TGTCATTCGC TGTGCTTCAG #> NAMPT                 14.5       13.3       13.7       14.6      14.20 #> ENSG00000278869       10.1       10.5       10.2       10.5      11.53 #> CABP7-DT              10.1       10.5       10.2       10.5       9.95 #>                 TGTTCAGGAT TTACACACGT TTACTGTGAC TTATGCCGCG TTCACGGAAG #> NAMPT                 13.6      14.57       14.5       14.5       14.3 #> ENSG00000278869       10.2       9.71       10.6       10.1       10.4 #> CABP7-DT              10.2       9.71       10.6       10.1       10.4 #>                 TTCGAGTGAT TTCTGTACCT TTGGTAACAG #> NAMPT                 14.6       14.2      14.30 #> ENSG00000278869       10.2       10.7       9.91 #> CABP7-DT              10.2       10.7       9.91 #>  [ reached getOption(\"max.print\") -- omitted 497 rows ]"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_qc_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate QC metrics — compute_qc_metrics","title":"Calculate QC metrics — compute_qc_metrics","text":"calculate QC metrics standard deviation (sd), median absolute deviation (MAD), interquartile range (IQR), Z score read counts per condition/group interest","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_qc_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate QC metrics — compute_qc_metrics","text":"","code":"compute_qc_metrics(data = NULL, group_by = NULL, order_by = NULL)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_qc_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate QC metrics — compute_qc_metrics","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\". group_by metadata column name group data order_by column name \"median\" median read counts.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_qc_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate QC metrics — compute_qc_metrics","text":"list data frame QC metrics box plot showing read counts per condition","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_qc_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate QC metrics — compute_qc_metrics","text":"","code":"data(mini_mac) compute_qc_metrics(data = mini_mac, group_by = \"combined_id\", order_by = \"median\") #> $stats_summary #> # A tibble: 83 × 6 #>    combined_id     sd_value mad_value group_median z_score   IQR #>    <chr>              <dbl>     <dbl>        <dbl>   <dbl> <dbl> #>  1 Abemaciclib_0.1     39.1     32.6           465   0.542  38   #>  2 Abemaciclib_1       32.5     47.4           415  -0.119  32.5 #>  3 Abemaciclib_10     104.      63.8           382  -0.555  99   #>  4 Adavosertib_0.1     65.5     93.4           417  -0.093  65.5 #>  5 Adavosertib_1       63.1     83.0           440   0.212  63   #>  6 Adavosertib_10      62.5     90.4           353  -0.939  62.5 #>  7 Anastrozole_0.1     13.2      7.41          466   0.555  12.5 #>  8 Anastrozole_1       50.7     13.3           405  -0.251  46   #>  9 Anastrozole_10      24.3      2.96          491   0.886  21.5 #> 10 Azd.5991_0.1        66.6     53.4           425   0.013  64.5 #> # ℹ 73 more rows #>  #> $plot  #>"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve normalised counts of MAC-seq data — compute_single_de","title":"Retrieve normalised counts of MAC-seq data — compute_single_de","text":"function retrieves  counts number methods available normalisation, default limma-voomLmFit.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve normalised counts of MAC-seq data — compute_single_de","text":"","code":"compute_single_de(   data = NULL,   treatment_samples = NULL,   control_samples = NULL,   method = NULL,   batch = 1,   k = 2,   spikes = NULL )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve normalised counts of MAC-seq data — compute_single_de","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\" treatment_samples Value column \"combined_id\" representing replicates treatment samples data control_samples Value column \"combined_id\"  representing replicates control samples data method One \"Seurat_wilcox\", \"DESeq2\", \"edgeR\", \"RUVg\", \"RUVs\", \"RUVr\", \"limma_voom\", \"limma_trend\" batch Either empty, single value, vector corresponding number samples k Parameter k RUVSeq methods, check RUVSeq tutorial spikes List genes use spike controls","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_de.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve normalised counts of MAC-seq data — compute_single_de","text":"Data frame DE counts","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_de.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve normalised counts of MAC-seq data — compute_single_de","text":"","code":"data(mini_mac) treatment_samples=\"Staurosporine_0.1\" control_samples<-\"DMSO_0\" top_table <- compute_single_de(mini_mac, treatment_samples, control_samples, method = \"limma_voom\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_dose_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Model Gene Dose-Response Curve Using drc — compute_single_dose_response","title":"Model Gene Dose-Response Curve Using drc — compute_single_dose_response","text":"Model Gene Dose-Response Curve Using drc","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_dose_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model Gene Dose-Response Curve Using drc — compute_single_dose_response","text":"","code":"compute_single_dose_response(   data,   gene = NULL,   pathway = NULL,   normalisation = \"limma_voom\",   treatment_value,   control_value = \"DMSO\",   batch = 1,   k = 2 )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_dose_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model Gene Dose-Response Curve Using drc — compute_single_dose_response","text":"data Seurat TidySeurat object containing expression metadata. gene gene name (must match row name object). pathway character string present list enriched pathways. normalisation One \"raw\", \"logNorm\", \"cpm\", \"clr\", \"SCT\", \"DESeq2\", \"edgeR\", \"RUVg\", \"RUVs\", \"RUVr\", \"limma_voom\", \"zinb\". empty, defaults cpm treatment_value character string matching one value metadata column \"Treatment_1\". control_value character string matching one value metadata column \"Treatment_1\". batch Either empty, single value, vector corresponding number samples k Parameter k RUVSeq methods, check RUVSeq tutorial","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_dose_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model Gene Dose-Response Curve Using drc — compute_single_dose_response","text":"list drc model, predicted values, ggplot curve","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_dose_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model Gene Dose-Response Curve Using drc — compute_single_dose_response","text":"","code":"# \\donttest{ data(mini_mac) res <- compute_single_dose_response(data = mini_mac, gene = \"FSHR\", normalisation = \"limma_voom\", treatment_value = \"Camptothecin\") #>  #> Estimated effective doses #>  #>        Estimate Std. Error Lower Upper #> e:1:50     2.65       2.38 -2.26  7.56 res$plot  res <- compute_single_dose_response(data = mini_mac, pathway = \"p53 Pathway\", treatment_value = \"Camptothecin\") #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #>  #> Estimated effective doses #>  #>        Estimate Std. Error Lower Upper #> e:1:50     3.44      10.00   NaN   NaN res$plot  # }"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_enrichr.html","id":null,"dir":"Reference","previous_headings":"","what":"Pathway enrichment analysis — compute_single_enrichr","title":"Pathway enrichment analysis — compute_single_enrichr","text":"pathway_enrichment performs hypergeometric test enrichment set genes user-provided genesets enricher databases","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_enrichr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pathway enrichment analysis — compute_single_enrichr","text":"","code":"compute_single_enrichr(   genes = NULL,   db = NULL,   genesets = NULL,   species = NULL )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_enrichr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pathway enrichment analysis — compute_single_enrichr","text":"genes Differentially expressed genes enrichment analysis db Valid name enrichR database genesets Named list genes species One \"human\", \"mouse\", \"fly\", \"yeast\", \"worm\" \"fish\"","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_enrichr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pathway enrichment analysis — compute_single_enrichr","text":"Data frame pathway-enrichment statistics","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_enrichr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pathway enrichment analysis — compute_single_enrichr","text":"","code":"data(mini_mac) top_genes <- mini_mac@tools$diff_exprs[[\"Staurosporine_10\"]]$gene data(genesets) compute_single_enrichr(genes = top_genes, genesets = genesets, species=\"human\") #>                                                                Term Overlap #> Adipogenesis                                           Adipogenesis   5/200 #> Interferon Gamma Response                 Interferon Gamma Response   5/200 #> mTORC1 Signaling                                   mTORC1 Signaling   5/200 #> Angiogenesis                                           Angiogenesis    1/36 #> Apical Surface                                       Apical Surface    1/44 #> Reactive Oxygen Species Pathway     Reactive Oxygen Species Pathway    1/49 #> Androgen Response                                 Androgen Response   2/100 #> Pperoxisome                                             Pperoxisome   2/104 #> Bile Acid Metabolism                           Bile Acid Metabolism   2/112 #> Cholesterol Homeostasis                     Cholesterol Homeostasis    1/74 #> Mitotic Spindle                                     Mitotic Spindle   3/199 #> Apical Junction                                     Apical Junction   3/200 #> Estrogen Response Early                     Estrogen Response Early   3/200 #> Estrogen Response Late                       Estrogen Response Late   3/200 #> Inflammatory Response                         Inflammatory Response   3/200 #> p53 Pathway                                             p53 Pathway   3/200 #> Xenobiotic Metabolism                         Xenobiotic Metabolism   3/200 #> Protein Secretion                                 Protein Secretion    1/96 #> Interferon Alpha Response                 Interferon Alpha Response    1/97 #> Unfolded Protein Response                 Unfolded Protein Response   1/113 #> IL-2/STAT5 Signaling                           IL-2/STAT5 Signaling   2/199 #> Complement                                               Complement   2/200 #> E2F Targets                                             E2F Targets   2/200 #> Epithelial Mesenchymal Transition Epithelial Mesenchymal Transition   2/200 #> G2-M Checkpoint                                     G2-M Checkpoint   2/200 #> Hypoxia                                                     Hypoxia   2/200 #> KRAS Signaling Up                                 KRAS Signaling Up   2/200 #> TNF-alpha Signaling via NF-kB         TNF-alpha Signaling via NF-kB   2/200 #> Spermatogenesis                                     Spermatogenesis   1/135 #> UV Response Dn                                       UV Response Dn   1/144 #> DNA Repair                                               DNA Repair   1/150 #> Fatty Acid Metabolism                         Fatty Acid Metabolism   1/158 #> UV Response Up                                       UV Response Up   1/158 #> Apoptosis                                                 Apoptosis   1/161 #> Glycolysis                                               Glycolysis   1/200 #> heme Metabolism                                     heme Metabolism   1/200 #>                                   P.value Adjusted.P.value #> Adipogenesis                        0.563            0.994 #> Interferon Gamma Response           0.563            0.994 #> mTORC1 Signaling                    0.563            0.994 #> Angiogenesis                        0.598            0.994 #> Apical Surface                      0.672            0.994 #> Reactive Oxygen Species Pathway     0.711            0.994 #> Androgen Response                   0.717            0.994 #> Pperoxisome                         0.737            0.994 #> Bile Acid Metabolism                0.774            0.994 #> Cholesterol Homeostasis             0.847            0.994 #> Mitotic Spindle                     0.878            0.994 #> Apical Junction                     0.880            0.994 #> Estrogen Response Early             0.880            0.994 #> Estrogen Response Late              0.880            0.994 #> Inflammatory Response               0.880            0.994 #> p53 Pathway                         0.880            0.994 #> Xenobiotic Metabolism               0.880            0.994 #> Protein Secretion                   0.913            0.994 #> Interferon Alpha Response           0.915            0.994 #> Unfolded Protein Response           0.943            0.994 #> IL-2/STAT5 Signaling                0.961            0.994 #> Complement                          0.962            0.994 #> E2F Targets                         0.962            0.994 #> Epithelial Mesenchymal Transition   0.962            0.994 #> G2-M Checkpoint                     0.962            0.994 #> Hypoxia                             0.962            0.994 #> KRAS Signaling Up                   0.962            0.994 #> TNF-alpha Signaling via NF-kB       0.962            0.994 #> Spermatogenesis                     0.968            0.994 #> UV Response Dn                      0.974            0.994 #> DNA Repair                          0.978            0.994 #> Fatty Acid Metabolism               0.982            0.994 #> UV Response Up                      0.982            0.994 #> Apoptosis                           0.983            0.994 #> Glycolysis                          0.994            0.994 #> heme Metabolism                     0.994            0.994 #>                                                           Genes Combined.Score #> Adipogenesis                       ELMOD3;GPAM;ATP1B3;DHCR7;CAT         0.0000 #> Interferon Gamma Response           VAMP8;NMI;PTGS2;NAMPT;CIITA         0.0000 #> mTORC1 Signaling                  XBP1;CTSC;NAMPT;DHCR7;SLC37A4         0.0000 #> Angiogenesis                                             S100A4         0.0548 #> Apical Surface                                            CD160        -0.0384 #> Reactive Oxygen Species Pathway                             CAT        -0.0702 #> Androgen Response                                   ACTN1;CENPN        -0.1064 #> Pperoxisome                                          PEX11A;CAT        -0.1148 #> Bile Acid Metabolism                                 PEX11A;CAT        -0.1243 #> Cholesterol Homeostasis                                   DHCR7        -0.1051 #> Mitotic Spindle                             SMC4;CDC42EP1;DOCK4        -0.1170 #> Apical Junction                              ACTN1;CLDN18;NLGN2        -0.1160 #> Estrogen Response Early                       PEX11A;XBP1;DHCR7        -0.1160 #> Estrogen Response Late                        XBP1;PLXNB1;DHCR7        -0.1160 #> Inflammatory Response                            NMI;NAMPT;ROS1        -0.1160 #> p53 Pathway                                  VAMP8;S100A4;EPHX1        -0.1160 #> Xenobiotic Metabolism                            AHCY;EPHX1;CAT        -0.1160 #> Protein Secretion                                          CTSC        -0.0838 #> Interferon Alpha Response                                   NMI        -0.0826 #> Unfolded Protein Response                                  XBP1        -0.0642 #> IL-2/STAT5 Signaling                                  XBP1;AHCY        -0.0536 #> Complement                                           CTSC;DOCK4        -0.0528 #> E2F Targets                                           SMC4;CTCF        -0.0528 #> Epithelial Mesenchymal Transition                    MGP;PDGFRB        -0.0528 #> G2-M Checkpoint                                       SMC4;CTCF        -0.0528 #> Hypoxia                                          S100A4;SLC37A4        -0.0528 #> KRAS Signaling Up                                  PTGS2;ANXA10        -0.0528 #> TNF-alpha Signaling via NF-kB                       PTGS2;NAMPT        -0.0528 #> Spermatogenesis                                            DMC1        -0.0431 #> UV Response Dn                                           PDGFRB        -0.0362 #> DNA Repair                                                EIF1B        -0.0321 #> Fatty Acid Metabolism                                     EPHX1        -0.0273 #> UV Response Up                                            EPHX1        -0.0273 #> Apoptosis                                                PDGFRB        -0.0257 #> Glycolysis                                              SLC37A4        -0.0112 #> heme Metabolism                                             CAT        -0.0112"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_smiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate tidyseurat object with SMILES — compute_smiles","title":"Annotate tidyseurat object with SMILES — compute_smiles","text":"function retrieves isomeric SMILES PubChem based compound names Treatment_1 column tidyseurat object.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_smiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate tidyseurat object with SMILES — compute_smiles","text":"","code":"compute_smiles(data, compound_column)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_smiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate tidyseurat object with SMILES — compute_smiles","text":"data tidyseurat object compound_column Column generic name compound","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_smiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate tidyseurat object with SMILES — compute_smiles","text":"tidyseurat object smiles column added metadata.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_smiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate tidyseurat object with SMILES — compute_smiles","text":"","code":"mock_data <- tibble::tibble( Treatment_1 = c(\"Aspirin\", \"Caffeine\", \"NonExistentCompound_123\") ) result <- compute_smiles(mock_data, compound_column = \"Treatment_1\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/convert_human_to_mouse.html","id":null,"dir":"Reference","previous_headings":"","what":"For a given gene set of human symbols return mouse symbols — convert_human_to_mouse","title":"For a given gene set of human symbols return mouse symbols — convert_human_to_mouse","text":"given gene set human symbols return mouse symbols","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/convert_human_to_mouse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"For a given gene set of human symbols return mouse symbols — convert_human_to_mouse","text":"","code":"convert_human_to_mouse(gene_list)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/convert_human_to_mouse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"For a given gene set of human symbols return mouse symbols — convert_human_to_mouse","text":"gene_list List human genes converted mouse IDs","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/convert_human_to_mouse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"For a given gene set of human symbols return mouse symbols — convert_human_to_mouse","text":"genes","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/convert_human_to_mouse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"For a given gene set of human symbols return mouse symbols — convert_human_to_mouse","text":"","code":"# \\donttest{ convert_human_to_mouse(c(\"BRCA1\", \"TRAF1\", \"MYBL1\")) #> [1] \"Brca1\" \"Traf1\" \"Mybl1\" # }"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/download_geneset.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — download_geneset","title":"Title — download_geneset","text":"Title","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/download_geneset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — download_geneset","text":"","code":"download_geneset(species = \"human\", db = \"MSigDB_Hallmark_2020\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/download_geneset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — download_geneset","text":"species One \"human\", \"mouse\", \"fly\", \"yeast\", \"worm\" \"fish\" db Valid name enrichR database","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/download_geneset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — download_geneset","text":"List genes per geneset","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/download_geneset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — download_geneset","text":"","code":"genesets <- download_geneset(\"human\", \"MSigDB_Hallmark_2020\") head(genesets[[\"Adipogenesis\"]]) #> [1] \"ECH1\"    \"CIDEA\"   \"PEX14\"   \"LEP\"     \"UQCRC1\"  \"SPARCL1\""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/filter_genes_by_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter genes by expression and grouping — filter_genes_by_expression","title":"Filter genes by expression and grouping — filter_genes_by_expression","text":"Filter genes expression grouping","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/filter_genes_by_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter genes by expression and grouping — filter_genes_by_expression","text":"","code":"filter_genes_by_expression(   data,   group_by = \"combined_id\",   min_counts = 10,   min_samples = 2 )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/filter_genes_by_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter genes by expression and grouping — filter_genes_by_expression","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\" group_by Name column defines groups replicates min_counts Minimum number reads per gene per group min_samples Minimum number samples group","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/filter_genes_by_expression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter genes by expression and grouping — filter_genes_by_expression","text":"tidyseurat object","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/filter_genes_by_expression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter genes by expression and grouping — filter_genes_by_expression","text":"","code":"data(mini_mac) mini_mac <- filter_genes_by_expression(mini_mac,                                        group_by = \"combined_id\",                                         min_counts = 10, min_samples = 2)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/find_clusters_de_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate clusters for umap based on DE analysis — find_clusters_de_umap","title":"Calculate clusters for umap based on DE analysis — find_clusters_de_umap","text":"Calculate clusters umap based DE analysis","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/find_clusters_de_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate clusters for umap based on DE analysis — find_clusters_de_umap","text":"","code":"find_clusters_de_umap(data = NULL, k = 10)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/find_clusters_de_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate clusters for umap based on DE analysis — find_clusters_de_umap","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\". k Number nearest neighbors buildSNNGraph used construct shared nearest-neighbor (SNN) graph","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/find_clusters_de_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate clusters for umap based on DE analysis — find_clusters_de_umap","text":"tidyseurat object cluster information metadata slot","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/find_clusters_de_umap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate clusters for umap based on DE analysis — find_clusters_de_umap","text":"","code":"data(mini_mac) mini_mac <- compute_de_umap(mini_mac) #> Found more than one class \"dist\" in cache; using the first, from namespace 'spam' #> Also defined by ‘BiocGenerics’ mini_mac <- find_clusters_de_umap(mini_mac)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/genesets.html","id":null,"dir":"Reference","previous_headings":"","what":"Pathway gene‐sets for PMMSq033 — genesets","title":"Pathway gene‐sets for PMMSq033 — genesets","text":"named list gene sets used hypergeometric enrichment tests PMMSq033 dataset.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/genesets.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pathway gene‐sets for PMMSq033 — genesets","text":"named list length character vectors. element character vector gene symbols corresponding one pathway.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/genesets.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pathway gene‐sets for PMMSq033 — genesets","text":"Generated extdata/PMMSq033/pathways.Rds via data-raw/data.R preprocessing script.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/macpie_colours.html","id":null,"dir":"Reference","previous_headings":"","what":"Color palettes used by macpie — macpie_colours","title":"Color palettes used by macpie — macpie_colours","text":"named list discrete continuous color palettes consistent styling macpie plots.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/macpie_colours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color palettes used by macpie — macpie_colours","text":"","code":"macpie_colours"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/macpie_colours.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Color palettes used by macpie — macpie_colours","text":"named list following elements: discrete: Preferred unikn palette colors. discrete_40: 60-color extension sampled high cardinality. discrete_400: 400-color diverging Zissou1 palette (reversed). high: Single high-emphasis color. low: Single low-emphasis color. divergent: 100-step divergent palette. continuous: 100-step continuous palette (high white low). continuous_rev: Reverse continuous. scale_3: Three-color scale small categorical data.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/macpie_colours.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Color palettes used by macpie — macpie_colours","text":"","code":"macpie_colours$discrete #> [1] \"#59C7EB\" \"#E0607E\" \"#0A9086\" \"#FEA090\" \"#3E5496\" \"#EFDC60\" \"#8E2043\" #> [8] \"#9AA0A7\" \"#077187\" barplot(rep(1, 10), col = macpie_colours$discrete_40, border = NA)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/macpie_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"colour theme for macpie plots — macpie_theme","title":"colour theme for macpie plots — macpie_theme","text":"custom ggplot2 theme optimized macpie figures, clean backgrounds, consistent text sizing, configurable axis/legend elements.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/macpie_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"colour theme for macpie plots — macpie_theme","text":"","code":"macpie_theme(   show_x_title = TRUE,   show_y_title = TRUE,   legend_position_ = \"bottom\",   x_labels_angle = 0 )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/macpie_theme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"colour theme for macpie plots — macpie_theme","text":"show_x_title Logical; TRUE, displays x-axis title. show_y_title Logical; TRUE, displays y-axis title. legend_position_ Character; position legend (e.g., 'bottom', 'none'). x_labels_angle Numeric; rotation angle (degrees) x-axis text labels.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/macpie_theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"colour theme for macpie plots — macpie_theme","text":"ggplot2 theme object can added plot.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/macpie_theme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"colour theme for macpie plots — macpie_theme","text":"","code":"library(ggplot2) ggplot(mtcars, aes(wt, mpg)) +   geom_point(color = macpie_colours$high) +   macpie_theme()"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/mini_mac.html","id":null,"dir":"Reference","previous_headings":"","what":"A small example MACseq plate — mini_mac","title":"A small example MACseq plate — mini_mac","text":"384-cell × 500-gene subset PMMSq033 dataset, included runnable examples fast CRAN checks.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/mini_mac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A small example MACseq plate — mini_mac","text":"","code":"data(mini_mac)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/mini_mac.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A small example MACseq plate — mini_mac","text":"Seurat object one assay: RNA counts slot , normalized data, metadata","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/mini_mac.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A small example MACseq plate — mini_mac","text":"Prepared subsetting PMMSq033.rds data/","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a box plot to show gene expression (CPM) — plot_counts","title":"Generate a box plot to show gene expression (CPM) — plot_counts","text":"function generate box plot show CPM levels DE genes among selected treatment samples control samples.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a box plot to show gene expression (CPM) — plot_counts","text":"","code":"plot_counts(   data = NULL,   genes = NULL,   group_by = NULL,   treatment_samples = NULL,   control_samples = NULL,   color_by = NULL,   normalisation = NULL,   batch = 1 )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a box plot to show gene expression (CPM) — plot_counts","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\". genes Genes plotted group_by column specifies treatment group input data treatment_samples Value column \"combined_id\" representing replicates treatment samples data control_samples Value column \"combined_id\"  representing replicates control samples data color_by column specifies group coloring normalisation One \"raw\", \"logNorm\", \"cpm\", \"clr\", \"SCT\", \"DESeq2\", \"edgeR\", \"RUVg\", \"RUVs\", \"RUVr\", \"limma_voom\" batch indicate patch factor","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a box plot to show gene expression (CPM) — plot_counts","text":"ggplot2 object","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a box plot to show gene expression (CPM) — plot_counts","text":"","code":"data(mini_mac) genes <- mini_mac@tools$diff_exprs$Staurosporine_10$gene[1:6] p <- plot_counts(mini_mac, genes = genes, group_by = \"combined_id\",  treatment_samples = \"Staurosporine_10\",  control_samples = \"DMSO_0\", normalisation = \"clr\") #> Normalizing layer: counts #> Normalizing across cells #>    |                                                  | 0 % ~calculating     |+                                                 | 1 % ~00s             |++                                                | 3 % ~00s             |++                                                | 4 % ~00s             |+++                                               | 5 % ~00s             |++++                                              | 6 % ~00s             |++++                                              | 8 % ~00s             |+++++                                             | 9 % ~00s             |++++++                                            | 10% ~00s             |++++++                                            | 12% ~00s             |+++++++                                           | 13% ~00s             |++++++++                                          | 14% ~00s             |++++++++                                          | 16% ~00s             |+++++++++                                         | 17% ~00s             |++++++++++                                        | 18% ~00s             |++++++++++                                        | 19% ~00s             |+++++++++++                                       | 21% ~00s             |++++++++++++                                      | 22% ~00s             |++++++++++++                                      | 23% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++                                     | 26% ~00s             |++++++++++++++                                    | 27% ~00s             |+++++++++++++++                                   | 29% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++                                  | 31% ~00s             |+++++++++++++++++                                 | 32% ~00s             |+++++++++++++++++                                 | 34% ~00s             |++++++++++++++++++                                | 35% ~00s             |+++++++++++++++++++                               | 36% ~00s             |+++++++++++++++++++                               | 38% ~00s             |++++++++++++++++++++                              | 39% ~00s             |+++++++++++++++++++++                             | 40% ~00s             |+++++++++++++++++++++                             | 42% ~00s             |++++++++++++++++++++++                            | 43% ~00s             |+++++++++++++++++++++++                           | 44% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |++++++++++++++++++++++++                          | 47% ~00s             |+++++++++++++++++++++++++                         | 48% ~00s             |+++++++++++++++++++++++++                         | 49% ~00s             |++++++++++++++++++++++++++                        | 51% ~00s             |++++++++++++++++++++++++++                        | 52% ~00s             |+++++++++++++++++++++++++++                       | 53% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++                      | 56% ~00s             |+++++++++++++++++++++++++++++                     | 57% ~00s             |++++++++++++++++++++++++++++++                    | 58% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++                   | 61% ~00s             |++++++++++++++++++++++++++++++++                  | 62% ~00s             |++++++++++++++++++++++++++++++++                  | 64% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |++++++++++++++++++++++++++++++++++                | 66% ~00s             |++++++++++++++++++++++++++++++++++                | 68% ~00s             |+++++++++++++++++++++++++++++++++++               | 69% ~00s             |++++++++++++++++++++++++++++++++++++              | 70% ~00s             |++++++++++++++++++++++++++++++++++++              | 71% ~00s             |+++++++++++++++++++++++++++++++++++++             | 73% ~00s             |++++++++++++++++++++++++++++++++++++++            | 74% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |+++++++++++++++++++++++++++++++++++++++           | 77% ~00s             |+++++++++++++++++++++++++++++++++++++++           | 78% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 79% ~00s             |+++++++++++++++++++++++++++++++++++++++++         | 81% ~00s             |+++++++++++++++++++++++++++++++++++++++++         | 82% ~00s             |++++++++++++++++++++++++++++++++++++++++++        | 83% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 84% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 86% ~00s             |++++++++++++++++++++++++++++++++++++++++++++      | 87% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 88% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++    | 91% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++   | 92% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++   | 94% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++++ | 96% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++++ | 97% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 99% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_de_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot UMAP dimensionality reduction on DE genes — plot_de_umap","title":"Plot UMAP dimensionality reduction on DE genes — plot_de_umap","text":"Plot UMAP dimensionality reduction DE genes","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_de_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot UMAP dimensionality reduction on DE genes — plot_de_umap","text":"","code":"plot_de_umap(data = NULL, color_by = NULL, label = NULL, max_overlaps = NULL)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_de_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot UMAP dimensionality reduction on DE genes — plot_de_umap","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\" color_by string specifying column data used color samples. label string specifying column data used label sample. max_overlaps Maximum number overlaps ggrepel","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_de_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot UMAP dimensionality reduction on DE genes — plot_de_umap","text":"ggplot object","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a distance heatmap — plot_distance","title":"Create a distance heatmap — plot_distance","text":"Plot heatmap show poisson distance count matrix pre-processed data. poisson distance matrix calculated subset wells specify two parameters. specifying group_by column metadata specific treatment interest, poisson distance calculated corresponding wells.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a distance heatmap — plot_distance","text":"","code":"plot_distance(data = NULL, group_by = NULL, treatment = NULL)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a distance heatmap — plot_distance","text":"data Seurat object group_by metadata column name group data treatment specify one treatment group group_by parameter","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a distance heatmap — plot_distance","text":"returns pheatmap object","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a distance heatmap — plot_distance","text":"","code":"data(mini_mac) p <- plot_distance(mini_mac, group_by = \"combined_id\", treatment = \"DMSO_0\") #> tidyseurat says: A data frame is returned for independent data analysis."},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_gene_ranks.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a knee plot A knee plot to show total number of total read counts for each gene in a given treatment group — plot_gene_ranks","title":"Generate a knee plot A knee plot to show total number of total read counts for each gene in a given treatment group — plot_gene_ranks","text":"Generate knee plot knee plot show total number total read counts gene given treatment group","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_gene_ranks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a knee plot A knee plot to show total number of total read counts for each gene in a given treatment group — plot_gene_ranks","text":"","code":"plot_gene_ranks(data = NULL, group_by = NULL, samples = NULL, scale = TRUE)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_gene_ranks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a knee plot A knee plot to show total number of total read counts for each gene in a given treatment group — plot_gene_ranks","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\". group_by column specifies treatment group input data samples Treatment group scale Boolean statement log10 transformation axes","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_gene_ranks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a knee plot A knee plot to show total number of total read counts for each gene in a given treatment group — plot_gene_ranks","text":"ggplot object knee plot","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_gene_ranks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a knee plot A knee plot to show total number of total read counts for each gene in a given treatment group — plot_gene_ranks","text":"","code":"data(\"mini_mac\") p <- plot_gene_ranks(mini_mac,group_by = \"combined_id\",  samples = \"Staurosporine_10\", scale = TRUE)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_mds.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot MDS dimensionality reduction — plot_mds","title":"Plot MDS dimensionality reduction — plot_mds","text":"function uses limma's plot MDS visualise groupoing data points. function used gene.selection = \"common\" increase speed.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_mds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot MDS dimensionality reduction — plot_mds","text":"","code":"plot_mds(   data = NULL,   group_by = NULL,   label = NULL,   max_overlaps = NULL,   n_labels = 50 )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_mds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot MDS dimensionality reduction — plot_mds","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\" group_by string specifying column data used color samples. label string specifying column data used label sample. max_overlaps Maximum number overlaps ggrepel n_labels integer specifying number labels show, based PC1 PC2 extremeness. Default set 50","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_mds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot MDS dimensionality reduction — plot_mds","text":"ggplot object","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_mds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot MDS dimensionality reduction — plot_mds","text":"","code":"data(\"mini_mac\") p <- plot_mds(mini_mac, group_by = \"Sample_type\", label = \"Sample_type\",  n_labels = 10, max_overlaps = 100) #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis."},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_metadata_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Heatmaps of Metadata Function — plot_metadata_heatmap","title":"Generate Heatmaps of Metadata Function — plot_metadata_heatmap","text":"function generates heatmaps metadata, either existing object CSV file.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_metadata_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Heatmaps of Metadata Function — plot_metadata_heatmap","text":"","code":"plot_metadata_heatmap(   metadata = NULL,   metadata_file = NULL,   legend = TRUE,   output_file = NULL,   plate = NULL )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_metadata_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Heatmaps of Metadata Function — plot_metadata_heatmap","text":"metadata Metadata object class data frame, matrix tibble. metadata_file Path metadata CSV file path. legend character value (\"show\" \"none\") control whether display legends. output_file file path name save heatmaps graph (png, pdf, jpg). plate Plate plotted. Default first plate.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_metadata_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Heatmaps of Metadata Function — plot_metadata_heatmap","text":"Displays plot ggplot object saves file (jpg, png, pdf).","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_metadata_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Heatmaps of Metadata Function — plot_metadata_heatmap","text":"","code":"#Example metadata_file_path <- system.file(\"extdata\", \"PMMSq033_metadata.csv\", package = \"macpie\") metadata<-read_metadata(metadata_file_path) plot_metadata_heatmap(metadata=metadata)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_multi_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate heatmap of DE genes from multiple treatments This is the function to generate a heatmap of DE genes from running compute_multi_DE that shared by more than one treatment group. There are a few options available to help you to extract shared DE genes. — plot_multi_de","title":"Generate heatmap of DE genes from multiple treatments This is the function to generate a heatmap of DE genes from running compute_multi_DE that shared by more than one treatment group. There are a few options available to help you to extract shared DE genes. — plot_multi_de","text":"Generate heatmap DE genes multiple treatments function generate heatmap DE genes running compute_multi_DE shared one treatment group. options available help extract shared DE genes.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_multi_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate heatmap of DE genes from multiple treatments This is the function to generate a heatmap of DE genes from running compute_multi_DE that shared by more than one treatment group. There are a few options available to help you to extract shared DE genes. — plot_multi_de","text":"","code":"plot_multi_de(   data = NULL,   group_by = NULL,   value = NULL,   p_value_cutoff = 0.01,   direction = \"both\",   n_genes = 10,   control = \"DMSO_0\",   by = \"fc\",   gene_list = NULL )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_multi_de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate heatmap of DE genes from multiple treatments This is the function to generate a heatmap of DE genes from running compute_multi_DE that shared by more than one treatment group. There are a few options available to help you to extract shared DE genes. — plot_multi_de","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\". group_by column specifies treatment group input data value use logCPM, log2FC metric heatmap p_value_cutoff Cutoff adjusted p-value (column p_value_adj), default 0.01 direction Direction select regulated genes directions n_genes Top n genes extracted treatment comparison control control group included final heatmap, usually DMSO_0 Extract top n genes either absolute fold change adjusted p-value gene_list External list genes plot heatmap ","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_multi_de.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate heatmap of DE genes from multiple treatments This is the function to generate a heatmap of DE genes from running compute_multi_DE that shared by more than one treatment group. There are a few options available to help you to extract shared DE genes. — plot_multi_de","text":"pheatmap object","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_multi_de.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate heatmap of DE genes from multiple treatments This is the function to generate a heatmap of DE genes from running compute_multi_DE that shared by more than one treatment group. There are a few options available to help you to extract shared DE genes. — plot_multi_de","text":"","code":"data(\"mini_mac\") plot_multi_de(mini_mac,group_by = \"combined_id\",               value = \"log2fC\", p_value_cutoff = 0.01, direction=\"up\",               n_genes = 10, control = \"DMSO_0\", by=\"fc\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_multi_screen_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot multi-screen profile from fgsea results — plot_multi_screen_profile","title":"Plot multi-screen profile from fgsea results — plot_multi_screen_profile","text":"Plot multi-screen profile fgsea results","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_multi_screen_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot multi-screen profile from fgsea results — plot_multi_screen_profile","text":"","code":"plot_multi_screen_profile(   data,   color_by = NULL,   size_by = \"logPadj\",   label_angle = 90 )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_multi_screen_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot multi-screen profile from fgsea results — plot_multi_screen_profile","text":"data tidyseurat object screen_profile @tools slot. color_by string specifying column screen_profile use color (default: automatically chosen). size_by string specifying column screen_profile use point size (default: log10(padj)). label_angle Angle x-axis labels (default: 90).","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_multi_screen_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot multi-screen profile from fgsea results — plot_multi_screen_profile","text":"ggplot object","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_multi_screen_profile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot multi-screen profile from fgsea results — plot_multi_screen_profile","text":"","code":"data(mini_mac) mini_mac <- compute_multi_screen_profile(mini_mac, target = \"Staurosporine_10\") plot_multi_screen_profile(mini_mac, color_by = \"Sample_type\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_plate_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot MAC-seq data on a plate layout — plot_plate_layout","title":"Plot MAC-seq data on a plate layout — plot_plate_layout","text":"Plot MAC-seq data plate layout","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_plate_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot MAC-seq data on a plate layout — plot_plate_layout","text":"","code":"plot_plate_layout(   data = NULL,   metric = NULL,   annotation = NULL,   midpoint = NULL )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_plate_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot MAC-seq data on a plate layout — plot_plate_layout","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\" metric string specifying column data used color sample. Defaults \"nCount_RNA\". annotation string specifying column data used label sample. Defaults \"Treatment_1\". midpoint value used heatmap scale bar, can either mean value median value.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_plate_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot MAC-seq data on a plate layout — plot_plate_layout","text":"ggplot object","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_plate_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot MAC-seq data on a plate layout — plot_plate_layout","text":"","code":"data(\"mini_mac\") p <- plot_plate_layout(mini_mac, metric = \"nCount_RNA\", annotation = \"Treatment_1\", midpoint = \"mean\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_qc_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a lollipop chart — plot_qc_metrics","title":"Create a lollipop chart — plot_qc_metrics","text":"Plot QC metrics standard deviation (sd), median absolute deviation (MAD), interquartile range (IQR), Z score read counts per condition/group interest lollipop chart","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_qc_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a lollipop chart — plot_qc_metrics","text":"","code":"plot_qc_metrics(stats_summary, group_by, metrics)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_qc_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a lollipop chart — plot_qc_metrics","text":"stats_summary stats_summary list group_by metadata column name group data metrics specify one QC metrics stats_summary calculated QC_metrics","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_qc_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a lollipop chart — plot_qc_metrics","text":"ggplot object lollipop chart specified QC metrics.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_qc_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a lollipop chart — plot_qc_metrics","text":"","code":"data(\"mini_mac\") qc_stats <- compute_qc_metrics(mini_mac, group_by = \"combined_id\", order_by = \"median\") plot_qc_metrics(qc_stats, group_by = \"combined_id\", metrics = \"sd_value\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_qc_metrics_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a heatmap for multiple QC metrics — plot_qc_metrics_heatmap","title":"Create a heatmap for multiple QC metrics — plot_qc_metrics_heatmap","text":"Plots multiple QC metrics stats_summary heatmap, normalizing values 0 1.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_qc_metrics_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a heatmap for multiple QC metrics — plot_qc_metrics_heatmap","text":"","code":"plot_qc_metrics_heatmap(   stats_summary = NULL,   group_by = NULL,   metrics = NULL,   order_by = NULL )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_qc_metrics_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a heatmap for multiple QC metrics — plot_qc_metrics_heatmap","text":"stats_summary list containing QC metrics. group_by metadata column name group data. metrics vector QC metrics visualize. order_by metric use sorting group_by values.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_qc_metrics_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a heatmap for multiple QC metrics — plot_qc_metrics_heatmap","text":"ggplot object representing heatmap QC metrics.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_qc_metrics_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a heatmap for multiple QC metrics — plot_qc_metrics_heatmap","text":"","code":"data(\"mini_mac\") qc_stats <- compute_qc_metrics(mini_mac, group_by = \"combined_id\", order_by = \"median\") plot_qc_metrics_heatmap(stats_summary = qc_stats$stats_summary, group_by = \"combined_id\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_rle.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an RLE Plot — plot_rle","title":"Create an RLE Plot — plot_rle","text":"function generates Relative Log Expression (RLE) plot visualizing distribution expression data normalization log transformation.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_rle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an RLE Plot — plot_rle","text":"","code":"plot_rle(   data,   barcodes = NULL,   label_column = NULL,   labels = NULL,   log = TRUE,   batch = NULL,   normalisation = NULL,   spikes = NULL,   num_cores = NULL )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_rle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an RLE Plot — plot_rle","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\". barcodes vector sample barcodes corresponding Cells(seurat_object). label_column metadata column name group barcodes. labels vector labels length 'barcodes\" group barcodes. log logical value indicating whether data log-transformed. Defaults TRUE. batch Either empty, single value, vector corresponding number samples. normalisation One \"raw\", \"logNorm\", \"cpm\", \"clr\", \"SCT\", \"DESeq2\", \"edgeR\", \"RUVg\", \"RUVs\", \"RUVr\", \"limma_voom\", \"limma_trend\", \"zinb\". empty, defaults raw. spikes List genes use spike controls RUVg num_cores Number cores edgeR zinb calculations","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_rle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an RLE Plot — plot_rle","text":"ggplot object representing RLE plot.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_rle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an RLE Plot — plot_rle","text":"function performs following steps: Ensures integrity input data Log-transforms data Computes RLE subtracting row medians value. Creates boxplot using ggplot2 visualize distribution RLE values.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_rle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an RLE Plot — plot_rle","text":"","code":"data(\"mini_mac\") p <- plot_rle(mini_mac, label_column = \"Row\") #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis."},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_volcano.html","id":null,"dir":"Reference","previous_headings":"","what":"Volcano plot of differentially expressed genes — plot_volcano","title":"Volcano plot of differentially expressed genes — plot_volcano","text":"Volcano plot differentially expressed genes","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_volcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Volcano plot of differentially expressed genes — plot_volcano","text":"","code":"plot_volcano(   top_table,   x = \"log2FC\",   y = \"p_value_adj\",   fdr_cutoff = 0.05,   max.overlaps = 30 )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_volcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Volcano plot of differentially expressed genes — plot_volcano","text":"top_table Data frame columns contain FC P-values, default log2FC p_value_adj x Name column logFC values y Name column adjusted p-values fdr_cutoff Cutoff labels plotted based adjusted p-values max.overlaps Maximum number overlaps points package ggrepel","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_volcano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Volcano plot of differentially expressed genes — plot_volcano","text":"ggplot object","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_volcano.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Volcano plot of differentially expressed genes — plot_volcano","text":"","code":"data(\"mini_mac\") top_table <- mini_mac@tools$diff_exprs$Staurosporine_10 plot_volcano(top_table = top_table, max.overlaps = 100) #> Warning: ggrepel: 353 unlabeled data points (too many overlaps). Consider increasing max.overlaps"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/read_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Metadata from a File — read_metadata","title":"Read Metadata from a File — read_metadata","text":"function reads metadata specified file, validates file format, extracts columns match predefined set column names.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/read_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Metadata from a File — read_metadata","text":"","code":"read_metadata(   file_path,   header = TRUE,   sep = \",\",   string_as_factors = FALSE,   predefined_columns = c(\"Plate_ID\", \"Well_ID\", \"Row\", \"Column\", \"Species\",     \"Treatment_1\", \"Concentration_1\", \"Sample_type\", \"Barcode\") )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/read_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Metadata from a File — read_metadata","text":"file_path character string specifying path metadata file. file must CSV Excel format. header Logical. TRUE, first row file used column names. Defaults TRUE. sep character string specifying column separator CSV files. Defaults \",\". string_as_factors Logical. TRUE, character columns data frame converted factors. Defaults FALSE. predefined_columns character vector column names match file. Defaults predefined set column names: c(\"Plate_ID\", \"Well_ID\", \"Row\", \"Column\", \"Species\", \"Cell_type\", \"Model_type\",   \"Time\", \"Unit\", \"Treatment_1\", \"Concentration_1\", \"Unit_1\", \"Sample_type\", \"Barcode\", \"Project\").","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/read_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Metadata from a File — read_metadata","text":"data frame containing matched columns least one predefined column found. Returns NULL prints error message predefined columns found.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/read_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read Metadata from a File — read_metadata","text":"function first checks file exists validates format (CSV Excel). attempts read file match column names predefined set column names. Supported file formats include: CSV files .csv extension. Excel files .xls .xlsx extensions (requires readxl package).","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/read_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Metadata from a File — read_metadata","text":"","code":"# Example CSV file file_path <- system.file(\"/extdata/PMMSq033_metadata.csv\", package = \"macpie\") result <- read_metadata(file_path)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/select_robust_controls.html","id":null,"dir":"Reference","previous_headings":"","what":"Select high-quality control replicates via TMMwsp log-CPM correlation — select_robust_controls","title":"Select high-quality control replicates via TMMwsp log-CPM correlation — select_robust_controls","text":"given control group (e.g., DMSO) specific plate/batch, function ranks samples average correlation (Fisher z-averaged) samples using edgeR's TMMwsp-normalized log2-CPM. returns ranking (optionally) plots per-sample expression distributions sample-sample correlation heatmaps.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/select_robust_controls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select high-quality control replicates via TMMwsp log-CPM correlation — select_robust_controls","text":"","code":"select_robust_controls(   data,   samples,   orig_ident,   cpm_filter = 1,   min_samps = 16,   corr_method = c(\"spearman\", \"pearson\"),   top_n = 5,   make_plots = TRUE )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/select_robust_controls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select high-quality control replicates via TMMwsp log-CPM correlation — select_robust_controls","text":"data tidyseurat object containing RNA assay counts layer. samples control/treatment label keep column samples (e.g., \"CB_43_EP73_0\"). cells/samples label considered. orig_ident Character scalar: plate/batch identifier keep (e.g., \"VH02012942\"). cells/samples batch considered. cpm_filter Numeric scalar; CPM threshold used gene filtering prior normalization (default 1). min_samps Integer; gene must expressed (CPM > cpm_filter) least many samples retained (default 16). corr_method Correlation type used ranking; one c(\"spearman\",\"pearson\") (default \"spearman\"). top_n Integer; number top-ranked samples report topN. Ties cutoff kept (default 5). make_plots Logical; TRUE, print log2-CPM boxplot Pearson/Spearman correlation heatmaps (default TRUE).","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/select_robust_controls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select high-quality control replicates via TMMwsp log-CPM correlation — select_robust_controls","text":"list elements: subset_obj: Seurat object subset used analysis. dge: filtered edgeR::DGEList log_cpm_tmm: Matrix TMMwsp log2-CPM. boxplot_df: Long-format data frame used boxplot (gene, sample, log_cpm). cor_pearson: Sample-sample Pearson correlation matrix. cor_spearman: Sample-sample Spearman correlation matrix. ranking_method: correlation method used ranking. scores_mean_to_others: Named numeric vector mean Fisher-z back-transformed correlations (higher = better), sorted decreasing. topN: Named numeric vector top-ranked samples (ties cutoff kept).","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/select_robust_controls.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select high-quality control replicates via TMMwsp log-CPM correlation — select_robust_controls","text":"Workflow: Subset specified samples orig_ident (plate/batch). Build edgeR::DGEList, filter lowly expressed genes using CPM min_samps. Normalize TMMwsp compute log2-CPM. Rank samples mean Fisher z transformed correlation samples (according corr_method). Return ranking, correlation matrices, normalized matrix, (optionally) plots QC. Column names counts matrix rewritten \"<orig.ident>_<Well_ID>\" easier visual inspection plots.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/select_robust_controls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select high-quality control replicates via TMMwsp log-CPM correlation — select_robust_controls","text":"","code":"data(mini_mac) res <- select_robust_controls(mini_mac,samples = \"DMSO_0\", orig_ident = \"PMMSq033_mini\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/subsample_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Subsample genes (fast helper function for zero-inflation checks) — subsample_genes","title":"Subsample genes (fast helper function for zero-inflation checks) — subsample_genes","text":"Quickly subsample specified number genes Seurat object return smaller Seurat object containing selected features original wells/samples. lightweight convenience wrapper around seqgendiff::select_counts() intended creating small working object run check_zeroinflation() (similar diagnostics) rapidly.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/subsample_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subsample genes (fast helper function for zero-inflation checks) — subsample_genes","text":"","code":"subsample_genes(data, ngene = 100, gselect = \"random\", seed = 1)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/subsample_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subsample genes (fast helper function for zero-inflation checks) — subsample_genes","text":"data Seurat object (v4 v5) counts assay \"RNA\". ngene Integer. Number genes keep (must <= total genes). gselect Gene-selection strategy used seqgendiff::select_counts(). Defaults \"random\". seed Integer random seed reproducibility.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/subsample_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subsample genes (fast helper function for zero-inflation checks) — subsample_genes","text":"Seurat object containing subsampled genes original wells/samples.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/subsample_genes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subsample genes (fast helper function for zero-inflation checks) — subsample_genes","text":"","code":"data(mini_mac) subsample_genes(mini_mac, ngene = 50, gselect = \"random\", seed = 1 ) #> # A Seurat-tibble abstraction: 308 × 21 #> # Features=50 | Cells=308 | Active assay=RNA | Assays=RNA #>    .cell      orig.ident   nCount_RNA nFeature_RNA Plate_ID Well_ID Row   Column #>    <chr>      <fct>             <dbl>        <int> <chr>    <chr>   <chr>  <int> #>  1 AACAGGCAAT PMMSq033_mi…         65           29 PMMSq033 B02     B          2 #>  2 AACCAGCCAG PMMSq033_mi…        522           97 PMMSq033 C02     C          2 #>  3 AACCAGTTGA PMMSq033_mi…        415           82 PMMSq033 D02     D          2 #>  4 AACCGGCGTA PMMSq033_mi…        578           93 PMMSq033 E02     E          2 #>  5 AACCTAGTCC PMMSq033_mi…        286           72 PMMSq033 F02     F          2 #>  6 AACTCTACAC PMMSq033_mi…        515           96 PMMSq033 G02     G          2 #>  7 AACTGTGTCA PMMSq033_mi…        408           87 PMMSq033 H02     H          2 #>  8 AAGATGTCCA PMMSq033_mi…        332           78 PMMSq033 I02     I          2 #>  9 AAGCATATGG PMMSq033_mi…        498           92 PMMSq033 J02     J          2 #> 10 AAGCTCACCT PMMSq033_mi…        539          102 PMMSq033 K02     K          2 #> # ℹ 298 more rows #> # ℹ 13 more variables: Species <chr>, Cell_type <chr>, Model_type <chr>, #> #   Time <fct>, Unit <chr>, Treatment_1 <chr>, Concentration_1 <fct>, #> #   Unit_1 <chr>, Sample_type <chr>, Project <chr>, combined_id <chr>, #> #   percent.mt <dbl>, percent.ribo <dbl>"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/summarise_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a table to summarise gene numbers from a differential expression test. — summarise_de","title":"Generate a table to summarise gene numbers from a differential expression test. — summarise_de","text":"Generate table summarise gene numbers differential expression test.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/summarise_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a table to summarise gene numbers from a differential expression test. — summarise_de","text":"","code":"summarise_de(   top_table,   lfc_threshold = 1,   padj_threshold = 0.01,   multi = FALSE,   group_by = \"combined_id\" )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/summarise_de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a table to summarise gene numbers from a differential expression test. — summarise_de","text":"top_table data table showing results compute_single_de lfc_threshold Threshold log2FC padj_threshold Threshold adjusted p value multi indicate summarise single de comparison multi de comparison group_by Name column defines groups replicates","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/summarise_de.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a table to summarise gene numbers from a differential expression test. — summarise_de","text":"tibble summarising number genes significantly","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/summarise_de.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a table to summarise gene numbers from a differential expression test. — summarise_de","text":"","code":"data(\"mini_mac\") top_table <- mini_mac@tools$diff_exprs$Staurosporine_10 summarise_de(top_table, lfc_threshold = 1, padj_threshold = 0.05) #> # A tibble: 1 × 6 #>   Total_genes_tested Significantly_upregulated Significantly_downregulated #>                <int>                     <int>                       <int> #> 1                500                       361                          26 #> # ℹ 3 more variables: Total_significant <int>, Padj_threshold <dbl>, #> #   Log2FC_threshold <dbl> summarise_de(mini_mac, lfc_threshold = 1,  padj_threshold = 0.01, multi=TRUE) #> # A tibble: 15 × 7 #>    combined_id  Total_genes_tested Significantly_upregu…¹ Significantly_downre…² #>    <chr>                     <int>                  <int>                  <int> #>  1 Anastrozole…                500                      0                      0 #>  2 Camptotheci…                500                    363                     15 #>  3 Capivaserti…                500                      0                      0 #>  4 Ceralaserti…                500                      0                      0 #>  5 Chlorambuci…                500                      0                      0 #>  6 Cytarabine_…                500                      0                      0 #>  7 Erlotinib_h…                500                      2                      0 #>  8 Etoposide_10                500                      2                      0 #>  9 Fluvastatin…                500                      0                      0 #> 10 Mk.2206_dih…                500                      0                      0 #> 11 Nutlin.3a_10                500                      2                      0 #> 12 Paclitaxel_…                500                      8                      1 #> 13 Sb590885_10                 500                      0                      0 #> 14 Staurospori…                500                    359                     14 #> 15 Vinblastine…                500                      3                      0 #> # ℹ abbreviated names: ¹​Significantly_upregulated, ²​Significantly_downregulated #> # ℹ 3 more variables: Total_significant <int>, padj_threshold <dbl>, #> #   Log2FC_threshold <dbl>"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/validate_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and clean the metadata file generated from findmetadata function — validate_metadata","title":"Check and clean the metadata file generated from findmetadata function — validate_metadata","text":"checks column completeness removes special characters spaces comma except Treatment_1 replaces special characters spaces comma underscore generates quick summary different treatment sample groups metadata","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/validate_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and clean the metadata file generated from findmetadata function — validate_metadata","text":"","code":"validate_metadata(metadata)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/validate_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and clean the metadata file generated from findmetadata function — validate_metadata","text":"metadata output findmetadata function","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/validate_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and clean the metadata file generated from findmetadata function — validate_metadata","text":"list containing: cleaned_metadata cleaned metadata data frame validation modifications. summary_table summary table grouped Plate_ID, showing count unique values selected columns.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/validate_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check and clean the metadata file generated from findmetadata function — validate_metadata","text":"function validates metadata dataset, cleans specific fields, checks issues, generates summary table grouped Plate_ID.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/validate_metadata.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check and clean the metadata file generated from findmetadata function — validate_metadata","text":"Mark Li","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/validate_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check and clean the metadata file generated from findmetadata function — validate_metadata","text":"","code":"# \\donttest{ # Example CSV file file_path <- system.file(\"/extdata/PMMSq033_metadata.csv\", package = \"macpie\") metadata <- read_metadata(file_path) metadt_qc <- validate_metadata(metadata) #>  #> Validation Issues: #> smiles: Contains special characters. #> smiles: Contains special characters. #> Model_type: Contains special characters. #> Compound_ID: Contains special characters. #>  #> Generating summary table grouped by Plate_ID... # }"},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/news/index.html","id":"new-functions-1-1-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"macpie 1.1.0","text":"Initial CRAN release macpie: scalable R toolkit high-throughput transcriptomic (HTTr) analysis. Quality control metrics: validate_metadata(), compute_qc_metrics(), plot_rle, plot_mds(), etc. Differential expression: compute_single_de(), compute_multi_de(), plot_volcano(), plot_counts(). Support chemical structure processing: compute_chem_descriptors(), compute_smiles(), compute_single_dose_response(), compute_multi_screen_profile().","code":""}]
