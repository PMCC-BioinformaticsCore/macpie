[{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 macpie authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Cross platform compatibility","text":"vignette demonstrate adapt macpie’s MACseq workflows high-throughput transcriptomic profiling (HTTr) data format DRUGseq. experimental design DRUGseq plates bit different MACseq. MACseq experimental design, prefer replicate wells plate. DRUGseq, replicates different plates. Key points: vignette cover following two parts: 1. Converting DRUGseq plate Mapping DRUGseq plate layouts macpie’s metadata format. Validating metadata format content. basic QC steps QC vignette. 2. Converting multiple DRUGseq plates Importing multiple plates single macpie object. Detecting batch effects across plates QC section. Performing differential expression pathway enrichment tests merged data limma-voom correction. DRUGseq dataset large-scale drug screening dataset includes large set small molecules (N = 4,343) tested U2OS cells. dataset retrieved Zenodo (Ozer et al., 2024).","code":"library(macpie) library(tibble) library(stringr) library(pheatmap) library(ggiraph) library(tidyseurat) #> Loading required package: ttservice #>  #> Attaching package: 'ttservice' #> The following objects are masked from 'package:macpie': #>  #>     bind_cols, bind_rows, plot_ly #> Loading required package: SeuratObject #> Loading required package: sp #>  #> Attaching package: 'SeuratObject' #> The following objects are masked from 'package:base': #>  #>     intersect, t #> ======================================== #> tidyseurat version 0.8.0 #> If you use TIDYSEURAT in published research, please cite: #>  #> Mangiola et al. Interfacing Seurat with the R tidy universe. Bioinformatics 2021. #>  #> This message can be suppressed by: #>   suppressPackageStartupMessages(library(tidyseurat)) #>    #> To restore the Seurat default display use options(\"restore_Seurat_show\" = TRUE)  #> ======================================== #>  #> Attaching package: 'tidyseurat' #> The following object is masked from 'package:ttservice': #>  #>     plot_ly library(purrr) #>  #> Attaching package: 'purrr' #> The following object is masked from 'package:testthat': #>  #>     is_null"},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"metadata-import-and-validation","dir":"Articles","previous_headings":"Converting a DRUGseq plate to a macpie object","what":"1. Metadata import and validation","title":"Cross platform compatibility","text":"Experimental background metadata files Novartis_drugseq_U2OS_MoABox/ DRUGseq Github data can downloaded ZENODO link: Novartis/DRUG-seq U2OS MoABox Dataset Creators. metadata contains plate well-level information 59,904 samples, read metadata plate VH02012944, plate use vignette.","code":"plate_well_metadata <- read.csv(paste0(dir,\"DRUGseqData/DRUGseq_U2OS_MoABox_plate_wells_metadata_public.txt\"), sep = \"\\t\") metadata <- plate_well_metadata%>%filter(plate_barcode == \"VH02012944\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"convert-drugseq-metadata-to-macpie-metadata-format","dir":"Articles","previous_headings":"Converting a DRUGseq plate to a macpie object > 1. Metadata import and validation","what":"1.1 Convert DRUGseq metadata to macpie metadata format","title":"Cross platform compatibility","text":"example DRUGseq plate content format also available DRUGseq Github. First, can look content column names: Next, convert relevant columns DRUGseq metadata macpie metadata format.","code":"head(metadata) #>   analysis_id investigation_id    investigation_name batch_id plate_replicate #> 1          24             2384 DRUG-seq_CBT_U2OS_MoA       24               2 #> 2          24             2384 DRUG-seq_CBT_U2OS_MoA       24               2 #> 3          24             2384 DRUG-seq_CBT_U2OS_MoA       24               2 #> 4          24             2384 DRUG-seq_CBT_U2OS_MoA       24               2 #> 5          24             2384 DRUG-seq_CBT_U2OS_MoA       24               2 #> 6          24             2384 DRUG-seq_CBT_U2OS_MoA       24               2 #>   experiment_id              plate_name plate_barcode plate_index well_id #> 1          6487 U-2_OS_MoA_batch24_rep2    VH02012944    TTACAGGA     A01 #> 2          6487 U-2_OS_MoA_batch24_rep2    VH02012944    TTACAGGA     J01 #> 3          6487 U-2_OS_MoA_batch24_rep2    VH02012944    TTACAGGA     K01 #> 4          6487 U-2_OS_MoA_batch24_rep2    VH02012944    TTACAGGA     L01 #> 5          6487 U-2_OS_MoA_batch24_rep2    VH02012944    TTACAGGA     M01 #> 6          6487 U-2_OS_MoA_batch24_rep2    VH02012944    TTACAGGA     N01 #>   well_index col row well_type cell_line_name cell_line_ncn concentration unit #> 1 AACAAGGTAC   1   1        SA         U-2 OS     FH55-48QE            10   uM #> 2 AAGATCGGCG   1  10        SA         U-2 OS     FH55-48QE            10   uM #> 3 AAGCGATGTT   1  11        SA         U-2 OS     FH55-48QE            10   uM #> 4 AAGCGTTCAG   1  12        SA         U-2 OS     FH55-48QE            10   uM #> 5 AAGGTCTGGA   1  13        SA         U-2 OS     FH55-48QE            10   uM #> 6 AAGTTAGCGC   1  14        SA         U-2 OS     FH55-48QE            10   uM #>   hours_post_treatment biosample_id external_biosample_id cmpd_sample_id #> 1                   24      2018772            KA-74-VF86     BA-86-AL61 #> 2                   24      2018988            AB-94-KK84     BB-79-AG41 #> 3                   24      2019012            OD-91-CJ88     BB-41-XE67 #> 4                   24      2019036            AE-90-GO84     ED-91-LA02 #> 5                   24      2019060            MF-99-JS89     DF-11-IL69 #> 6                   24      2019084            UB-01-LS89     LE-80-BM08 #>              plate_well #> 1 VH02012944_AACAAGGTAC #> 2 VH02012944_AAGATCGGCG #> 3 VH02012944_AAGCGATGTT #> 4 VH02012944_AAGCGTTCAG #> 5 VH02012944_AAGGTCTGGA #> 6 VH02012944_AAGTTAGCGC #extract relevant columns from DRUGseq plate  macpie_metadata <- metadata %>%   select(plate_barcode, well_id, well_index, row, col, well_type, cell_line_name, concentration, unit, hours_post_treatment, cmpd_sample_id) %>%   mutate(     Plate_ID = plate_barcode,     Well_ID = well_id,     Barcode = well_index,     Cell_type = \"U2OS\",     Unit_1 = unit,      Treatment_1 = cmpd_sample_id,     Sample_type = well_type,     Concentration_1 = as.numeric(concentration),     Row = LETTERS[row],     Column = as.integer(col),     Time = as.factor(hours_post_treatment),     Unit = \"h\",     Species = \"human\",     Model_type = \"2D_adherent\",     Sample_type = if_else(well_type == \"SA\" & col == 24,                                   \"Positive Control\",                                   well_type)  )  #Column names for macpie col_names <- c(\"Plate_ID\", \"Well_ID\", \"Row\", \"Column\", \"Species\",                \"Cell_type\",  \"Model_type\", \"Time\", \"Unit\", \"Treatment_1\",                 \"Concentration_1\", \"Unit_1\",  \"Sample_type\", \"Barcode\") macpie_metadata <- macpie_metadata[, col_names] head(macpie_metadata) #>     Plate_ID Well_ID Row Column Species Cell_type  Model_type Time Unit #> 1 VH02012944     A01   A      1   human      U2OS 2D_adherent   24    h #> 2 VH02012944     J01   J      1   human      U2OS 2D_adherent   24    h #> 3 VH02012944     K01   K      1   human      U2OS 2D_adherent   24    h #> 4 VH02012944     L01   L      1   human      U2OS 2D_adherent   24    h #> 5 VH02012944     M01   M      1   human      U2OS 2D_adherent   24    h #> 6 VH02012944     N01   N      1   human      U2OS 2D_adherent   24    h #>   Treatment_1 Concentration_1 Unit_1 Sample_type    Barcode #> 1  BA-86-AL61              10     uM          SA AACAAGGTAC #> 2  BB-79-AG41              10     uM          SA AAGATCGGCG #> 3  BB-41-XE67              10     uM          SA AAGCGATGTT #> 4  ED-91-LA02              10     uM          SA AAGCGTTCAG #> 5  DF-11-IL69              10     uM          SA AAGGTCTGGA #> 6  LE-80-BM08              10     uM          SA AAGTTAGCGC"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"validate-drugseq-metadata","dir":"Articles","previous_headings":"Converting a DRUGseq plate to a macpie object > 1. Metadata import and validation","what":"1.2 Validate DRUGseq metadata","title":"Cross platform compatibility","text":"Now, can test metadata validation function ensure metadata correct format contains required columns. Visualizing inspecting metadata layout","code":"validate_metadata(macpie_metadata) #>  #> No validation issues found. Metadata is clean. #>  #> Generating summary table grouped by Plate_ID... #>     Plate_ID count_Species count_Cell_type count_Model_type count_Time #> 1 VH02012944             1               1                1          1 #>   count_Unit count_Treatment_1 count_Concentration_1 count_Unit_1 #> 1          1               341                     2            1 #>   count_Sample_type #> 1                 4 plot_metadata_heatmap(macpie_metadata)"},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"import-data","dir":"Articles","previous_headings":"Converting a DRUGseq plate to a macpie object > 2. Quality control","what":"2.1 Import data","title":"Cross platform compatibility","text":"Let’s import one replicate plates VH02012944 batch 24. DRUGseq data downloaded ./Exp_gzip.RData Zenodo link saved Exp_batch24.Rds locally faster loading. batch list plates, plate contains UMI counts matrix corresponding metadata. Quick check UMI counts matrix dimensions first row names: Row names DRUGseq data format “gene_chromosome”. keep gene names macpie data. UMI counts matrix metadata now ready used macpie functions. can create tidySeurat object join metadata. Filtering: previously saved filtered data set, filtered genes < 5 reads least 1 replicate well treatment.","code":"# load(\"DRUGseqData/Exp_gzip.RData\") # batch24 <- Exp$`24` # saveRDS(batch24, file = \"DRUGseqData/Exp_batch24.Rds\") batch24 <- readRDS(paste0(dir,\"DRUGseqData/Exp_batch24.Rds\")) data <- batch24$VH02012944 counts <- data$UMI.counts colnames(counts) <- str_remove_all(colnames(counts), \"VH02012944_\") dim(data$UMI.counts) #> [1] 59594   384 rownames(data$UMI.counts)[1:10] #>  [1] \"DUX4L9,grch38_4\"      \"AC010378.2,grch38_5\"  \"AL136295.5,grch38_14\" #>  [4] \"AC106786.1,grch38_5\"  \"AC138956.2,grch38_5\"  \"MTND2P40,grch38_19\"   #>  [7] \"AC104109.2,grch38_5\"  \"RNU6-1263P,grch38_3\"  \"AC243972.3,grch38_14\" #> [10] \"COX6B1P5,grch38_4\" counts <- rownames_to_column(as.data.frame(counts), var= \"gene_id\") %>%   separate(gene_id, into = c(\"gene_name\", \"chrom\"), sep = \",\")  counts[1:10,1:5] #>     gene_name     chrom CGGAGATTGG ACACCGAATT AGCCACTAGC #> 1      DUX4L9  grch38_4          0          0          0 #> 2  AC010378.2  grch38_5          0          0          0 #> 3  AL136295.5 grch38_14          4          2          9 #> 4  AC106786.1  grch38_5          0          0          0 #> 5  AC138956.2  grch38_5          0          0          0 #> 6    MTND2P40 grch38_19          0          0          0 #> 7  AC104109.2  grch38_5          0          0          0 #> 8  RNU6-1263P  grch38_3          0          0          0 #> 9  AC243972.3 grch38_14          0          0          0 #> 10   COX6B1P5  grch38_4          0          0          0 counts$gene_name <- make.unique(counts$gene_name) counts <- counts %>%   select(-chrom) %>%   tibble::column_to_rownames(var = \"gene_name\")  %>%   as.matrix() as_mac<- CreateSeuratObject(counts = counts,                                       assay = \"RNA\",                                       project = \"VH02012944\") #> Warning: Feature names cannot have underscores ('_'), replacing with dashes #> ('-') #> Warning: Data is of class matrix. Coercing to dgCMatrix. as_mac<- as_mac%>% inner_join(macpie_metadata, by = c(\".cell\"=\"Barcode\")) # as_mac <- filter_genes_by_expression(as_mac,  #                                      group_by = \"Treatment_1\", #                                      min_counts = 5, #                                      min_samples = 1) as_mac <- readRDS(paste0(dir, \"/DRUGseqData/macpie_filtered_VH02012944.rds\"))"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"visualize-plate-layout","dir":"Articles","previous_headings":"Converting a DRUGseq plate to a macpie object > 2. Quality control","what":"2.2 Visualize plate layout","title":"Cross platform compatibility","text":"Now, can check UMI counts sample types wells. can check common QC plots Seurat package visualise number genes, reads, percentage mitochondrial ribosomal genes per sample.","code":"p <- plot_plate_layout(as_mac, \"nCount_RNA\", \"Sample_type\") girafe(ggobj = p,    fonts = list(sans = \"sans\"),   options = list(     opts_hover(css = \"stroke:black; stroke-width:0.8px;\")  # <- slight darkening   )) # Calculate percent of mitochondrial and ribosomal genes as_mac[[\"percent.mt\"]] <- PercentageFeatureSet(as_mac, pattern = \"^mt-|^MT-\") as_mac[[\"percent.ribo\"]] <- PercentageFeatureSet(as_mac, pattern = \"^Rp[slp][[:digit:]]|^Rpsa|^RP[SLP][[:digit:]]|^RPSA\")  # Example of a function from Seurat QC  VlnPlot(as_mac, features = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent.mt\", \"percent.ribo\"),          ncol = 4, group.by = \"Sample_type\") &    scale_fill_manual(values = macpie_colours$discrete)  #> Warning: Default search for \"data\" layer in \"RNA\" assay yielded no results; #> utilizing \"counts\" layer instead. #> Warning: The `slot` argument of `FetchData()` is deprecated as of SeuratObject 5.0.0. #> ℹ Please use the `layer` argument instead. #> ℹ The deprecated feature was likely used in the Seurat package. #>   Please report the issue at <https://github.com/satijalab/seurat/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> Warning: `PackageCheck()` was deprecated in SeuratObject 5.0.0. #> ℹ Please use `rlang::check_installed()` instead. #> ℹ The deprecated feature was likely used in the Seurat package. #>   Please report the issue at <https://github.com/satijalab/seurat/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated."},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"sample-grouping","dir":"Articles","previous_headings":"Converting a DRUGseq plate to a macpie object > 2.2 Basic QC metrics","what":"2.2.1 Sample grouping","title":"Cross platform compatibility","text":"Quality control vignette, first visualise grouping samples based top 500 expressed genes limma’s MDS function. Hovering individual dots reveals sample identity grouping.","code":"p <- plot_mds(as_mac, group_by = \"Sample_type\", label = \"Sample_type\", n_labels = 30) #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. girafe(ggobj = p, fonts = list(sans = \"sans\")) #> Warning: ggrepel: 7 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"correction-of-the-batch-effect","dir":"Articles","previous_headings":"Converting a DRUGseq plate to a macpie object > 2.2 Basic QC metrics","what":"2.2.2 Correction of the batch effect","title":"Cross platform compatibility","text":"simplicity, plot RLE (Relative Log Expression) plot different types controls.","code":"plot_rle(as_mac %>% filter(Sample_type !=\"SA\"), label_column = \"Sample_type\", normalisation = \"raw\") #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. plot_rle(as_mac %>% filter(Sample_type !=\"SA\"), label_column = \"Sample_type\", normalisation = \"limma_voom\") #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis."},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"metadata-import-and-validation-1","dir":"Articles","previous_headings":"Coverting multiple DRUGseq plates to a macpie object","what":"1. Metadata import and validation","title":"Cross platform compatibility","text":"part vignette, need three replicate plates batch 24. DRUGseq data downloaded ./Exp_gzip.RData Zenodo link saved Exp_batch24.Rds locally faster loading. batch list plates, plate contains UMI counts matrix corresponding metadata. batch contains 3 replicate plates, UMI counts matrix metadata. Now, convert metadata format macpie metadata format. idea make combined metadata combined count matrix three plates plate_ID labelled.","code":"names(batch24) #> [1] \"VH02012956\" \"VH02012942\" \"VH02012944\" #make a combined metadata for three plates batch24_metadata <- batch24 %>%    map_dfr(~ {     .x$Annotation %>%       mutate(         Plate_ID        = plate_barcode,         Well_ID         = well_id,         Barcode         = paste0(plate_barcode, \"_\", well_index),         Row             = LETTERS[row],         Column          = as.integer(col),         Species         = \"human\",         Cell_type       = \"U2OS\",         Model_type      = \"2D_adherent\",         Time            = as.factor(hours_post_treatment),         Unit            = \"h\",         Treatment_1     = cmpd_sample_id,         Concentration_1 = as.numeric(concentration),         Unit_1          = unit,         Sample_type     = if_else(well_type == \"SA\" & col == 24,                                   \"Positive Control\",                                   well_type)       )   })   batch24_metadata <- batch24_metadata%>%select(-c(batch_id, plate_barcode,plate_index, well_id,                                                  well_index, col, row, biosample_id, external_biosample_id,                                                  cmpd_sample_id, well_type, cell_line_name, cell_line_ncn, concentration, unit, hours_post_treatment, Sample)) # create a combined UMI matrix for 3 plates batch24_counts <- batch24 %>%   map(~ {     .x$UMI.counts %>%       as.data.frame() %>%        rownames_to_column(\"gene_id\") %>%       separate(col = gene_id, into = c(\"gene_name\", \"chrom\"), sep = \",\") %>%       mutate(gene_name = make.unique(gene_name)) %>%       select(-chrom) %>%       tibble::column_to_rownames(var = \"gene_name\") %>%       as.matrix()   })  binded_counts <- do.call(cbind, batch24_counts)"},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"import-data-1","dir":"Articles","previous_headings":"Coverting multiple DRUGseq plates to a macpie object > 2. Quality control","what":"2.1 Import data","title":"Cross platform compatibility","text":", can read combined count matrix metadata. Filtering filtering genes three 384-well plates take . suggest save previously filtered object work . , focus check data quality across three replicate plates, especially batch effects batch 24.","code":"as_mac <- CreateSeuratObject(counts = binded_counts,    min.cells = 1,    min.features = 1) #> Warning: Feature names cannot have underscores ('_'), replacing with dashes #> ('-') #> Warning: Data is of class matrix. Coercing to dgCMatrix.  as_mac<- as_mac%>% inner_join(batch24_metadata, by = c(\".cell\"=\"Barcode\")) as_mac$combined_id <- paste0(as_mac$Treatment_1,\"_\", as_mac$Concentration_1)  min_sample_num <- min(table(as_mac$combined_id))  # mac_filtered <- filter_genes_by_expression(as_mac,  #                                            group_by = \"combined_id\", min_counts = 10, #                                            min_samples = min_sample_num) #  # saveRDS(mac_filtered,  #   file = paste0(dir, \"DRUGseqData/macpie_filtered_batch24.Rds\"))   mac_filtered <- readRDS(paste0(dir, \"/DRUGseqData/macpie_filtered_batch24.Rds\")) mac_filtered[[\"percent.mt\"]] <- PercentageFeatureSet(mac_filtered, pattern = \"^mt-|^MT-\") mac_filtered[[\"percent.ribo\"]] <- PercentageFeatureSet(mac_filtered, pattern = \"^Rp[slp][[:digit:]]|^Rpsa|^RP[SLP][[:digit:]]|^RPSA\") # Example of a function from Seurat QC  VlnPlot(mac_filtered, features = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent.mt\", \"percent.ribo\"),          ncol = 4, group.by = \"Sample_type\", split.by = \"orig.ident\") + theme(legend.position = 'right') +   scale_fill_manual(values = macpie_colours$discrete)  #> Warning: Default search for \"data\" layer in \"RNA\" assay yielded no results; #> utilizing \"counts\" layer instead. #> The default behaviour of split.by has changed. #> Separate violin plots are now plotted side-by-side. #> To restore the old behaviour of a single split violin, #> set split.plot = TRUE. #>        #> This message will be shown once per session. #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. p <- plot_plate_layout(mac_filtered, \"nCount_RNA\", \"combined_id\") + facet_wrap(~orig.ident, ncol = 1) +    theme(strip.text = element_text(size=10),         axis.text.x = element_text(size=10),          axis.text.y = element_text(size=8),         legend.title = element_text(size=10),         legend.text = element_text(size=8),         trip.background = element_blank()) girafe(ggobj = p,    fonts = list(sans = \"sans\"),   options = list(     opts_hover(css = \"stroke:black; stroke-width:1px;\")   )) #> Warning in plot_theme(plot): The `trip.background` theme element is not #> defined in the element hierarchy."},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"sample-grouping-with-mds-plot","dir":"Articles","previous_headings":"Coverting multiple DRUGseq plates to a macpie object > 2. Quality control > 2.2 Basic QC metrics","what":"2.2.1 Sample grouping with MDS plot","title":"Cross platform compatibility","text":", first visualise grouping samples MDS plot.","code":"p <- plot_mds(mac_filtered, group_by = \"Sample_type\", label = \"combined_id\", n_labels = 30) #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis.  p1 <- plot_mds(mac_filtered, group_by = \"orig.ident\", label = \"combined_id\", n_labels = 30) #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis.   g <- patchwork::wrap_plots(list(p, p1), ncol = 1, nrow = 2, rel_widths = c(7, 7), rel_heights = c(10, 10)) girafe(   ggobj      = g,    width_svg  = 10,    # 10 inches wide   height_svg = 10,     #  10 inches tall   fonts      = list(sans = \"sans\"),   options    = list(opts_hover(css = \"stroke:black; stroke-width:0.8px;\")) ) #> Warning: ggrepel: 30 unlabeled data points (too many overlaps). Consider increasing max.overlaps #> ggrepel: 30 unlabeled data points (too many overlaps). Consider increasing max.overlaps"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"sample-grouping-with-umap","dir":"Articles","previous_headings":"Coverting multiple DRUGseq plates to a macpie object > 2. Quality control > 2.2 Basic QC metrics","what":"2.2.2 Sample grouping with UMAP","title":"Cross platform compatibility","text":"Apart MDS plot, show data can also applied Seurat’s SCTransform visualise UMAP.  MDS UMAP, batch effects among three replicate plates. one compound: three wells BA-51-N076_10 formed distinct cluster. wells separated plates.","code":"mac_sct <- SCTransform(mac_filtered, verbose = FALSE) %>%     RunPCA(verbose = FALSE) %>%     RunUMAP(verbose = FALSE,dims = 1:30) DimPlot(mac_sct, reduction = \"umap\", group.by = \"orig.ident\", cols = macpie_colours$discrete)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"distribution-of-umi-counts","dir":"Articles","previous_headings":"Coverting multiple DRUGseq plates to a macpie object > 2. Quality control > 2.2 Basic QC metrics","what":"2.2.3 Distribution of UMI counts","title":"Cross platform compatibility","text":"also want expect distribution UMIs across experiment. end use box plot show distribution UMI counts grouped across treatments. 341 unique combinations compound_concentration, ’s messy show vignette. , show 200 .","code":"length(unique(mac_filtered$combined_id)) #> [1] 341 compounds_subset <- unique(mac_filtered$combined_id) qc_stats <- compute_qc_metrics(mac_filtered %>% filter(combined_id %in% compounds_subset[1:200]), group_by = \"combined_id\", order_by = \"median\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"variability-among-all-replicates","dir":"Articles","previous_headings":"Coverting multiple DRUGseq plates to a macpie object > 2. Quality control > 2.2 Basic QC metrics","what":"2.2.4 Variability among all replicates","title":"Cross platform compatibility","text":"","code":"plot_qc_metrics_heatmap(qc_stats$stats_summary)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"correction-of-batch-effect","dir":"Articles","previous_headings":"Coverting multiple DRUGseq plates to a macpie object > 2. Quality control > 2.2 Basic QC metrics","what":"2.2.5 Correction of batch effect","title":"Cross platform compatibility","text":"According DRUGseq metadata: Wells water labelled EC-27-RY89 Wells DMSO labelled CB-43-EP73   Note: instead discussing correction methods use data, show ways detected corrected batch effect . batch effect adjustment sequencing data implemented different methods, DESeq2, RUVSeq, edgeR. highly recommend users thoroughly checking batch effects exploring different methods. next part vignette, demonstrate batch parameter implemented differential expression test batch correction.","code":"mac_filtered_dmso <- mac_filtered %>% filter(Treatment_1 == \"CB-43-EP73\") plot_rle(mac_filtered_dmso, label_column = \"orig.ident\", normalisation = \"raw\")+ scale_x_discrete(drop = FALSE) +    theme(axis.text.x = element_text(angle = 45, hjust = 1)) #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. #> Scale for x is already present. #> Adding another scale for x, which will replace the existing scale. plot_rle(mac_filtered_dmso, label_column = \"orig.ident\", normalisation = \"limma_voom\")+ scale_x_discrete(drop = FALSE) +    theme(axis.text.x = element_text(angle = 45, hjust = 1)) #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. #> Scale for x is already present. #> Adding another scale for x, which will replace the existing scale."},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"single-comparison","dir":"Articles","previous_headings":"Coverting multiple DRUGseq plates to a macpie object > 3. Differential gene expression","what":"3.1 Single comparison","title":"Cross platform compatibility","text":", can specify single condition combined_id column compare DMSO (.e.CB_43_EP73_0). using plate IDs column orig.ident input batch parameter, compute_singe_de function can perform differential expression analysis using preferred method (limma voom example) batch information.  Now can visualise gene expression (CPM) top 6 genes differential expression analysis.  Pathway enrichment analysis can performed top differentially expressed genes using function enrichr.","code":"mac_filtered$combined_id <- str_replace_all(mac_filtered$combined_id, \"-\",\"_\") treatment_samples <- \"FF_86_NH56_10\" control_samples <- \"CB_43_EP73_0\" subset <- mac_filtered%>%filter(combined_id%in%c(treatment_samples,control_samples)) batch <- subset$orig.ident top_table <- compute_single_de(mac_filtered, treatment_samples, control_samples, method =  \"limma_voom\", batch = batch) plot_volcano(top_table, max.overlaps = 6) #> Warning: ggrepel: 5718 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps genes <- top_table$gene[1:6] group_by <- \"combined_id\" plot_counts(mac_filtered,genes, group_by, treatment_samples, control_samples, normalisation = \"cpm\") #> Normalizing layer: counts"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"multiple-comparisons","dir":"Articles","previous_headings":"Coverting multiple DRUGseq plates to a macpie object > 3. Differential gene expression","what":"3.2 Multiple comparisons","title":"Cross platform compatibility","text":"339 compounds 10uM data, take quite (around 24 mins M3 Pro 18GB memory parallelisation speedup num_cores = 4) run. purpose vignette, include 100 compounds 10uM data. often want ask genes differentially expressed one treatment group. , can visualise treatment groups shared differentially expressed genes, defined top 20 -regulated genes single drug comparison (treatment vs control) found least 2 different treatment groups. heatmap shows shared differentially expressed genes corresponding log2FC values.","code":"treatments <- mac_filtered %>%   filter(Concentration_1 == 10) %>%   select(combined_id) %>%   pull() %>%   unique() #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis.  treatments_subset <- treatments[1:100] # only use 100 compounds for the vignette    mac_filtered <- compute_multi_de(mac_filtered, treatments_subset, control_samples = \"CB_43_EP73_0\", method = \"limma_voom\", num_cores = 4) plot_multi_de(mac_filtered, group_by = \"combined_id\", value = \"log2FC\", p_value_cutoff = 0.01, direction=\"up\", n_genes = 20, control = \"CB_43_EP73_0\", by=\"fc\")"},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/cross_platform_compatibility.html","id":"multiple-comparisons-1","dir":"Articles","previous_headings":"Coverting multiple DRUGseq plates to a macpie object > 4. Pathway enrichment analysis","what":"4.1 Multiple comparisons","title":"Cross platform compatibility","text":"pathway enrichment analysis done using enrichR. Results differential gene expression - multiple comparisons used pass pathway enrichment analysis. can visualise pathway enrichment results multiple comparisons heatmap.","code":"# Load genesets from enrichr for a specific species or define your own enrichr_genesets <- download_geneset(\"human\", \"MSigDB_Hallmark_2020\") mac_filtered<- compute_multi_enrichr(mac_filtered, genesets = enrichr_genesets)  enriched_pathways_mat <- mac_filtered@tools$pathway_enrichment %>%   bind_rows() %>%   select(combined_id, Term, Combined.Score) %>%   pivot_wider(names_from = combined_id, values_from = Combined.Score) %>%   column_to_rownames(var = \"Term\") %>%   mutate(across(everything(), ~ ifelse(is.na(.), 0, log1p(.)))) %>%  # Replace NA with 0 across all columns   as.matrix()   pheatmap(enriched_pathways_mat, color = macpie_colours$continuous_rev)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/high_throughput_screens.html","id":"data-import","dir":"Articles","previous_headings":"","what":"1. Data import","title":"High throughput screening","text":"First import data providing either directory, vector directories (multiple plates) Read10X function, described previous vignettes, Quality control.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/high_throughput_screens.html","id":"single-perturbation","dir":"Articles","previous_headings":"","what":"2. Single perturbation","title":"High throughput screening","text":"using “MSigDB_Hallmark_2020” standard choice pathway enrichment, number gene sets available enrichR might relevant screens, “RNA-Seq_Disease_Gene_and_Drug_Signatures_from_GEO”, even cell direction specific ones “MCF7_Perturbations_from_GEO_down”. full list available listEnrichrDbs(). following example, investigate compounds similar profile Erlotinib (SN02373723), showcase profile can confirmed public datasets, even different cell line (lung adencarcinoma, (GSE65420).","code":"# First perform the differential expression analysis treatment_samples <- \"Erlotinib_Hydrochloride_10\" control_samples <- \"DMSO_0\" top_table <- compute_single_de(mac, treatment_samples, control_samples, method = \"limma_voom\") top_genes <- top_table %>%   filter(p_value_adj < 0.01) %>%   select(gene) %>%   pull()  # Perform enrichment analysis. Warning, you will require internet access to use EnrichR enriched <- enrichR::enrichr(top_genes, c(\"RNA-Seq_Disease_Gene_and_Drug_Signatures_from_GEO\")) #> Uploading data to Enrichr... Done. #>   Querying RNA-Seq_Disease_Gene_and_Drug_Signatures_from_GEO... Done. #> Parsing results... Done. p1 <- enrichR::plotEnrich(enriched[[1]]) +    macpie_theme(legend_position_ = 'right') +    scale_fill_gradientn(colors = macpie_colours$divergent) p1"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/high_throughput_screens.html","id":"screen-level-analyses","dir":"Articles","previous_headings":"","what":"3. Screen-level analyses","title":"High throughput screening","text":"high-throughput screens commonly want compare multiple samples control parallel. First select vector perturbations, case “combined_ids” contain term “DMSO”.","code":"treatments <- mac %>%   filter(Concentration_1 == 10) %>%   select(combined_id) %>%   filter(!grepl(\"DMSO\", combined_id)) %>%   pull() %>%   unique() mac <- compute_multi_de(mac, treatments, control_samples = \"DMSO_0\", method = \"limma_voom\", num_cores = 1)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/high_throughput_screens.html","id":"expression-profiles-of-individual-genes","dir":"Articles","previous_headings":"3. Screen-level analyses","what":"3.1 Expression profiles of individual genes","title":"High throughput screening","text":"visualise logFC expression top 20 genes Erlotinib (SN02373723) DE analysis across screen plot_multi_de.","code":"plot_multi_de(mac, group_by = \"combined_id\", value = \"log2FC\", p_value_cutoff = 0.01, direction=\"up\", control = \"DMSO_0\", by=\"fc\", gene_list = head(top_genes, 20))"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/high_throughput_screens.html","id":"pathway-enrichment","dir":"Articles","previous_headings":"3. Screen-level analyses","what":"3.2 Pathway enrichment","title":"High throughput screening","text":"Similarly, can observe gene sets, either provided user publicly available, shared across treatments, specific individual perturbations.","code":"# Load genesets from enrichr for a specific species or define your own enrichr_genesets <- download_geneset(\"human\", \"MSigDB_Hallmark_2020\") mac <- compute_multi_enrichr(mac, genesets = enrichr_genesets)  enriched_pathways_mat <- mac@tools$pathway_enrichment %>%   bind_rows() %>%   group_by(combined_id) %>%   slice_max(order_by = Combined.Score, n = 8, with_ties = FALSE) %>%  # Select top 10 per group   ungroup() %>%   select(combined_id, Term, Combined.Score) %>%   pivot_wider(names_from = combined_id, values_from = Combined.Score) %>%   column_to_rownames(var = \"Term\") %>%   mutate(across(everything(), ~ ifelse(is.na(.), 0, log1p(.)))) %>%   as.matrix()  pheatmap(enriched_pathways_mat, color = macpie_colours$continuous_rev)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/high_throughput_screens.html","id":"clustering-of-expression-profiles","dir":"Articles","previous_headings":"3. Screen-level analyses","what":"3.3 Clustering of expression profiles","title":"High throughput screening","text":"UMAP dimensionality reduction commonly used visualise clustering samples according expression profiles. Instead using individual replicates UMAP, can cluster based statistical metric differential gene expression vs control, allows control batch-correction data reduction replicate noise. Function aggregate_by_de creates new Seurat object, collapsing metadata across replicates.  number analyses become available, including plotting biological signatures UMAP plots.","code":"mac_agg <- aggregate_by_de(mac) mac_agg <- compute_de_umap(mac_agg) mac_agg <- FindNeighbors(mac_agg, reduction = \"umap_de\", dims = 1:2, verbose = FALSE) # This command creates a column \"seurat_clusters\" mac_agg <- FindClusters(mac_agg, resolution = 1.1, verbose = FALSE) # Plot a umap plot_de_umap(mac_agg, color_by = \"seurat_clusters\") # Perform AUCell analysis cells_rankings <- AUCell_buildRankings(   GetAssayData(mac_agg), plotStats = FALSE) cells_AUC <- AUCell_calcAUC(enrichr_genesets, cells_rankings, verbose = FALSE)   # Add AUCell results to the original object auc_df <- getAUC(cells_AUC) %>%   t() %>%   as.data.frame() %>%   tibble::rownames_to_column(\".cell\")  mac_agg <- mac_agg %>%   left_join(auc_df,by = \".cell\")    # We can then plot by any of the pathways, for example: p <- plot_de_umap(mac_agg, color_by = \"Oxidative Phosphorylation\") girafe(ggobj = p,    fonts = list(sans = \"sans\"),   options = list(     opts_hover(css = \"stroke:black; stroke-width:0.8px;\")  # <- slight darkening   ))"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/high_throughput_screens.html","id":"similarity-to-a-known-profile","dir":"Articles","previous_headings":"3. Screen-level analyses","what":"3.4 Similarity to a known profile","title":"High throughput screening","text":"Additionally, performing screen, sometimes want measure similarity either existing profile, user-defined gene-set defines desired phenotype. Similarly, can compare enrichments known gene set.","code":"mac_agg <- compute_multi_screen_profile(mac_agg, target = \"Staurosporine_10\", num_cores = 1) p <- plot_multi_screen_profile(mac_agg, color_by = \"seurat_clusters\") girafe(ggobj = p,    fonts = list(sans = \"sans\"),   options = list(     opts_hover(css = \"stroke:black; stroke-width:0.8px;\")  # <- slight darkening   )) enrichr_genesets <- download_geneset(\"human\", \"MSigDB_Hallmark_2020\")  mac_agg <- compute_multi_screen_profile(mac_agg, geneset = enrichr_genesets[[\"Oxidative Phosphorylation\"]]) p <- plot_multi_screen_profile(mac_agg, color_by = \"seurat_clusters\") girafe(ggobj = p,    fonts = list(sans = \"sans\"),   options = list(     opts_hover(css = \"stroke:black; stroke-width:0.8px;\")  # <- slight darkening   ))"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/high_throughput_screens.html","id":"estimate-of-dose-response","dir":"Articles","previous_headings":"","what":"4. Estimate of dose-response","title":"High throughput screening","text":"macpie can used calculate dose-response curves individual genes, pathways external measurement cell viability available metadata, based R package drc also available paralelisable format function “compute_multiple_dose_response”.","code":"enrichr_genesets <- download_geneset(\"human\", \"MSigDB_Hallmark_2020\")  # Note that we are not using the aggregated object, since we need replicates mac <- compute_multi_enrichr(mac, genesets = enrichr_genesets) res <- compute_single_dose_response(data = mac,   gene = \"EIF2B5\",   normalisation = \"limma_voom\",   treatment_value = \"Staurosporine\") #>  #> Estimated effective doses #>  #>        Estimate Std. Error    Lower    Upper #> e:1:50   2.0412     6.5744 -11.5277  15.6101 # All of the properties res$plot res <- compute_single_dose_response(data = mac,   pathway = \"Myc Targets V1\",   treatment_value = \"CAMPTOTHECIN\") #>  #> Estimated effective doses #>  #>        Estimate Std. Error Lower Upper #> e:1:50   4.6533    10.0000   NaN   NaN res$plot"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/high_throughput_screens.html","id":"working-with-chemical-descriptors","dir":"Articles","previous_headings":"","what":"4. Working with chemical descriptors","title":"High throughput screening","text":"macpie provides easy way find smiles compounds names, compute chemical descriptors compounds identify important phenotype. example , Wiener path number, representing overall branching molecule important targeting estrogen activity, measured percentage increase Mean Squared Error (%IncMSE).","code":"# Add smiles based on a column with generic names of compounds #(warning, this process requires internet connection and can take a while) #mac <- compute_smiles(mac, compound_column = \"Compound_ID\") # ## Calculate descriptors mac <- compute_chem_descriptors(mac)  #change column names for joining colnames(mac@tools$chem_descriptors)[1] <- \"combined_id\"  # Join with target variable (e.g. pathway score) model_df <- mac@tools$pathway_enrichment %>%   filter(Term == \"Estrogen Response Early\") %>%   left_join(., mac@meta.data, join_by(combined_id)) %>%   filter(Concentration_1 == 10) %>%   select(Treatment_1, Combined.Score, combined_id) %>%   unique() %>%   left_join(., mac@tools$chem_descriptors, join_by(combined_id)) %>%   select(-combined_id) %>%   drop_na()  # Train random forest rf_model <- randomForest(Combined.Score ~ ., data = model_df, importance = TRUE, na.action = na.omit)  # Get importance scores rf_importance <- importance(rf_model, type = 1)  # %IncMSE = predictive power rf_ranked <- sort(rf_importance[, 1], decreasing = TRUE)  # Top 20 important descriptors head(rf_ranked, 20) #>           Fsp3        MDEO.11          ATSm1         WTPT.5        nRings5  #>     2.61882136     2.02448505     1.86901073     1.52871682     1.36434306  #> tpsaEfficiency          nAcid          SCH.5          C1SP3          XLogP  #>     1.09144808     1.00100150     0.98454638     0.90667258     0.78385517  #>       khs.aaaC      topoShape    nSmallRings        MDEC.11        nRings4  #>     0.77161789     0.45889299     0.28752283     0.03567346     0.00000000  #>        MDEN.11       khs.dCH2        khs.tCH        khs.dNH        khs.dsN  #>     0.00000000     0.00000000     0.00000000     0.00000000     0.00000000 #>      WTPT.2     nRings5     MDEC.11     nRings7     MDEO.22     MDEO.11  #> 3.361393653 2.150421361 1.214784237 1.001001503 0.783327367 0.709299485  #>   khs.ssCH2 nSmallRings     MDEN.33     MDEC.14   topoShape      ALogp2  #> 0.474955644 0.366086694 0.115293479 0.085759728 0.077678537 0.007617685  #>     nRings4     MDEN.11    khs.dCH2     khs.tCH     khs.dNH    khs.aaNH  #> 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000  #>     khs.dsN     khs.aaO  #> 0.000000000 0.000000000 #>  rf_importance_clean <- rf_importance %>%   as.data.frame() %>%   rownames_to_column(\"Feature\") %>%   filter(is.finite(`%IncMSE`)) %>%   arrange(desc(`%IncMSE`))  top_n <- min(20, nrow(rf_importance_clean))  dotchart(   rf_importance_clean$`%IncMSE`[1:top_n],   labels = rf_importance_clean$Feature[1:top_n],   main = \"Top Random Forest Features\",   xlab = \"%IncMSE\" )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/integration_across_modalities.html","id":"import-screen-data","dir":"Articles","previous_headings":"","what":"1. Import screen data","title":"Data integration","text":"First import data providing either directory, vector directories (multiple plates) Read10X function, described previous vignettes, Quality control.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/integration_across_modalities.html","id":"data-collection","dir":"Articles","previous_headings":"","what":"2. Data collection","title":"Data integration","text":"section collate data across various modalities regularly associated transcriptomic screens. show import sample annotations, integrate gene expression pathway enrichment.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/integration_across_modalities.html","id":"import-external-annotations","dir":"Articles","previous_headings":"2. Data collection","what":"2.1 Import external annotations","title":"Data integration","text":"example loading additional sample information, case cell viability confluence, merging metadata based column Well_ID.","code":"file_path <- system.file(\"extdata\", \"PMMSq033/PMMSq033_CTG_cellcount.csv\", package = \"macpie\") cell_viability <- read.csv(file_path) %>%   #mutate(   #  cell_viability = scale(cell_viability)[, 1],   #  cell_confluence = scale(cell_confluence)[, 1]   #) %>%   dplyr::select(Well_ID, cell_viability, cell_confluence)  # Modify metadata mac@meta.data <- mac@meta.data %>%   left_join(cell_viability, by = \"Well_ID\") %>%   column_to_rownames(\"Barcode\") #tidyverse does not preserve row names that Seurat needs"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/integration_across_modalities.html","id":"calculate-differentially-expressed-genes","dir":"Articles","previous_headings":"2. Data collection","what":"2.2 Calculate differentially expressed genes","title":"Data integration","text":"","code":"treatments <- mac %>%   filter(Concentration_1 == 10) %>%   select(combined_id) %>%   filter(!grepl(\"DMSO\", combined_id)) %>%   pull() %>%   unique() mac <- compute_multi_de(mac, treatments, control_samples = \"DMSO_0\", method = \"limma_voom\", num_cores = 1)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/integration_across_modalities.html","id":"calculate-pathway-enrichment","dir":"Articles","previous_headings":"2. Data collection","what":"2.3 Calculate pathway enrichment","title":"Data integration","text":"","code":"enrichr_genesets <- download_geneset(\"human\", \"MSigDB_Hallmark_2020\") mac <- compute_multi_enrichr(mac, genesets = enrichr_genesets, p_value_cutoff = 0.05)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/integration_across_modalities.html","id":"calculate-chemical-descriptors-of-compounds","dir":"Articles","previous_headings":"2. Data collection","what":"2.4 Calculate chemical descriptors of compounds","title":"Data integration","text":"perturbations small molecules, straightforward add information chemical descriptors based smiles column data.","code":"# If you don't have smiles in your metadata, calculate them based on the compound ID  #mac <- compute_smiles(mac, compound_column = \"Compound_ID\") mac <- compute_chem_descriptors(mac)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/integration_across_modalities.html","id":"mofa-workflow","dir":"Articles","previous_headings":"","what":"3. MOFA workflow","title":"Data integration","text":"MOFA provides framework integration multiomics datasets, identifying “Factors” (principal components) define main sources variation dataset, across modalities. order identify , follow MOFA workflow. key functions include: create_mofa (import multiomics data.frame long format) prepare_mofa (set traning options) run_mofa (train MOFA model) macpie package streamlines analysis MOFA, extracting multimodal data required first step creating MOFA object user. load data “MOFAobject” start analysis, us build_mofa, function prepares MOFA object based genes pathways (previously calculated, slot @tools) chemical descriptors (previously calculated, optional) tables slot @tools containing column “Treatment”, unique treatment ids first instance try identify Factors capture variation chemical descriptors gene expression / pathway enrichment.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/integration_across_modalities.html","id":"mofa-object","dir":"Articles","previous_headings":"3. MOFA workflow","what":"3.1 MOFA object","title":"Data integration","text":"include metadata columns define cell viability confluence.","code":"MOFAobject <- build_mofa(data = mac,                          combined_ids = treatments, #unique samples IDs (treat+conc) to be used                          metadata_columns = c(\"cell_confluence\", \"cell_viability\"), #vector of metadata columns to include in the analysis                          de_metric = \"metric\", #column name of data for DE analysis, such as:                                                #\"log2FC\" or \"metric\" (test statistic)                          de_pval_thresh = 0.01,                          de_padj_col = \"p_value_adj\",                          pathway_pval_thresh = 1, #p-value cutoff for pathway significance                          pathway_pval_col = \"Adjusted.P.value\", #column used for p-valye cutoff                          pathway_score_col = \"Combined.Score\" #column used as pathway enrichment metric ) MOFA2::plot_data_overview(MOFAobject)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/integration_across_modalities.html","id":"scaling","dir":"Articles","previous_headings":"3. MOFA workflow","what":"3.2 Scaling","title":"Data integration","text":"groups modalities (views) different ranges/variances, good practice scale unit variance modifying model options scale_views scale_groups (default FALSE).","code":"data_opts <- MOFA2::get_default_data_options(MOFAobject) data_opts$scale_views <- TRUE data_opts$scale_groups <- TRUE"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/integration_across_modalities.html","id":"model-parameters","dir":"Articles","previous_headings":"3. MOFA workflow","what":"3.3 Model parameters","title":"Data integration","text":"Modify model training parameters , including likelihoods distributions, number iterations usage GPU.","code":"model_opts <- MOFA2::get_default_model_options(MOFAobject) train_opts <- MOFA2::get_default_training_options(MOFAobject) train_opts$seed <- 1  # for reproducibility"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/integration_across_modalities.html","id":"running-the-model","dir":"Articles","previous_headings":"3. MOFA workflow","what":"3.4 Running the model","title":"Data integration","text":"","code":"MOFAobject <- MOFA2::prepare_mofa(MOFAobject,                             data_options = data_opts,                            model_options = model_opts,                             training_options = train_opts) model <- MOFA2::run_mofa(MOFAobject, use_basilisk = TRUE)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/integration_across_modalities.html","id":"investigation-of-factors","dir":"Articles","previous_headings":"3. MOFA workflow","what":"3.5 Investigation of Factors","title":"Data integration","text":"plot allows us evaluate whether Factors correlated, case eliminated future analyses.","code":"MOFA2::plot_factor_cor(model)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/integration_across_modalities.html","id":"variance-decomposition","dir":"Articles","previous_headings":"3. MOFA workflow","what":"3.6 Variance decomposition","title":"Data integration","text":"running model, now easy follow standard MOFA worklow. can quantify amount variance explained (𝑅2) factor, data modality. seems first factor captures lot variability across modalities, least pathways (8.1%) chemical descriptors (0%). explained fact lot information content pathways directly contained gene expression, already captured MOFA. Also, number molecules might small chemical properties able explain variability dataset.","code":"head(model@cache$variance_explained$r2_per_factor$group1) # group 1 #>         cell_confluence cell_viability     genes     pathways chem_descriptors #> Factor1    3.829609e+01   1.993528e+01 34.349394 0.0814557076                0 #> Factor2    7.075602e+00   3.376725e+01  5.242789 0.0003278255                0 #> Factor3    1.805512e+01   1.282811e-01  9.765500 0.0020205975                0 #> Factor4    4.338485e+00   1.340080e+01  3.388435 0.0007033348                0 #> Factor5   -4.768372e-05   4.529953e-04  3.786212 0.0009715557                0 p<-MOFA2::plot_variance_explained(model) p<-p+theme(axis.text.x = element_text(angle = 45, hjust = 1)) p"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/integration_across_modalities.html","id":"visualisation-of-feature-weights","dir":"Articles","previous_headings":"3. MOFA workflow","what":"3.7 Visualisation of feature weights","title":"Data integration","text":"“Factors” correspond principle componenets PCA analysis, “weight” corresponds “loadings”. positive weight feature, case genes PPP2R1A DCTN3, marks strong relation Factor 1. sign weight indicates direction effect, features PPP2R1A DCTN3 higher levels cells positive Factor 1 values, cell viability opposite.  can use MOFA’s scatter plots visualise factor values, establish whether relationship features factor values linear  DCTN3 encodes dynactin subunit 3, part dynactin motor complex essential intracellular transport formation mitotic spindle. High DCTN3 may influence cell viability cells treated microtubule inhibitors. Similarly, PPP2R1 serine/threonine phosphatase regulates chromatin remodeling, high levels PPP2R1A may detrimental combination epigenetic drugs.  DCTN3 expression appears stratify differential cellular responses diverse therapeutic agents. High DCTN3 levels correlate reduced viability cells treated camptothecin, 5’-azacytidine, paclitaxel - drugs rely active cell division efficient mitotic machinery cytotoxic effects, suggesting DCTN3-dependent trafficking spindle dynamics may sensitize cells genotoxic stress. Conversely, low DCTN3 expression associated increased viability response capivasertib, cytarabine, ribociclib, SB590885, potentially reflecting drug-tolerant state marked reduced proliferation, impaired retrograde transport, altered checkpoint engagement.","code":"p1<-MOFA2::plot_top_weights(model,                  view = \"genes\",                  factor = 1,                  nfeatures = 5 ) p2<-MOFA2::plot_top_weights(model,                  view = \"cell_viability\",                  factor = 1,                  nfeatures = 5 ) p1+p2 p <- plot_data_scatter(model,   view = \"genes\",         # view of interest   factor = 1,             # factor of interest   features = 5,           # number of features to plot (they are selected by weight)   add_lm = TRUE,          # add linear regression   color_by = \"cell_viability\" ) p p1<- plot_factor(model,              factors = c(1),             group_by = \"sample\",             color_by = \"DCTN3\" ) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) #p1 p2<- plot_factor(model,              factors = c(1),             group_by = \"sample\",             color_by = \"cell_viability\" ) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) p1+p2"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"macpie: overview","text":"MAC-seq cost-effective, high-throughput transcriptomic platform, developed collaboration Victorian Centre Functional Genomics (VCFG) Molecular Genomics Core (MGC) facilities Peter MacCallum Cancer Centre (Peter Mac), primarily designed small molecule screening. However, versatility extends beyond application, thanks integration high-throughput microscopy 3D cell culturing techniques. macpie toolkit designed researchers, originally MAC-seq data mind, validated general High-Throughput Transcriptomics (HTTr) data applications. primary aim deliver latest tools quality control (QC), visualization, analysis. macpie result collaborative effort workgroup PeterMac, substantial support VCFG amd MGC core facilities. vignette cover basic functionality macpie, input, quality control transcriptional screen-related analyses. -depth workflows, please refer vignettes: Quality control Transcriptional analysis Compound screening Cross-platform compatibility","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"metadata-import-and-qc","dir":"Articles","previous_headings":"Introduction","what":"1. Metadata import and QC","title":"macpie: overview","text":"Key points: metadata contain least columns Plate_ID, Well_ID, Row, Column, Species, Sample_type, Treatment_1, Concentration_1 Barcode. Metadata tabular format contain standardised set columns define coordinates sample plate, provide minimum information sample, allow connection transcriptomic data sample barcodes. ensure integrity metadata future analyses, provide user set tools verify metadata consistency visualize key variables, described depth QC vignette. first visually inspect experimental variables, order identify potential artefacts.  Key Lessons Robust Experimental Design Based experience, specific metadata need vary greatly experiment’s design. crucial lessons ’ve learned help achieve reliable results: Plate Layout Matters: Always place replicate sample wells assay plate, across multiple plates. Minimum Replicates: Aim minimum 3 replicates per condition ensure statistical robustness. Strategic Negative Controls: negative control wells, recommend including 10 wells randomized across assay plate. provides robust baseline.","code":"#install.packages(\"macpie\")  # or devtools::install_github(\"PMCC-BioinformaticsCore/macpie\") library(macpie) library(enrichR) library(randomForest) library(pheatmap) library(ggrepel)  # Load metadata project_metadata <- system.file(\"extdata/PMMSq033_metadata.csv\", package = \"macpie\")  # Load metadata metadata <- read_metadata(project_metadata) plot_metadata_heatmap(metadata)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"sequencing-data-import-and-qc","dir":"Articles","previous_headings":"Introduction","what":"2. Sequencing data import and QC","title":"macpie: overview","text":"Key points: pay special attention removal lowly expressed genes : use plot_plate_layout check plate-level effects (edge vs centre, plates) use plot_mds check sample grouping (umap/pca also available using Seurat’s functions) use compute_qc_metrics, plot_qc_metrics_heatmap, plot_distance check sample variability outliers use plot_rle check row/column/plate effects compare normalization methods detailed methods avaailable vignette Quality control","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"import-data-to-tidyseurat-object","dir":"Articles","previous_headings":"Introduction > 2. Sequencing data import and QC","what":"2.1 Import data to tidySeurat object","title":"macpie: overview","text":"Data access: load raw counts providing Read10X function path directory containing matrix.mtx.gz, barcodes.tsv.gz, features.tsv.gz, commonly “raw_matrix” CellRanger StarSolo output full manuscript dataset (>10 MB .rds files) currently restricted release become publicly available upon publication (Zenodo). meantime, please contact us early access use data(mini_mac) load subsample (308 samples, 500 genes) full dataset, commented code ","code":"# 1. Load your own gene counts per sample or 2. data from the publication project_rawdata <- paste0(dir, \"/macpieData/PMMSq033/raw_matrix\") project_name <- \"PMMSq033\" raw_counts <- Read10X(data.dir = project_rawdata)  # Create tidySeurat object mac <- CreateSeuratObject(counts = raw_counts,                           project = project_name,                           min.cells = 1,                           min.features = 1)  # 3. Alternatively, load a premade example: # data(mini_mac) # mac <- mini_mac  # Join gene counts per sample with metadata mac <- mac %>%   inner_join(metadata, by = c(\".cell\" = \"Barcode\"))  # Create unique identifier for your treatments based on metadata mac <- mac %>%   mutate(combined_id = str_c(Treatment_1, Concentration_1, sep = \"_\")) %>%   mutate(combined_id = gsub(\" \", \"\", .data$combined_id)) %>%   mutate(combined_id = make.names(combined_id))  # # Filter by read count per sample group mac <- filter_genes_by_expression(mac,                                   group_by = \"combined_id\",                                   min_counts = 5,                                   min_samples = 1)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"basic-qc-metrics","dir":"Articles","previous_headings":"Introduction > 2. Sequencing data import and QC","what":"2.2 Basic QC metrics","title":"macpie: overview","text":"macpie allows use common QC plots Seurat package visualise number genes, reads, percentage mitochondrial ribosomal genes per sample.  addition, can apply tidyverse functions explore dataset. example, let’s subset Seurat object based column “Project” metadata visualise grouping data plate vs MDS plot. Plate layout plots provide interactive way inspect spatial patterns across plate, helping identify anomalies unexpected trends. hovering plot, sample groups automatically highlighted aid interpretation.","code":"# Calculate the percent of mitochondrial and ribosomal genes mac[[\"percent.mt\"]] <- PercentageFeatureSet(mac, pattern = \"^mt-|^MT-\") mac[[\"percent.ribo\"]] <- PercentageFeatureSet(mac, pattern = \"^Rp[slp][[:digit:]]|^Rpsa|^RP[SLP][[:digit:]]|^RPSA\")  # Example of a function from Seurat quality control  VlnPlot(mac, features = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent.mt\", \"percent.ribo\"),          ncol = 4, group.by = \"Sample_type\") &    scale_fill_manual(values = macpie_colours$discrete) unique(mac$Project) #> [1] \"Trial\"   \"Current\" mac <- mac %>%   filter(Project == \"Current\")  # Interactive QC plot plate layout (all metadata columns can be used): p <- plot_plate_layout(mac, \"nCount_RNA\", \"combined_id\") girafe(ggobj = p,    fonts = list(sans = \"sans\"),   options = list(     opts_hover(css = \"stroke:black; stroke-width:0.8px;\")  # <- slight darkening   ))"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"sample-grouping-with-mds-plot","dir":"Articles","previous_headings":"Introduction > 2. Sequencing data import and QC > 2.2 Basic QC metrics","what":"2.2.1 Sample grouping with MDS plot","title":"macpie: overview","text":"order assess sample grouping, visualise sample similarity based limma’s MDS (MultiDimensional Scaling) function. Samples treated lower concentration compound often cluster close negative (vehicle) control. Hovering individual dots reveals sample identity grouping.","code":"p <- plot_mds(mac, group_by = \"Sample_type\", label = \"combined_id\", n_labels = 30) girafe(ggobj = p, fonts = list(sans = \"sans\"))"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"distribution-of-read-counts","dir":"Articles","previous_headings":"Introduction > 2. Sequencing data import and QC > 2.2 Basic QC metrics","what":"2.2.2 Distribution of read counts","title":"macpie: overview","text":"Visualising distribution read counts across treatments easy way compare effects treatments estimate sample variability. Read count commonly directly proportional number cells.","code":"qc_stats <- compute_qc_metrics(mac, group_by = \"combined_id\", order_by = \"median\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"variability-among-all-replicates","dir":"Articles","previous_headings":"Introduction > 2. Sequencing data import and QC > 2.2 Basic QC metrics","what":"2.2.3 Variability among all replicates","title":"macpie: overview","text":"relation previous plot, want user ability quantify dispersion reads sample replicates. Therefore, provide access several statistical metrics standard deviation (sd_value), z score (z_score), mad (mad_value) IQR (IQR) can used parameter function plot_qc_metrics individually, assessed function plot_qc_metrics_heatmap.  Identifying outliers batch effects, especially untreated samples, especially important downstream analysis. statistical methods quantify variability among sample groups inter-replicate variability please refer vignette Quality control.","code":"plot_qc_metrics_heatmap(qc_stats$stats_summary)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"correction-of-the-batch-effect","dir":"Articles","previous_headings":"Introduction > 2. Sequencing data import and QC > 2.2 Basic QC metrics","what":"2.2.4 Correction of the batch effect","title":"macpie: overview","text":"Several methods available scaling normalizing transcriptomic data, effects clearly visualized using RLE (Relative Log Expression) plots. case, limma_voom provides lowest average coefficient variation, compared methods “raw”, Seurat “SCT” “edgeR”.","code":"# First we will subset the data to look at control, DMSO samples only mac_dmso <- mac %>%   filter(Treatment_1 == \"DMSO\")  # Run the RLE function plot_rle(mac_dmso, label_column = \"Row\", normalisation = \"limma_voom\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"differential-gene-expression","dir":"Articles","previous_headings":"Introduction","what":"3. Differential gene expression","title":"macpie: overview","text":"Key points: use compute_single_de perform differential expression analysis one treatment group vs control use compute_multi_de perform differential expression analyses treatment groups vs control use volcano plot, box plot heatmap show results analyses visualise gene expression levels use enrichr pathway enrichment analysis detailed methods available vignette Transcriptional analyses","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"single-comparison","dir":"Articles","previous_headings":"Introduction > 3. Differential gene expression","what":"3.1. Single comparison","title":"macpie: overview","text":"Similar RNA-seq, quality differential gene expression analysis MAC-seq depends low variability among replicates suitability statistical model. aspects assessed quality control stage workflow. Results differential expression analysis classically visualised volcano plot.  Based results, can quickly check gene expression levels counts per million (CPM) selected genes treatment control samples described .","code":"# First perform the differential expression analysis treatment_samples <- \"Staurosporine_10\" control_samples <- \"DMSO_0\" top_table <- compute_single_de(mac, treatment_samples, control_samples, method = \"limma_voom\")  # Let's visualise the results with a volcano plot plot_volcano(top_table, max.overlaps = 16) genes <- top_table$gene[1:6] group_by <- \"combined_id\" plot_counts(mac, genes, group_by, treatment_samples, control_samples, normalisation = \"cpm\", color_by = \"combined_id\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"pathway-analysis","dir":"Articles","previous_headings":"Introduction > 3. Differential gene expression","what":"3.2. Pathway analysis","title":"macpie: overview","text":"Differential gene expression results individual comparisons treatment vs control usually performed functions package enrichR fgsea. following case, effect Staurosporine breast cancer cells Myc inactivation can observed pathway enrichment analyses.","code":"top_genes <- top_table %>%   filter(p_value_adj < 0.01) %>%   select(gene) %>%   pull()  enriched <- enrichR::enrichr(top_genes, c(\"MSigDB_Hallmark_2020\")) #> Uploading data to Enrichr... Done. #>   Querying MSigDB_Hallmark_2020... Done. #> Parsing results... Done. p1 <- enrichR::plotEnrich(enriched[[1]]) +    macpie_theme(legend_position_ = 'right') +    scale_fill_gradientn(colors = macpie_colours$divergent)  gridExtra::grid.arrange(p1, ncol = 1)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"differential-gene-expression---multiple-comparisons","dir":"Articles","previous_headings":"Introduction > 3. Differential gene expression","what":"3.3. Differential gene expression - multiple comparisons","title":"macpie: overview","text":"Since MAC-seq commonly used high-throughput screening compound libraries, often want compare multiple samples screen vs control. process can easily parallelised. First select vector “treatments” combined_ids contain word “DMSO”. (Warning, due limitations “mclapply”, parallelisation speedup currently works OSX Linux machines, Windows.) often want ask genes differentially expressed one treatment group. , can visualise treatment groups shared differentially expressed genes, defined top 5 DE genes single drug comparison (treatment vs control) found least 2 different treatment groups. heatmap shows shared differentially expressed genes corresponding log2FC values.","code":"# Filter out lower concentrations of compounds and untreated samples treatments <- mac %>%   filter(Concentration_1 == 10) %>%   select(combined_id) %>%   filter(!grepl(\"DMSO\", combined_id)) %>%   pull() %>%   unique() mac <- compute_multi_de(mac, treatments, control_samples = \"DMSO_0\", method = \"limma_voom\", num_cores = 1) plot_multi_de(mac, group_by = \"combined_id\", value = \"log2FC\", p_value_cutoff = 0.01, direction=\"up\", n_genes = 5, control = \"DMSO_0\", by=\"fc\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"pathway-analysis---multiple-comparisons","dir":"Articles","previous_headings":"Introduction > 3. Differential gene expression","what":"3.4. Pathway analysis - multiple comparisons","title":"macpie: overview","text":"pathway enrichment analysis done R package enrichR, can summarised heatmap, visualising direct offtarget effects perturbations.","code":"# Load genesets from enrichr for a specific species or define your own enrichr_genesets <- download_geneset(\"human\", \"MSigDB_Hallmark_2020\") mac <- compute_multi_enrichr(mac, genesets = enrichr_genesets)  enriched_pathways_mat <- mac@tools$pathway_enrichment %>%   bind_rows() %>%   select(combined_id, Term, Combined.Score) %>%   pivot_wider(names_from = combined_id, values_from = Combined.Score) %>%   column_to_rownames(var = \"Term\") %>%   mutate(across(everything(), ~ ifelse(is.na(.), 0, log1p(.)))) %>%  # Replace NA with 0 across all columns   as.matrix()  pheatmap(enriched_pathways_mat, color = macpie_colours$continuous_rev)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"methods-for-compound-screening","dir":"Articles","previous_headings":"Introduction","what":"4. Methods for compound screening","title":"macpie: overview","text":"Key points: use plot_de_umap find compounds behave similarly based proximity UMAP maps use compute_single_dose_response evaluate impact compound concentrations gene expression pathway enrichment use compute_multi_screen_profile find perturbations similar target profile known gene set detailed methods avaailable vignette Compound screening","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"umap-clustering-based-on-de-genes","dir":"Articles","previous_headings":"Introduction > 4. Methods for compound screening","what":"4.1. UMAP clustering based on DE genes","title":"macpie: overview","text":"Instead plotting UMAP individual samples, can also visualise samples UMAP differential gene expression vs control. allows us use batch-corrected data reduce replicate noise, showing grouping treatments.","code":"mac_agg <- aggregate_by_de(mac) mac_agg <- compute_de_umap(mac_agg) mac_agg <- FindNeighbors(mac_agg, reduction = \"umap_de\", dims = 1:2) mac_agg <- FindClusters(mac_agg, resolution = 1.3) #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 27 #> Number of edges: 351 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: -0.0139 #> Number of communities: 18 #> Elapsed time: 0 seconds  cell_coords <- Embeddings(mac_agg, reduction = \"umap_de\") %>%   as.data.frame() %>%   rownames_to_column(\"combined_id\") %>%   left_join(mac_agg@meta.data, by = \"combined_id\")  # Plot with clusters and labels ggplot(cell_coords, aes(x = UMAPde_1, y = UMAPde_2, color = seurat_clusters)) +   geom_point(size = 2) +   geom_text_repel(aes(label = combined_id), size = 3, max.overlaps = 10, force_pull = 1) +   theme_minimal() +   guides(color = guide_legend(title = \"Cluster\")) +   labs(x = \"UMAP 1\", y = \"UMAP 2\", title = \"UMAP with Cell Names\") +   theme(legend.position = \"right\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"similarity-to-a-treatment-profile-or-phenotype","dir":"Articles","previous_headings":"Introduction > 4. Methods for compound screening","what":"4.2. Similarity to a treatment profile or phenotype","title":"macpie: overview","text":"Additionally, performing screen, sometimes want measure similarity either existing profile, user-defined gene-set defines desired phenotype.","code":"mac <- compute_multi_screen_profile(mac, target = \"Staurosporine_10\", num_cores = 1) mac_screen_profile <- mac@tools$screen_profile %>%   mutate(logPadj = c(-log10(padj))) %>%   arrange(desc(NES)) %>%   mutate(target_id = factor(target_id, levels = unique(target_id)))   ggplot(mac_screen_profile, aes(target_id, NES)) +   #geom_point(aes(size = logPadj)) +   geom_point() +   facet_wrap(~pathway, scales = \"free\") +   macpie_theme(x_labels_angle = 90, show_x_title = F)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"estimate-of-dose-response","dir":"Articles","previous_headings":"Introduction > 4. Methods for compound screening","what":"4.3. Estimate of dose-response","title":"macpie: overview","text":"macpie can used calculate dose-response curves individual genes, pathways external measurement cell viability available metadata, based R package drc also available paralelisable format function “compute_multiple_dose_response”.","code":"treatments <- mac %>%   select(combined_id) %>%   filter(!grepl(\"DMSO\", combined_id)) %>%   pull() %>%   unique() mac <- compute_multi_de(mac, treatments, control_samples = \"DMSO_0\", method = \"limma_voom\", num_cores = 1) mac <- compute_multi_enrichr(mac, genesets = enrichr_genesets) res <- compute_single_dose_response(data = mac,   gene = \"SOX12\",   normalisation = \"limma_voom\",   treatment_value = \"Staurosporine\") #>  #> Estimated effective doses #>  #>        Estimate Std. Error    Lower    Upper #> e:1:50  0.14865    0.28684 -0.44335  0.74066 res$plot res <- compute_single_dose_response(data = mac,   pathway = \"Myc Targets V1\",   treatment_value = \"SN01005979\") #>  #> Estimated effective doses #>  #>        Estimate Std. Error Lower Upper #> e:1:50   2.9958    10.0000   NaN   NaN res$plot"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie.html","id":"working-with-chemical-descriptors","dir":"Articles","previous_headings":"Introduction > 4. Methods for compound screening","what":"4.4. Working with chemical descriptors","title":"macpie: overview","text":"macpie provides easy way find smiles compounds names, compute chemical descriptors compounds identify important phenotype. example , number rings structures important targeting estrogen activity.","code":"# Add smiles based on a column with generic names of compounds #(warning, this process requires internet connection and can take a while) mac <- compute_smiles(mac, compound_column = \"Compound_ID\")  # Calculate descriptors mac <- compute_chem_descriptors(mac)  #change column names for joining colnames(mac@tools$chem_descriptors)[1] <- \"combined_id\"  # Join with target variable (e.g. pathway score) model_df <- mac@tools$pathway_enrichment %>%   filter(Term == \"Estrogen Response Early\") %>%   left_join(., mac@meta.data, join_by(combined_id)) %>%   filter(Concentration_1 == 10) %>%   select(Treatment_1, Combined.Score, combined_id) %>%   unique() %>%   left_join(., mac@tools$chem_descriptors, join_by(combined_id)) %>%   select(-combined_id) %>%   drop_na()  # Train random forest rf_model <- randomForest(Combined.Score ~ ., data = model_df, importance = TRUE, na.action = na.omit, ntrees = 500)  # Get importance scores rf_importance <- importance(rf_model, type = 1)  # %IncMSE = predictive power rf_ranked <- sort(rf_importance[, 1], decreasing = TRUE)  # Top 20 important descriptors head(rf_ranked, 20) #>   topoShape      WTPT.5     MDEO.22 nRingBlocks  nAromRings     MDEN.22  #>   2.7680771   2.2364722   1.6972571   1.4258409   1.1249207   1.0010015  #>    khs.ssNH    khs.aasN nAromBlocks     nRings4     nRings7     MDEN.11  #>   0.4018917   0.1164148   0.0000000   0.0000000   0.0000000   0.0000000  #>     MDEN.33     khs.tCH    khs.dsCH      khs.sF    khs.dssS     khs.sCl  #>   0.0000000   0.0000000   0.0000000   0.0000000   0.0000000   0.0000000  #>      WTPT.2   khs.ssCH2  #>  -0.4664402  -0.7927457 #>      WTPT.2     nRings5     MDEC.11     nRings7     MDEO.22     MDEO.11 #> 3.361393653 2.150421361 1.214784237 1.001001503 0.783327367 0.709299485 #>   khs.ssCH2 nSmallRings     MDEN.33     MDEC.14   topoShape      ALogp2 #> 0.474955644 0.366086694 0.115293479 0.085759728 0.077678537 0.007617685 #>     nRings4     MDEN.11    khs.dCH2     khs.tCH     khs.dNH    khs.aaNH #> 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 0.000000000 #>     khs.dsN     khs.aaO #> 0.000000000 0.000000000 varImpPlot(rf_model, n.var = 20, main = \"Top 20 Random Forest Features\", type = 2)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_bioc.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"macpie: Working with Bioconductor classes","text":"vignette demonstrates use macpie Bioconductor-native containers: Read raw data SingleCellExperiment (SCE) class SummarizedExperiment (SE) class Perform Bioconductor-native normalization (scuttle::logNormCounts) Convert SCE Seurat object via sce_to_seurat() Run minimal macpie functions vignette: VlnPlot() filter_genes_by_expression() plot_plate_layout() Full workflow macpie functions shown main macpie vignette.","code":"suppressPackageStartupMessages({   library(macpie)   library(Seurat)   library(SingleCellExperiment)   library(SummarizedExperiment)   library(Matrix)   library(scuttle)   # Bioconductor-native normalization   library(dplyr)   library(tibble)   library(DropletUtils) })"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_bioc.html","id":"metadata-import","dir":"Articles","previous_headings":"Overview","what":"1. Metadata import","title":"macpie: Working with Bioconductor classes","text":"Metadata imported using read_metadata(), visualized using plot_metadata_heatmap() like main vignette.","code":"# Load metadata project_metadata <- system.file(\"extdata/PMMSq033_metadata.csv\", package = \"macpie\")  # Load metadata metadata <- read_metadata(project_metadata) plot_metadata_heatmap(metadata)"},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_bioc.html","id":"create-a-singlecellexperiment-object","dir":"Articles","previous_headings":"Overview > 2. Sequencing data import","what":"2.1 Create a SingleCellExperiment object","title":"macpie: Working with Bioconductor classes","text":"First, load raw data SingleCellExperiment (SCE) object, add metadata normalize data using scuttle::logNormCounts().","code":"project_rawdata <- paste0(dir, \"/macpieData/PMMSq033/raw_matrix\") sce <- read10xCounts(project_rawdata, col.names = TRUE,                      row.names = \"symbol\")  # use gene symbols # add metadata sce <- SingleCellExperiment(assays = list(counts = counts(sce))) # with match barcodes colData(sce) <- DataFrame(metadata[match(colnames(sce), metadata$Barcode), ])   # normalize (adds 'logcounts' assay) sce <- scuttle::logNormCounts(sce)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_bioc.html","id":"convert-sce-to-seurat-object","dir":"Articles","previous_headings":"Overview > 2. Sequencing data import","what":"2.2 Convert SCE to Seurat object","title":"macpie: Working with Bioconductor classes","text":"default, sce_to_seurat() uses “counts” assay raw counts “logcounts” assay normalized data. can change parameters SCE object different assay names. function also requires name column colData contains cell IDs (barcodes). also address issues gene names (e.g., underscores) ensure compatibility Seurat.","code":"to_seurat <- sce_to_seurat(sce,                            counts = \"counts\",                           log_counts = \"logcounts\",                           assay = \"RNA\",                           cell_id_col = \"Barcode\",                           project_name = \"PMMSq033\") to_seurat  #> # A Seurat-tibble abstraction: 384 × 22 #> # Features=62700 | Cells=384 | Active assay=RNA | Assays=RNA #>    .cell      orig.ident nCount_RNA nFeature_RNA Plate_ID Well_ID Row   Column #>    <chr>      <fct>           <dbl>        <int> <chr>    <chr>   <chr>  <int> #>  1 AACAAGGTAC PMMSq033          440          348 PMMSq033 A01     A          1 #>  2 AACAATCAGG PMMSq033         6189         3173 PMMSq033 B01     B          1 #>  3 AACACCTAGT PMMSq033          831          590 PMMSq033 A02     A          2 #>  4 AACAGGCAAT PMMSq033         8001         3094 PMMSq033 B02     B          2 #>  5 AACATGGAGA PMMSq033         6998         3307 PMMSq033 C01     C          1 #>  6 AACATTACCG PMMSq033         3494         2004 PMMSq033 D01     D          1 #>  7 AACCAGCCAG PMMSq033        69775        12721 PMMSq033 C02     C          2 #>  8 AACCAGTTGA PMMSq033        52440        11345 PMMSq033 D02     D          2 #>  9 AACCGCGACT PMMSq033         5726         2866 PMMSq033 E01     E          1 #> 10 AACCGGAAGG PMMSq033           63           57 PMMSq033 F01     F          1 #> # ℹ 374 more rows #> # ℹ 14 more variables: Species <chr>, Cell_type <chr>, Model_type <chr>, #> #   Time <fct>, Unit <chr>, Treatment_1 <chr>, Concentration_1 <fct>, #> #   Unit_1 <chr>, Sample_type <chr>, Barcode <chr>, Project <chr>, #> #   Compound_ID <chr>, smiles <chr>, sizeFactor <dbl>"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_bioc.html","id":"sanity-check","dir":"Articles","previous_headings":"Overview > 2. Sequencing data import","what":"2.3 Sanity check","title":"macpie: Working with Bioconductor classes","text":"check conversion successful data Seurat object matches original SCE object. number wells, well barcodes match. Additionally, gene names Seurat object match SCE object.","code":"stopifnot(ncol(to_seurat) == ncol(sce)) stopifnot(all(colnames(to_seurat) == sce$Barcode)) stopifnot(all(rownames(to_seurat@assays$RNA$counts) == rownames(to_seurat@assays$RNA$data)))"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_bioc.html","id":"basic-quality-control-and-filtering","dir":"Articles","previous_headings":"Overview","what":"3. Basic quality control and filtering","title":"macpie: Working with Bioconductor classes","text":"Now, can use basic macpie functions quality control filtering.","code":"to_seurat <- to_seurat %>%   mutate(combined_id = str_c(Treatment_1, Concentration_1, sep = \"_\")) %>%   mutate(combined_id = gsub(\" \", \"\", .data$combined_id)) %>%   mutate(combined_id = make.names(combined_id))   # Filter by read count per sample group to_seurat <- filter_genes_by_expression(to_seurat,                                   group_by = \"combined_id\",                                   min_counts = 5,                                   min_samples = 1)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_bioc.html","id":"visualize-qc-metrics","dir":"Articles","previous_headings":"Overview > 3. Basic quality control and filtering","what":"3.1 Visualize QC metrics","title":"macpie: Working with Bioconductor classes","text":"expect see violin plots using Seurat object main vigette.","code":"to_seurat[[\"percent.mt\"]] <- PercentageFeatureSet(to_seurat, pattern = \"^mt-|^MT-\") to_seurat[[\"percent.ribo\"]] <- PercentageFeatureSet(to_seurat, pattern = \"^Rp[slp][[:digit:]]|^Rpsa|^RP[SLP][[:digit:]]|^RPSA\")  # Example of a function from Seurat quality control  VlnPlot(to_seurat, features = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent.mt\", \"percent.ribo\"),          ncol = 4, group.by = \"Sample_type\") &    scale_fill_manual(values = macpie_colours$discrete)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_bioc.html","id":"subset-data-for-a-specific-project-and-visualize-plate-layout","dir":"Articles","previous_headings":"Overview > 3. Basic quality control and filtering","what":"3.2 Subset data for a specific project and visualize plate layout","title":"macpie: Working with Bioconductor classes","text":"subset data include cells “Current” project visualize plate layout using plot_plate_layout(). interactive plot allows us hover wells see detailed information. plot identical one generated using Seurat object main vignette.","code":"unique(to_seurat$Project) #> [1] \"Trial\"   \"Current\" to_seurat <- to_seurat %>%   filter(Project == \"Current\")  # Interactive QC plot plate layout (all metadata columns can be used): p <- plot_plate_layout(to_seurat, \"nCount_RNA\", \"combined_id\") girafe(ggobj = p,    fonts = list(sans = \"sans\"),   options = list(     opts_hover(css = \"stroke:black; stroke-width:0.8px;\")  # <- slight darkening   ))"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_bioc.html","id":"summary","dir":"Articles","previous_headings":"Overview","what":"4. Summary","title":"macpie: Working with Bioconductor classes","text":"vignette, demonstrated work Bioconductor-native classes using macpie. covered following steps: Importing metadata visualizing . Creating SingleCellExperiment object raw data, adding metadata, normalizing data. Converting SingleCellExperiment object Seurat object using sce_to_seurat(). Performing basic quality control filtering using macpie functions, including visualizing QC metrics plotting plate layout.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_short.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"macpie: overview","text":"MAC-seq cost-effective, high-throughput transcriptomic platform, developed collaboration Victorian Centre Functional Genomics (VCFG) Molecular Genomics Core (MGC) facilities Peter MacCallum Cancer Centre (Peter Mac), primarily designed small molecule screening. However, versatility extends beyond application, thanks integration high-throughput microscopy 3D cell culturing techniques. macpie toolkit designed researchers, originally MAC-seq data mind, validated general High-Throughput Transcriptomics (HTTr) data applications. primary aim deliver latest tools quality control (QC), visualization, analysis. macpie result collaborative effort workgroup PeterMac, substantial support VCFG amd MGC core facilities. vignette cover basic functionality macpie, input, quality control transcriptional screen-related analyses. -depth workflows, please refer vignettes https://pmcc-bioinformaticscore.github.io/macpie/articles/macpie.html.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_short.html","id":"metadata-import-and-qc","dir":"Articles","previous_headings":"Introduction","what":"1. Metadata import and QC","title":"macpie: overview","text":"Key points: metadata contain least columns Plate_ID, Well_ID, Row, Column, Species, Sample_type, Treatment_1, Concentration_1 Barcode. Metadata tabular format contain standardised set columns define coordinates sample plate, provide minimum information sample, allow connection transcriptomic data sample barcodes. ensure integrity metadata future analyses, provide user set tools verify metadata consistency visualize key variables, described depth QC vignette. first visually inspect experimental variables, order identify potential artefacts.  Key Lessons Robust Experimental Design Based experience, specific metadata need vary greatly experiment’s design. crucial lessons ’ve learned help achieve reliable results: Plate Layout Matters: Always place replicate sample wells assay plate, across multiple plates. Minimum Replicates: Aim minimum 3 replicates per condition ensure statistical robustness. Strategic Negative Controls: negative control wells, recommend including 10 wells randomized across assay plate. provides robust baseline.","code":"#install.packages(\"macpie\")  # or devtools::install_github(\"PMCC-BioinformaticsCore/macpie\") library(macpie) library(enrichR) library(randomForest) library(pheatmap)  # Load metadata project_metadata <- system.file(\"extdata/PMMSq033_metadata.csv\", package = \"macpie\")  # Load metadata metadata <- read_metadata(project_metadata) plot_metadata_heatmap(metadata)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_short.html","id":"sequencing-data-import-and-qc","dir":"Articles","previous_headings":"Introduction","what":"2. Sequencing data import and QC","title":"macpie: overview","text":"Key points: pay special attention removal lowly expressed genes : use plot_plate_layout check plate-level effects (edge vs centre, plates) use plot_mds check sample grouping (umap/pca also available using Seurat’s functions) use compute_qc_metrics, plot_qc_metrics_heatmap, plot_distance check sample variability outliers use plot_rle check row/column/plate effects compare normalization methods detailed methods avaailable vignette Quality control","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_short.html","id":"import-data-to-tidyseurat-object","dir":"Articles","previous_headings":"Introduction > 2. Sequencing data import and QC","what":"2.1 Import data to tidySeurat object","title":"macpie: overview","text":"Data access: load raw counts providing Read10X function path directory containing matrix.mtx.gz, barcodes.tsv.gz, features.tsv.gz, commonly “raw_matrix” CellRanger StarSolo output full manuscript dataset (>10 MB .rds files) publicly available https://zenodo.org/records/15778812. use data(mini_mac) load subsample (308 samples, 200 genes) full dataset, commented code ","code":"## 1. Load your own gene counts per sample or 2. data from the publication #project_rawdata <- \"raw_matrix\" #project_name <- \"PMMSq033\" #raw_counts <- Read10X(data.dir = project_rawdata) # ## Create tidySeurat object #mac <- CreateSeuratObject(counts = raw_counts, #                          project = project_name, #                          min.cells = 1, #                          min.features = 1)  # 3. Alternatively, load a pre-made example: data(mini_mac) mac <- mini_mac  # Join gene counts per sample with metadata (if not already included) if (nrow(mac[[]])==0) {   mac <- mac %>%   inner_join(metadata, by = c(\".cell\" = \"Barcode\")) }  # Create unique identifier for your treatments based on metadata mac <- mac %>%   mutate(combined_id = str_c(Treatment_1, Concentration_1, sep = \"_\")) %>%   mutate(combined_id = gsub(\" \", \"\", .data$combined_id)) %>%   mutate(combined_id = make.names(combined_id))  # # Filter by read count per sample group mac <- filter_genes_by_expression(mac,                                   group_by = \"combined_id\",                                   min_counts = 1,                                   min_samples = 1)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_short.html","id":"basic-qc-metrics","dir":"Articles","previous_headings":"Introduction > 2. Sequencing data import and QC","what":"2.2 Basic QC metrics","title":"macpie: overview","text":"macpie allows use common QC plots Seurat package visualise number genes, reads, percentage mitochondrial ribosomal genes per sample.  addition, can apply tidyverse functions explore dataset. example, let’s subset Seurat object based column “Project” metadata visualise grouping data plate vs MDS plot. Plate layout plots provide interactive way inspect spatial patterns across plate, helping identify anomalies unexpected trends. hovering plot, sample groups automatically highlighted aid interpretation.","code":"# Calculate the percent of mitochondrial and ribosomal genes mac[[\"percent.mt\"]] <- PercentageFeatureSet(mac, pattern = \"^mt-|^MT-\") mac[[\"percent.ribo\"]] <- PercentageFeatureSet(mac, pattern = \"^Rp[slp][[:digit:]]|^Rpsa|^RP[SLP][[:digit:]]|^RPSA\")  # Example of a function from Seurat quality control  VlnPlot(mac, features = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent.mt\", \"percent.ribo\"),          ncol = 4, group.by = \"Sample_type\") &    scale_fill_manual(values = macpie_colours$discrete) unique(mac$Project) #> [1] \"Current\" mac <- mac %>%   filter(Project == \"Current\")  # Interactive QC plot plate layout (all metadata columns can be used): p <- plot_plate_layout(mac, \"nCount_RNA\", \"combined_id\") girafe(ggobj = p,    fonts = list(sans = \"sans\"),   options = list(     opts_hover(css = \"stroke:black; stroke-width:0.8px;\")  # <- slight darkening   ))"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_short.html","id":"sample-grouping-with-mds-plot","dir":"Articles","previous_headings":"Introduction > 2. Sequencing data import and QC > 2.2 Basic QC metrics","what":"2.2.1 Sample grouping with MDS plot","title":"macpie: overview","text":"order assess sample grouping, visualise sample similarity based limma’s MDS (MultiDimensional Scaling) function. Samples treated lower concentration compound often cluster close negative (vehicle) control. Hovering individual dots reveals sample identity grouping.","code":"p <- plot_mds(mac, group_by = \"Sample_type\", label = \"combined_id\", n_labels = 30) girafe(ggobj = p, fonts = list(sans = \"sans\"))"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_short.html","id":"distribution-of-read-counts","dir":"Articles","previous_headings":"Introduction > 2. Sequencing data import and QC > 2.2 Basic QC metrics","what":"2.2.2 Distribution of read counts","title":"macpie: overview","text":"Visualising distribution read counts across treatments easy way compare effects treatments estimate sample variability. Read count commonly directly proportional number cells.","code":"qc_stats <- compute_qc_metrics(mac, group_by = \"combined_id\", order_by = \"median\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_short.html","id":"variability-among-all-replicates","dir":"Articles","previous_headings":"Introduction > 2. Sequencing data import and QC > 2.2 Basic QC metrics","what":"2.2.3 Variability among all replicates","title":"macpie: overview","text":"relation previous plot, want user ability quantify dispersion reads sample replicates. Therefore, provide access several statistical metrics standard deviation (sd_value), z score (z_score), mad (mad_value) IQR (IQR) can used parameter function plot_qc_metrics individually, assessed function plot_qc_metrics_heatmap.  Identifying outliers batch effects, especially untreated samples, especially important downstream analysis. statistical methods quantify variability among sample groups inter-replicate variability please refer vignette Quality control.","code":"plot_qc_metrics_heatmap(qc_stats$stats_summary)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_short.html","id":"correction-of-the-batch-effect","dir":"Articles","previous_headings":"Introduction > 2. Sequencing data import and QC > 2.2 Basic QC metrics","what":"2.2.4 Correction of the batch effect","title":"macpie: overview","text":"Several methods available scaling normalizing transcriptomic data, effects clearly visualized using RLE (Relative Log Expression) plots. case, limma_voom provides lowest average coefficient variation, compared methods “raw”, Seurat “SCT” “edgeR”.","code":"# First we will subset the data to look at control, DMSO samples only mac_dmso <- mac %>%   filter(Treatment_1 == \"DMSO\")  # Run the RLE function plot_rle(mac_dmso, label_column = \"Row\", normalisation = \"limma_voom\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_short.html","id":"differential-gene-expression","dir":"Articles","previous_headings":"Introduction","what":"3. Differential gene expression","title":"macpie: overview","text":"Key points: use compute_single_de perform differential expression analysis one treatment group vs control use compute_multi_de perform differential expression analyses treatment groups vs control use volcano plot, box plot heatmap show results analyses visualise gene expression levels use enrichr pathway enrichment analysis detailed methods available vignette Transcriptional analyses","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_short.html","id":"single-comparison","dir":"Articles","previous_headings":"Introduction > 3. Differential gene expression","what":"3.1. Single comparison","title":"macpie: overview","text":"Similar RNA-seq, quality differential gene expression analysis MAC-seq depends low variability among replicates suitability statistical model. aspects assessed quality control stage workflow. Results differential expression analysis classically visualised volcano plot.  Based results, can quickly check gene expression levels counts per million (CPM) selected genes treatment control samples described .","code":"# First perform the differential expression analysis treatment_samples <- \"Staurosporine_10\" control_samples <- \"DMSO_0\" top_table <- compute_single_de(mac, treatment_samples, control_samples, method = \"limma_voom\")  # Let's visualise the results with a volcano plot plot_volcano(top_table, max.overlaps = 16) genes <- top_table$gene[1:6] group_by <- \"combined_id\" plot_counts(mac, genes, group_by, treatment_samples, control_samples, normalisation = \"cpm\", color_by = \"combined_id\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_short.html","id":"pathway-analysis","dir":"Articles","previous_headings":"Introduction > 3. Differential gene expression","what":"3.2. Pathway analysis","title":"macpie: overview","text":"Differential gene expression results individual comparisons treatment vs control usually performed functions package enrichR fgsea. following case, effect Staurosporine breast cancer cells Myc inactivation can observed pathway enrichment analyses.","code":"top_genes <- top_table %>%   filter(p_value_adj < 0.05) %>%   select(gene) %>%   pull()  enriched <- enrichR::enrichr(top_genes, c(\"MSigDB_Hallmark_2020\")) #> Uploading data to Enrichr... Done. #>   Querying MSigDB_Hallmark_2020... Done. #> Parsing results... Done. p1 <- enrichR::plotEnrich(enriched[[1]]) +    macpie_theme(legend_position_ = 'right') +    scale_fill_gradientn(colors = macpie_colours$divergent)  gridExtra::grid.arrange(p1, ncol = 1)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_short.html","id":"differential-gene-expression---multiple-comparisons","dir":"Articles","previous_headings":"Introduction > 3. Differential gene expression","what":"3.3. Differential gene expression - multiple comparisons","title":"macpie: overview","text":"Since MAC-seq commonly used high-throughput screening compound libraries, often want compare multiple samples screen vs control. process can easily parallelised. First select vector “treatments” combined_ids contain word “DMSO”. (Warning, due limitations “mclapply”, parallelisation speedup currently works OSX Linux machines, Windows.) often want ask genes differentially expressed one treatment group. , can visualise treatment groups shared differentially expressed genes, defined top 5 DE genes single drug comparison (treatment vs control) found least 2 different treatment groups. heatmap shows shared differentially expressed genes corresponding log2FC values.","code":"# Filter out lower concentrations of compounds and untreated samples treatments <- mac %>%   filter(Concentration_1 == 10) %>%   select(combined_id) %>%   filter(!grepl(\"DMSO\", combined_id)) %>%   pull() %>%   unique() mac <- compute_multi_de(mac, treatments, control_samples = \"DMSO_0\", method = \"limma_voom\", num_cores = 1) plot_multi_de(mac, group_by = \"combined_id\", value = \"log2FC\", p_value_cutoff = 0.01, direction=\"up\", n_genes = 5, control = \"DMSO_0\", by=\"fc\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_short.html","id":"pathway-analysis---multiple-comparisons","dir":"Articles","previous_headings":"Introduction > 3. Differential gene expression","what":"3.4. Pathway analysis - multiple comparisons","title":"macpie: overview","text":"pathway enrichment analysis done R package enrichR, can summarised heatmap, visualising direct offtarget effects perturbations.","code":"# Load genesets from enrichr for a specific species or define your own enrichr_genesets <- download_geneset(\"human\", \"MSigDB_Hallmark_2020\") mac <- compute_multi_enrichr(mac, genesets = enrichr_genesets)  enriched_pathways_mat <- Tool(mini_mac, slot = \"pathway_enrichment\") %>%   bind_rows() %>%   select(combined_id, Term, Combined.Score) %>%   pivot_wider(names_from = combined_id, values_from = Combined.Score) %>%   column_to_rownames(var = \"Term\") %>%   mutate(across(everything(), ~ ifelse(is.na(.), 0, log1p(.)))) %>%  # Replace NA with 0 across all columns   as.matrix()  pheatmap(enriched_pathways_mat, color = macpie_colours$continuous_rev)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_short.html","id":"methods-for-compound-screening","dir":"Articles","previous_headings":"Introduction","what":"4. Methods for compound screening","title":"macpie: overview","text":"Key points: use plot_de_umap find compounds behave similarly based proximity UMAP maps use compute_single_dose_response evaluate impact compound concentrations gene expression pathway enrichment use compute_multi_screen_profile find perturbations similar target profile known gene set detailed methods avaailable vignette Compound screening","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_short.html","id":"umap-clustering-based-on-de-genes","dir":"Articles","previous_headings":"Introduction > 4. Methods for compound screening","what":"4.1. UMAP clustering based on DE genes","title":"macpie: overview","text":"Instead plotting UMAP individual samples, can also visualise samples UMAP differential gene expression vs control. allows us use batch-corrected data reduce replicate noise, showing grouping treatments.","code":"mac_agg <- aggregate_by_de(mac) mac_agg <- compute_de_umap(mac_agg) mac_agg <- FindNeighbors(mac_agg, reduction = \"umap_de\", dims = 1:2) mac_agg <- FindClusters(mac_agg, resolution = 1.3) #> Modularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck #>  #> Number of nodes: 27 #> Number of edges: 351 #>  #> Running Louvain algorithm... #> Maximum modularity in 10 random starts: -0.0165 #> Number of communities: 7 #> Elapsed time: 0 seconds  cell_coords <- Embeddings(mac_agg, reduction = \"umap_de\") %>%   as.data.frame() %>%   rownames_to_column(\"combined_id\") %>%   left_join(mac_agg[[]], by = \"combined_id\")  # Plot with clusters and labels ggplot(cell_coords, aes(x = UMAPde_1, y = UMAPde_2, color = seurat_clusters)) +   geom_point(size = 2) +   geom_text_repel(aes(label = combined_id), size = 3, max.overlaps = 10, force_pull = 1) +   theme_minimal() +   guides(color = guide_legend(title = \"Cluster\")) +   labs(x = \"UMAP 1\", y = \"UMAP 2\", title = \"UMAP with Cell Names\") +   theme(legend.position = \"right\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_short.html","id":"similarity-to-a-treatment-profile-or-phenotype","dir":"Articles","previous_headings":"Introduction > 4. Methods for compound screening","what":"4.2. Similarity to a treatment profile or phenotype","title":"macpie: overview","text":"Additionally, performing screen, sometimes want measure similarity either existing profile, user-defined gene-set defines desired phenotype.","code":"mac <- compute_multi_screen_profile(mac, target = \"Staurosporine_10\", n_genes_profile = 50, direction = \"down\", num_cores = 1) mac_screen_profile <- Tool(mac, slot = \"screen_profile\") %>%   mutate(logPadj = c(-log10(padj))) %>%   arrange(desc(NES)) %>%   mutate(target_id = factor(target_id, levels = unique(target_id)))   ggplot(mac_screen_profile, aes(target_id, NES)) +   #geom_point(aes(size = logPadj)) +   geom_point() +   facet_wrap(~pathway, scales = \"free\") +   macpie_theme(x_labels_angle = 90, show_x_title = FALSE)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/macpie_short.html","id":"estimate-of-dose-response","dir":"Articles","previous_headings":"Introduction > 4. Methods for compound screening","what":"4.3. Estimate of dose-response","title":"macpie: overview","text":"macpie can used calculate dose-response curves individual genes, pathways external measurement cell viability available metadata, based R package drc also available paralelisable format function “compute_multiple_dose_response”.","code":"treatments <- mac %>%   select(combined_id) %>%   filter(!grepl(\"DMSO\", combined_id)) %>%   pull() %>%   unique() mac <- compute_multi_de(mac, treatments, control_samples = \"DMSO_0\", method = \"limma_voom\", num_cores = 1) mac <- compute_multi_enrichr(mac, genesets = enrichr_genesets) res <- compute_single_dose_response(data = mac,   gene = \"DIP2C\",   normalisation = \"limma_voom\",   treatment_value = \"Staurosporine\") #>  #> Estimated effective doses #>  #>        Estimate Std. Error   Lower   Upper #> e:1:50   2.6132     5.0375 -7.7838 13.0101 res$plot res <- compute_single_dose_response(data = mac,   pathway = \"p53 Pathway\",   treatment_value = \"Camptothecin\") #>  #> Estimated effective doses #>  #>        Estimate Std. Error Lower Upper #> e:1:50   7.7185    10.0000   NaN   NaN res$plot #> R version 4.3.3 (2024-02-29) #> Platform: aarch64-apple-darwin20 (64-bit) #> Running under: macOS 15.6.1 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: Australia/Melbourne #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #>  [1] future_1.40.0        randomForest_4.7-1.2 macpie_1.0.0         #>  [4] testthat_3.2.3       ggrepel_0.9.6        Seurat_5.2.1         #>  [7] SeuratObject_5.1.0   sp_2.2-0             gridExtra_2.3        #> [10] enrichR_3.4          pheatmap_1.0.13      ggiraph_0.8.13       #> [13] tibble_3.3.0         tidyr_1.3.1          ggplot2_3.5.2        #> [16] stringr_1.5.1        dplyr_1.1.4          #>  #> loaded via a namespace (and not attached): #>   [1] IRanges_2.36.0              R.methodsS3_1.8.2           #>   [3] dichromat_2.0-0.1           progress_1.2.3              #>   [5] urlchecker_1.0.1            goftest_1.2-3               #>   [7] Biostrings_2.70.3           TH.data_1.1-3               #>   [9] vctrs_0.6.5                 spatstat.random_3.4-1       #>  [11] digest_0.6.37               png_0.1-8                   #>  [13] deldir_2.0-4                parallelly_1.45.0           #>  [15] MASS_7.3-60.0.1             pkgdown_2.1.3               #>  [17] reshape2_1.4.4              httpuv_1.6.16               #>  [19] foreach_1.5.2               BiocGenerics_0.48.1         #>  [21] withr_3.0.2                 xfun_0.52                   #>  [23] ellipsis_0.3.2              survival_3.8-3              #>  [25] memoise_2.0.1               drc_3.0-1                   #>  [27] profvis_0.4.0               systemfonts_1.2.3           #>  [29] ragg_1.4.0                  zoo_1.8-14                  #>  [31] gtools_3.9.5                pbapply_1.7-2               #>  [33] R.oo_1.27.1                 Formula_1.2-5               #>  [35] prettyunits_1.2.0           KEGGREST_1.42.0             #>  [37] promises_1.3.3              httr_1.4.7                  #>  [39] EDASeq_2.36.0               RUVSeq_1.36.0               #>  [41] restfulr_0.0.15             globals_0.17.0              #>  [43] fitdistrplus_1.2-2          rstudioapi_0.17.1           #>  [45] zinbwave_1.24.0             miniUI_0.1.2                #>  [47] generics_0.1.4              curl_6.4.0                  #>  [49] S4Vectors_0.40.2            zlibbioc_1.48.2             #>  [51] polyclip_1.10-7             GenomeInfoDbData_1.2.11     #>  [53] SparseArray_1.2.4           xtable_1.8-4                #>  [55] desc_1.4.3                  doParallel_1.0.17           #>  [57] evaluate_1.0.4              S4Arrays_1.2.1              #>  [59] BiocFileCache_2.10.2        ttservice_0.4.1             #>  [61] hms_1.1.3                   GenomicRanges_1.54.1        #>  [63] irlba_2.3.5.1               colorspace_2.1-1            #>  [65] filelock_1.0.3              ROCR_1.0-11                 #>  [67] reticulate_1.42.0           readxl_1.4.5                #>  [69] spatstat.data_3.1-6         magrittr_2.0.3              #>  [71] lmtest_0.9-40               readr_2.1.5                 #>  [73] later_1.4.2                 lattice_0.22-7              #>  [75] glmGamPoi_1.14.3            spatstat.geom_3.4-1         #>  [77] future.apply_1.11.3         genefilter_1.84.0           #>  [79] scattermore_1.2             XML_3.99-0.18               #>  [81] cowplot_1.1.3               matrixStats_1.5.0           #>  [83] RcppAnnoy_0.0.22            pillar_1.10.2               #>  [85] nlme_3.1-168                iterators_1.0.14            #>  [87] compiler_4.3.3              RSpectra_0.16-2             #>  [89] stringi_1.8.7               tensor_1.5.1                #>  [91] SummarizedExperiment_1.32.0 devtools_2.4.5              #>  [93] GenomicAlignments_1.38.2    plyr_1.8.9                  #>  [95] crayon_1.5.3                abind_1.4-8                 #>  [97] BiocIO_1.12.0               tidyseurat_0.8.0            #>  [99] locfit_1.5-9.12             bit_4.6.0                   #> [101] sandwich_3.1-1              fastmatch_1.1-6             #> [103] codetools_0.2-20            multcomp_1.4-28             #> [105] textshaping_1.0.1           openssl_2.3.3               #> [107] bslib_0.9.0                 plotly_4.11.0               #> [109] mime_0.13                   splines_4.3.3               #> [111] Rcpp_1.0.14                 fastDummies_1.7.5           #> [113] dbplyr_2.5.0                cellranger_1.1.0            #> [115] interp_1.1-6                knitr_1.50                  #> [117] blob_1.2.4                  WriteXLS_6.8.0              #> [119] fs_1.6.6                    listenv_0.9.1               #> [121] pkgbuild_1.4.8              Matrix_1.6-5                #> [123] statmod_1.5.0               tzdb_0.5.0                  #> [125] pkgconfig_2.0.3             tools_4.3.3                 #> [127] cachem_1.1.0                unikn_1.0.0                 #> [129] RSQLite_2.4.1               viridisLite_0.4.2           #> [131] DBI_1.2.3                   fastmap_1.2.0               #> [133] rmarkdown_2.29              scales_1.4.0                #> [135] grid_4.3.3                  usethis_3.1.0               #> [137] ica_1.0-3                   Rsamtools_2.18.0            #> [139] sass_0.4.10                 patchwork_1.3.1             #> [141] dotCall64_1.2               carData_3.0-5               #> [143] RANN_2.6.2                  farver_2.1.2                #> [145] yaml_2.3.10                 latticeExtra_0.6-30         #> [147] MatrixGenerics_1.14.0       rtracklayer_1.62.0          #> [149] cli_3.6.5                   purrr_1.0.4                 #> [151] stats4_4.3.3                lifecycle_1.0.4             #> [153] askpass_1.2.1               uwot_0.2.3                  #> [155] Biobase_2.62.0              mvtnorm_1.3-3               #> [157] sessioninfo_1.2.3           BiocParallel_1.36.0         #> [159] annotate_1.80.0             gtable_0.3.6                #> [161] rjson_0.2.23                umap_0.2.10.0               #> [163] ggridges_0.5.6              progressr_0.15.1            #> [165] parallel_4.3.3              limma_3.58.1                #> [167] softImpute_1.4-3            jsonlite_2.0.0              #> [169] edgeR_4.0.16                RcppHNSW_0.6.0              #> [171] bitops_1.0-9                bit64_4.6.0-1               #> [173] brio_1.1.5                  Rtsne_0.17                  #> [175] spatstat.utils_3.1-4        jquerylib_0.1.4             #> [177] spatstat.univar_3.1-3       R.utils_2.13.0              #> [179] lazyeval_0.2.2              shiny_1.10.0                #> [181] htmltools_0.5.8.1           sctransform_0.4.2           #> [183] rappdirs_0.3.3              glue_1.8.0                  #> [185] spam_2.11-1                 httr2_1.1.2                 #> [187] XVector_0.42.0              RCurl_1.98-1.17             #> [189] rprojroot_2.0.4             jpeg_0.1-11                 #> [191] igraph_2.1.4                R6_2.6.1                    #> [193] DESeq2_1.42.1               SingleCellExperiment_1.24.0 #> [195] forcats_1.0.0               labeling_0.4.3              #> [197] GenomicFeatures_1.54.4      cluster_2.1.8.1             #> [199] pkgload_1.4.0               GenomeInfoDb_1.38.8         #> [201] mcprogress_0.1.1            DelayedArray_0.28.0         #> [203] tidyselect_1.2.1            plotrix_3.8-4               #> [205] xml2_1.3.8                  car_3.1-3                   #> [207] AnnotationDbi_1.64.1        KernSmooth_2.23-26          #> [209] data.table_1.17.6           fgsea_1.28.0                #> [211] htmlwidgets_1.6.4           aroma.light_3.32.0          #> [213] RColorBrewer_1.1-3          hwriter_1.3.2.1             #> [215] biomaRt_2.58.2              rlang_1.1.6                 #> [217] spatstat.sparse_3.1-0       tidyverse_2.0.0             #> [219] spatstat.explore_3.4-3      uuid_1.2-1                  #> [221] remotes_2.5.0               ShortRead_1.60.0            #> [223] fansi_1.0.6"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/quality_control.html","id":"metadata-import-and-validation","dir":"Articles","previous_headings":"","what":"1. Metadata import and validation","title":"Quality control","text":"part macpie package, provide set functions import validate metadata. metadata file contain information samples, including sample names, experimental conditions, relevant variables. metadata file tabular format, can contain information relevant user, least contain columns Plate_ID, Well_ID, Row, Column, Species, Sample_type, Treatment_1, Concentration_1 Barcode. Key points: use validate_metadata check metadata file common errors use plot_metadata_heatmap visually inspect metadata integrity","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/quality_control.html","id":"metadata-input","dir":"Articles","previous_headings":"1. Metadata import and validation","what":"1.1 Metadata input","title":"Quality control","text":"","code":"#install.packages(\"macpie\")  # or devtools::install_github(\"PMCC-BioinformaticsCore/macpie\") library(macpie)  # Define project variables project_name <- \"PMMSq033\" project_metadata <- system.file(\"extdata/PMMSq033_metadata.csv\", package = \"macpie\") # Load metadata metadata <- read_metadata(project_metadata) #metadata <- read_metadata(project_metadata)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/quality_control.html","id":"check-column-names","dir":"Articles","previous_headings":"1. Metadata import and validation","what":"1.2 Check column names","title":"Quality control","text":"","code":"colnames(metadata) #>  [1] \"Plate_ID\"        \"Well_ID\"         \"Row\"             \"Column\"          #>  [5] \"Species\"         \"Cell_type\"       \"Model_type\"      \"Time\"            #>  [9] \"Unit\"            \"Treatment_1\"     \"Concentration_1\" \"Unit_1\"          #> [13] \"Sample_type\"     \"Barcode\"         \"Project\"         \"Compound_ID\"     #> [17] \"smiles\""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/quality_control.html","id":"validate-metadata","dir":"Articles","previous_headings":"1. Metadata import and validation","what":"1.3 Validate metadata","title":"Quality control","text":"validate_metadata function check metadata file common errors, missing values, incorrect data types, potential issues. also provide summary metadata file, including number samples, number variables, number missing values.","code":"# Validate metadata validate_metadata(metadata) #>  #> Validation Issues: #> smiles: Contains special characters. #>  #> smiles: Contains special characters. #> Model_type: Contains special characters. #> Compound_ID: Contains special characters. #>  #> Generating summary table grouped by Plate_ID... #>   Plate_ID count_Species count_Cell_type count_Model_type count_Time count_Unit #> 1 PMMSq033             1               3                3          1          1 #>   count_Treatment_1 count_Concentration_1 count_Unit_1 count_Sample_type #> 1                36                     4            1                 3"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/quality_control.html","id":"visualize-metadata","dir":"Articles","previous_headings":"1. Metadata import and validation","what":"1.4 Visualize metadata","title":"Quality control","text":"order correct artefacts metadata errors, good practice visually inspect large number experimental variables. case multiple plates, can specify plate visualise, though example one present.","code":"plot_metadata_heatmap(metadata, plate = \"PMMSq033\")"},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/quality_control.html","id":"import-data-to-tidyseurat-object","dir":"Articles","previous_headings":"2. Quality control","what":"2.1 Import data to tidySeurat object","title":"Quality control","text":"Data access full dataset (>10 MB .rds files) currently restricted release become publicly available upon publication (Zenodo). meantime, please contact us early access. Data imported tidySeurat object, allows usage regular Seurat functions, well functionality tidyverse. case multiple plates, instead one directory submit vector directories (named directories, names become barcode prefixes) Read10X function. example, can use common QC plots Seurat package visualise number genes, reads, percentage mitochondrial ribosomal genes per sample. Similar single-cell experiments, higher amounts mitochondrial ribosomal expression can point reduced quality samples.  addition, can use tidyverse functions explore dataset. example, let’s subset Seurat object based column “Project” metadata visualise grouping data plate vs MDS plot. Plate layout plots useful visualising spatial anomalies unexpected patterns.","code":"# Import raw data #project_rawdata <- \"/home/rstudio/macpie/macpieData/PMMSq033/raw_matrix/\" #raw_counts <- Read10X(data.dir = project_rawdata)  # 1. Load your own gene counts per sample or 2. data from the publication project_rawdata <- paste0(dir, \"/macpieData/PMMSq033/raw_matrix\") project_name <- \"PMMSq033\" raw_counts <- Read10X(data.dir = project_rawdata)   #for multiple plates: #raw_counts <- Read10X(data.dir = c(\"path1\", \"path2\", ... \"pathN\"))  # Create tidySeurat object mac <- CreateSeuratObject(counts = raw_counts,                           project = project_name,                           min.cells = 1,                           min.features = 1) #> Warning: Feature names cannot have underscores ('_'), replacing with dashes #> ('-')  # Join with metadata mac <- mac %>%   inner_join(metadata, by = c(\".cell\" = \"Barcode\"))  # Add unique identifier mac <- mac %>%   mutate(combined_id = str_c(Treatment_1, Concentration_1, sep = \"_\")) %>%   mutate(combined_id = gsub(\" \", \"\", .data$combined_id))  # Filter by read count per sample group mac <- filter_genes_by_expression(mac,                                    group_by = \"combined_id\",                                    min_counts = 10,                                    min_samples = 2) # Calculate percent of mitochondrial and ribosomal genes mac[[\"percent.mt\"]] <- PercentageFeatureSet(mac, pattern = \"^mt-|^MT-\") mac[[\"percent.ribo\"]] <- PercentageFeatureSet(mac, pattern = \"^Rp[slp][[:digit:]]|^Rpsa|^RP[SLP][[:digit:]]|^RPSA\")  # Example of a function from Seurat QC  VlnPlot(mac, features = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent.mt\", \"percent.ribo\"),          ncol = 4, group.by = \"Sample_type\") &    scale_fill_manual(values = macpie_colours$discrete)  #> Warning: Default search for \"data\" layer in \"RNA\" assay yielded no results; #> utilizing \"counts\" layer instead. #> Warning: The `slot` argument of `FetchData()` is deprecated as of SeuratObject 5.0.0. #> ℹ Please use the `layer` argument instead. #> ℹ The deprecated feature was likely used in the Seurat package. #>   Please report the issue at <https://github.com/satijalab/seurat/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> Warning: `PackageCheck()` was deprecated in SeuratObject 5.0.0. #> ℹ Please use `rlang::check_installed()` instead. #> ℹ The deprecated feature was likely used in the Seurat package. #>   Please report the issue at <https://github.com/satijalab/seurat/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. unique(mac$Project) #> [1] \"Trial\"   \"Current\" mac <- mac %>%   filter(Project == \"Current\")  # QC plot plate layout (all metadata columns can be used): p <- plot_plate_layout(mac, \"nCount_RNA\", \"combined_id\") girafe(ggobj = p,    fonts = list(sans = \"sans\"),   options = list(     opts_hover(css = \"stroke:black; stroke-width:0.8px;\")  # <- slight darkening   ))"},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/quality_control.html","id":"sample-grouping-with-mds-plot","dir":"Articles","previous_headings":"2. Quality control > 2.2 Basic QC metrics","what":"2.2.1 Sample grouping with MDS plot","title":"Quality control","text":"first step, visualise grouping samples based top 500 expressed genes limma’s MDS function. warning, samples treated lower concentration compound often cluster close negative (vehicle) control. Hovering individual dots reveals sample identity grouping.","code":"p <- plot_mds(mac, group_by = \"Sample_type\", label = \"combined_id\", n_labels = 30) #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. girafe(ggobj = p, fonts = list(sans = \"sans\")) #> Warning: ggrepel: 5 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/quality_control.html","id":"sample-grouping-with-umap-plot","dir":"Articles","previous_headings":"2. Quality control > 2.2 Basic QC metrics","what":"2.2.2 Sample grouping with UMAP plot","title":"Quality control","text":"Since operating standard Seurat object, can also use standard scRNA-seq workflow.","code":"mac_sct <- SCTransform(mac, verbose = FALSE) %>%   RunPCA(verbose = FALSE) %>%   RunUMAP(dims = 1:30, verbose = FALSE)  # For standard Seurat approach use: # DimPlot(mac_sct, reduction = \"umap\", group.by = \"Sample_type\", cols = macpie_colours$discrete)  umap_data <- cbind(Embeddings(mac_sct, \"umap\"), mac_sct@meta.data) %>%   tibble::as_tibble(rownames = \"cell\") %>%   mutate(     tooltip = combined_id   )  # Merge with metadata using Barcode == cell p <- ggplot(umap_data, aes(x = umap_1, y = umap_2)) +   geom_point_interactive(aes(color = Sample_type, tooltip = tooltip), size = 2) +   scale_color_manual(values = macpie_colours$discrete) +   theme_minimal() girafe(ggobj = p, fonts = list(sans = \"sans\"))"},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/quality_control.html","id":"distribution-of-read-counts","dir":"Articles","previous_headings":"2. Quality control > 2.2 Basic QC metrics","what":"2.3.1 Distribution of read counts","title":"Quality control","text":"order perform downstream analysis, ensure addressed technical variability batch effects correctly. start distribution reads across experiment. end use box plot show distribution read counts grouped across treatments.","code":"qc_stats <- compute_qc_metrics(mac, group_by = \"combined_id\", order_by = \"median\") qc_stats$stats_summary #> # A tibble: 83 × 6 #>    combined_id    sd_value mad_value group_median z_score   IQR #>    <chr>             <dbl>     <dbl>        <dbl>   <dbl> <dbl> #>  1 DMSO_0            3260.     3312.       43646    0.659 4788. #>  2 Media_0           2947.     3175.       43178.   0.557 4830. #>  3 Paclitaxel_0.1    6114.      752.       33167   -1.63  5417  #>  4 Paclitaxel_1      6606.     6050.       35783   -1.06  6462. #>  5 Paclitaxel_10     5727.     5161.       30791   -2.15  5595  #>  6 SN01004236_0.1    2394.      595.       41474    0.184 2166  #>  7 SN01004236_1      3291.     1245.       45383    1.04  3036. #>  8 SN01004236_10     4649.     6150.       41983    0.295 4640. #>  9 SN01004272_0.1     987.      145.       41420    0.172  878  #> 10 SN01004272_1      3020.     2302.       38839   -0.392 2916  #> # ℹ 73 more rows"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/quality_control.html","id":"variability-among-all-replicates","dir":"Articles","previous_headings":"2. Quality control > 2.2 Basic QC metrics","what":"2.3.2 Variability among all replicates","title":"Quality control","text":"relation previous plot, want user ability assess dispersion reads within sample. Therefore, enabled access several statistical metrics standard deviation (sd_value), robust z score (z_score), mad (mad_value) IQR (IQR) can used parameter function plot_qc_metrics individually, assessed function plot_qc_metrics_heatmap. Standard deviation (sd_value) interquartile range (IQR) capture spread read counts within single treatment condition. Use want understand consistently reads cluster around mean median one group. Median absolute deviation (mad_value) robust z‐score (z_score) highlight variability treatment conditions. make easy spot conditions whose overall read distributions deviate rest plate. can see , Staurosporine largest variability samples across metrics.","code":"plot_qc_metrics_heatmap(qc_stats$stats_summary)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/quality_control.html","id":"variability-within-a-sample","dir":"Articles","previous_headings":"2. Quality control > 2.2 Basic QC metrics","what":"2.3.3 Variability within a sample","title":"Quality control","text":"Due lower read counts per sample, MAC-seq variable RNA-seq. therefore fairly important estimate bioogical variability replicates. provide way estimate inter-replicate variability using poisson distance within function plot_distance.","code":"plot_distance(mac, \"combined_id\", treatment = \"DMSO_0\") #> tidyseurat says: A data frame is returned for independent data analysis."},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/quality_control.html","id":"evaluating-the-influecne-of-batch-effects-and-normalizations","dir":"Articles","previous_headings":"2. Quality control > 2.2 Basic QC metrics","what":"2.3.4 Evaluating the influecne of batch effects and normalizations","title":"Quality control","text":"Several methods available scaling normalizing transcriptomic data, effects clearly visualized using RLE (Relative Log Expression) plots. case, limma_voom provides lowest average coefficient variation, compared methods “raw”, Seurat “SCT” “edgeR”. User can provide vector batches length data - see example .","code":"# First we will subset the data to look at control, DMSO samples only mac_dmso <- mac %>%   filter(Treatment_1 == \"DMSO\")  # Run the RLE function for raw data plot_rle(mac_dmso, label_column = \"Row\", normalisation = \"raw\") #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. # Run the RLE function for normalised data plot_rle(mac_dmso, label_column = \"Row\", normalisation = \"limma_voom\") #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. # For multiple plates, once can add a vector with batch factors #plot_rle(mac_dmso, label_column = \"Row\", normalisation = \"limma_voom\", batch = mac_dmso$Plate_ID)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/transcriptional_analyses.html","id":"data-import","dir":"Articles","previous_headings":"","what":"1. Data import","title":"Transcriptional analyses","text":"Data access full dataset (>10 MB .rds files) currently restricted release become publicly available upon publication (Zenodo). meantime, please contact us early access. Data imported tidySeurat object, allows usage regular Seurat functions, well functionality tidyverse. samples spread across multiple plates, users can submit vector directories (named directories, names become barcode prefixes) instead one directory Read10X function.","code":"#install.packages(\"macpie\")  # or devtools::install_github(\"PMCC-BioinformaticsCore/macpie\")   library(macpie) suppressPackageStartupMessages(   library(enrichR) ) library(pheatmap)  # Define project variables project_name <- \"PMMSq033\" project_metadata <- system.file(\"extdata/PMMSq033_metadata.csv\", package = \"macpie\") # Load metadata metadata <- read_metadata(project_metadata)   # 1. Load your own gene counts per sample or 2. data from the publication project_rawdata <- paste0(dir, \"/macpieData/PMMSq033/raw_matrix\")  project_name <- \"PMMSq033\" raw_counts <- Read10X(data.dir = project_rawdata)  # Create tidySeurat object mac <- CreateSeuratObject(counts = raw_counts,                           project = project_name,                           min.cells = 1,                           min.features = 1)  # Join with metadata mac <- mac %>%   inner_join(metadata, by = c(\".cell\" = \"Barcode\"))  # Add unique identifier mac <- mac %>%   mutate(combined_id = str_c(Treatment_1, Concentration_1, sep = \"_\")) %>%   mutate(combined_id = gsub(\" \", \"\", .data$combined_id))  # Filter by read count per sample group mac <- filter_genes_by_expression(mac,                                    group_by = \"combined_id\",                                    min_counts = 10,                                    min_samples = 2) # Subset the working dataset mac <- mac %>%   filter(Project == \"Current\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/transcriptional_analyses.html","id":"single-comparison","dir":"Articles","previous_headings":"","what":"2. Single comparison","title":"Transcriptional analyses","text":"Similar scRNA-seq data, MAC-seq gene expression counts excess zero counts compared bulk RNA-seq. Statistical models assuming Poisson negative binomial distribution may fit data distribution well. Additionally, replicates can quite variable due large number potential latent effect high-throughput screening, assessed QC process. One way assess quality normalization methods average coefficient variation across samples.   Normalised data evaluation normalizations methods (plotMA etc) can extracted : Similarly, influence DE methods volcano plots can easily assessed.  Based results, can quickly check gene expression levels counts per million (CPM) selected genes treatment control samples described .  plotting functions also “summarise” version provides collapsed versions results table format.","code":"# First we will subset the data to look at control, DMSO samples only mac_dmso <- mac %>%   filter(Treatment_1 == \"DMSO\")  # Run the RLE function to compare data normalisations plot_rle(mac_dmso, label_column = \"Row\", normalisation = \"edgeR\") #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. plot_rle(mac_dmso, label_column = \"Row\", normalisation = \"limma_voom\") #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. # For multiple plates, once can add a vector with batch factors, for example # plot_rle(mac_dmso, label_column = \"Row\", normalisation = \"limma_voom\", batch = mac_dmso$Plate_ID) normalised_counts <- compute_normalised_counts(mac_dmso, method = \"SCT\", 1) # First perform the differential expression analysis treatment_samples <- \"Staurosporine_10\" control_samples <- \"DMSO_0\" top_table <- compute_single_de(mac, treatment_samples, control_samples, method = \"limma_voom\")  top_table_2 <- compute_single_de(mac, treatment_samples, control_samples, method = \"edgeR\") # Let's visualise the results with a volcano plot p1 <- plot_volcano(top_table, max.overlaps = 18) + ggtitle(\"limma_voom\") p2 <- plot_volcano(top_table_2, max.overlaps = 18) + ggtitle(\"edgeR\") p1+p2 #> Warning: ggrepel: 853 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps #> Warning: ggrepel: 384 unlabeled data points (too many overlaps). Consider #> increasing max.overlaps genes <- top_table$gene[1:6] group_by <- \"combined_id\" plot_counts(mac,genes, group_by, treatment_samples, control_samples, normalisation = \"cpm\", color_by = \"combined_id\") #> Normalizing layer: counts print(summarise_de(top_table, lfc_threshold = 1, padj_threshold = 0.01), width = Inf) #> # A tibble: 1 × 6 #>   Total_genes_tested Significantly_upregulated Significantly_downregulated #>                <int>                     <int>                       <int> #> 1               5660                       128                         234 #>   Total_significant Padj_threshold Log2FC_threshold #>               <int>          <dbl>            <dbl> #> 1               362           0.01                1"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/transcriptional_analyses.html","id":"pathway-analysis","dir":"Articles","previous_headings":"","what":"3.2. Pathway analysis","title":"Transcriptional analyses","text":"Differential gene expression results individual comparisons treatment vs control macpie performed enrichR, access number curated gene sets available enrichR::listEnrichrDbs(). following case, effect Staurosporine breast cancer cells Myc inactivation can observed pathway enrichment analyses.  using “MSigDB_Hallmark_2020” standard, check data “DisGeNET”, see MCF7 (breast cancer cell line) samples correctly enriched breast cancer profiles.","code":"top_genes <- top_table %>%   filter(p_value_adj < 0.01) %>%   select(gene) %>%   pull()  enriched <- enrichR::enrichr(top_genes, c(\"MSigDB_Hallmark_2020\",\"DisGeNET\",                                  \"RNA-Seq_Disease_Gene_and_Drug_Signatures_from_GEO\")) #> Uploading data to Enrichr... Done. #>   Querying MSigDB_Hallmark_2020... Done. #>   Querying DisGeNET... Done. #>   Querying RNA-Seq_Disease_Gene_and_Drug_Signatures_from_GEO... Done. #> Parsing results... Done. p1 <- enrichR::plotEnrich(enriched[[1]]) +    macpie_theme(legend_position_ = 'right') +    scale_fill_gradientn(colors = macpie_colours$divergent) #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale.  gridExtra::grid.arrange(p1, ncol = 1) p1 <- enrichR::plotEnrich(enriched[[2]]) +    macpie_theme(legend_position_ = 'right') +    scale_fill_gradientn(colors = macpie_colours$divergent) #> Scale for fill is already present. #> Adding another scale for fill, which will replace the existing scale. gridExtra::grid.arrange(p1, ncol = 1)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/transcriptional_analyses.html","id":"differential-gene-expression---multiple-comparisons","dir":"Articles","previous_headings":"","what":"3.3. Differential gene expression - multiple comparisons","title":"Transcriptional analyses","text":"Since MAC-seq commonly used high-throughput screening compound libraries, often want compare multiple samples screen vs control. process can easily parallelised. First select vector “treatments” combined_ids contain word “DMSO”. (Warning, due limitations “mclapply”, parallelisation speedup currently works OSX Linux machines, Windows.) want see individual genes expressed across treatment groups, can use two approaches. First, can visualise expression specific list genes heatmap.  Second, can visualise shared differentially expressed (DE) genes, defined top 5 DE genes single drug comparison (treatment vs control) found least 2 different treatment groups. heatmap represents log2FC values DE genes.  prefer see expression level replicate level, can specify logCPM = “lcpm”. Since observing log CPM individual samples, comparisons, can also visualise DMSO control.  outputs analyses can represented table format.","code":"mac$combined_id <- make.names(mac$combined_id)  treatments <- mac %>%   filter(Concentration_1 == 10) %>%   select(combined_id) %>%   filter(!grepl(\"DMSO\", combined_id)) %>%   pull() %>%   unique() #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. mac <- compute_multi_de(mac, treatments, control_samples = \"DMSO_0\", method = \"limma_voom\", num_cores = 1) plot_multi_de(mac, group_by = \"combined_id\", value = \"log2FC\", p_value_cutoff = 0.01, direction=\"up\", control = \"DMSO_0\", by=\"fc\", gene_list = head(top_genes, 10)) plot_multi_de(mac, group_by = \"combined_id\", value = \"log2FC\", p_value_cutoff = 0.01, direction=\"up\", n_genes = 5, control = \"DMSO_0\", by=\"fc\") plot_multi_de(mac, group_by = \"combined_id\", value = \"lcpm\", p_value_cutoff = 0.01, direction=\"up\", n_genes = 5, control = \"DMSO_0\", by=\"fc\") summarise_de(mac, lfc_threshold = 1, padj_threshold = 0.01, multi=TRUE) #> # A tibble: 27 × 7 #>    combined_id  Total_genes_tested Significantly_upregu…¹ Significantly_downre…² #>    <chr>                     <int>                  <int>                  <int> #>  1 Paclitaxel_…               5660                    629                     91 #>  2 SN01004236_…               5660                      0                      0 #>  3 SN01004272_…               5660                      1                      0 #>  4 SN01004569_…               5660                    257                     49 #>  5 SN01004614_…               5660                    220                     36 #>  6 SN01004734_…               5660                      0                      0 #>  7 SN01005060_…               5660                     13                      4 #>  8 SN01005979_…               5660                    936                    853 #>  9 SN01731107_…               5660                      4                      3 #> 10 SN01731137_…               5660                    148                     69 #> # ℹ 17 more rows #> # ℹ abbreviated names: ¹​Significantly_upregulated, ²​Significantly_downregulated #> # ℹ 3 more variables: Total_significant <int>, padj_threshold <dbl>, #> #   Log2FC_threshold <dbl>"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/articles/transcriptional_analyses.html","id":"pathway-analysis---multiple-comparisons","dir":"Articles","previous_headings":"","what":"3.4. Pathway analysis - multiple comparisons","title":"Transcriptional analyses","text":"Pathway enrichment analysis can also performed across treatments, summarised heatmap.  Quick check treatments: Nutlin.3a MDM2-P53 inhibitor stablises p53 protein. induces cell autophagy apotopsis. Nutlin-activated p53 induces G1 G2 arrest cancer cell lines (see pathway enrichment heatmap). Ref: Tovar C, et al. Proc Natl Acad Sci USA. 2006;103(6):1888–1893. Shows Nutlin-3’s effect various p53 targets cancer cell lines.","code":"# Load genesets from enrichr for a specific species or define your own enrichr_genesets <- download_geneset(\"human\", \"MSigDB_Hallmark_2020\") mac <- compute_multi_enrichr(mac, genesets = enrichr_genesets)  enriched_pathways_mat <- mac@tools$pathway_enrichment %>%   bind_rows() %>%   select(combined_id, Term, Combined.Score) %>%   pivot_wider(names_from = combined_id, values_from = Combined.Score) %>%   column_to_rownames(var = \"Term\") %>%   mutate(across(everything(), ~ ifelse(is.na(.), 0, log1p(.)))) %>%  # Replace NA with 0 across all columns   as.matrix()   pheatmap(enriched_pathways_mat, color = macpie_colours$continuous_rev)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nenad Bartonicek. Author, maintainer. Xin Liu. Author. Laura Twomey. Author. Michelle Meier. Author. Richard Lupat. Author. Stuart Craig. Author. David Yoannidis. Author. Jason Li. Author. Tim Semple. Author. Kaylene J Simpson. Author. Mark X Li. Author. Susanne Ramm. Author.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bartonicek N, Liu X, Twomey L, Meier M, Lupat R, Craig S, Yoannidis D, Li J, Semple T, Simpson K, Li M, Ramm S (2025). macpie: Scalable workflow high-throughput transcriptomic profiling. R package version 1.0.0, https://github.com/PMCC-BioinformaticsCore/macpie.git.","code":"@Manual{,   title = {macpie: Scalable workflow for high-throughput transcriptomic profiling},   author = {Nenad Bartonicek and Xin Liu and Laura Twomey and Michelle Meier and Richard Lupat and Stuart Craig and David Yoannidis and Jason Li and Tim Semple and Kaylene J Simpson and Mark X Li and Susanne Ramm},   year = {2025},   note = {R package version 1.0.0},   url = {https://github.com/PMCC-BioinformaticsCore/macpie.git}, }"},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Scalable workflow for high-throughput transcriptomic profiling","text":"macpie R toolkit designed researchers, originally MAC-seq data mind, validated general High-Throughput Transcriptomics (HTTr) data applications. primary aim deliver latest tools quality control (QC), visualization, analysis. processing raw sequencing data count matrices, please refer companion Nextflow workflow:dinoflow: Nextflow workflow MAC-seq","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Scalable workflow for high-throughput transcriptomic profiling","text":"Full documentation step--step tutorials available :macpie documentation site","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/index.html","id":"example-data","dir":"","previous_headings":"Documentation","what":"Example Data","title":"Scalable workflow for high-throughput transcriptomic profiling","text":"provide full subset datasets testing exploration: Full example dataset hosted Zenodo:https://doi.org/10.5281/zenodo.15778812 Quick-start subset mini_mac bundled package can loaded directly R:","code":"data(\"mini_mac\", package = \"macpie\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/index.html","id":"requirements","dir":"","previous_headings":"","what":"Requirements","title":"Scalable workflow for high-throughput transcriptomic profiling","text":"R ≥ 4.3.3 package developed R 4.3.3, installation (including dependencies) tested latest R 4.5.0.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/index.html","id":"installation-and-dependencies","dir":"","previous_headings":"Requirements","what":"Installation and dependencies","title":"Scalable workflow for high-throughput transcriptomic profiling","text":"required R packages automatically installed: via pak::pkg_install devtools::install_github use pre-built Docker image ready--use environment.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/index.html","id":"installing-locally","dir":"","previous_headings":"Requirements > Installation and dependencies","what":"Installing locally","title":"Scalable workflow for high-throughput transcriptomic profiling","text":"install development version macpie, recommend using pak - fast package installer install directly GitHub. Make sure pak package installed first.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/index.html","id":"configure-your-own-github-pat-optional","dir":"","previous_headings":"Requirements > Installation and dependencies > Installing locally","what":"Configure your own GitHub PAT (optional)","title":"Scalable workflow for high-throughput transcriptomic profiling","text":"pak uses GitHub API resolve versions fetch metadata—unauthenticated requests limited 60 per hour. avoid rate-limit errors, can add Personal Access Token (PAT): Optially, can also install package ","code":"# install gitcreds if you haven’t already install.packages(\"gitcreds\")  # this will prompt you to paste in your PAT gitcreds::gitcreds_set() # 1. Install pak (fast installer) if (!requireNamespace(\"pak\", quietly=TRUE)) {   install.packages(\"pak\") }  # 2. Make sure Bioconductor repos are set if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {   install.packages(\"BiocManager\") } options(repos = BiocManager::repositories())  # 3. Re-install macpie + exactly its Depends & Imports via pak pak::pkg_install(   \"PMCC-BioinformaticsCore/macpie\",   dependencies = c(\"Depends\", \"Imports\") )  # 4. Verify # Should load without error: library(macpie) # First, install devtools if not already installed install.packages(\"devtools\")  # Make sure BiocManager is installed, and point your repos at both CRAN + Bioconductor if (!requireNamespace(\"BiocManager\", quietly=TRUE))   install.packages(\"BiocManager\")  options(repos = BiocManager::repositories())  BiocManager::install(c(   \"edgeR\", \"limma\", \"Biobase\", \"DESeq2\", \"RUVSeq\",   \"EDASeq\", \"fgsea\", \"scran\", \"glmGamPoi\",   \"BiocParallel\", \"SingleCellExperiment\", \"zinbwave\",   \"SummarizedExperiment\" ))   # Install MOFA2 from its GitHub (it’s not on Bioconductor) devtools::install_github(\"bioFAM/MOFA2\")  # Finally, install macpie itself devtools::install_github(\"PMCC-BioinformaticsCore/macpie\", dependencies = TRUE)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/index.html","id":"using-docker-image","dir":"","previous_headings":"Requirements > Installation and dependencies","what":"Using Docker image","title":"Scalable workflow for high-throughput transcriptomic profiling","text":"docker desktop running, open terminal, paste docker pull command install, depending platform. Pull Docker image Run Docker container Replace /path///macpie/ absolute path local repo. Copy paste http://localhost:8787 browser Username: rstudio Password: password (one set docker run command) logging , ’ll find local directory mounted :","code":"docker pull --platform linux/amd64 xliu81/macpie:v1.0.0 docker run --rm -ti \\   -e PASSWORD=password \\   -p 8787:8787 \\   --platform linux/amd64 \\   -v /path/to/your/macpie/:/home/rstudio/macpie:z\\   xliu81/macpie:v1.0.0 /home/rstudio/macpie/"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Scalable workflow for high-throughput transcriptomic profiling","text":"show using mini_mac dataset quick start. vignette website, include couple functions quick start.","code":"library(macpie)  # load mini_mac,  # mini_mac is a tidySeurat object with matched metadata data(\"mini_mac\")  # Quality control # Filter by counts per sample group mini_mac <- filter_genes_by_expression(mini_mac,                                   group_by = \"combined_id\",                                   min_counts = 5,                                   min_samples = 3)    # MDS plot p <- plot_mds(mini_mac, group_by = \"Sample_type\", label = \"combined_id\", n_labels = 30) girafe(ggobj = p, fonts = list(sans = \"sans\"))   # Correction of the batch effect # First we will subset the data to look at control, DMSO samples only mini_mac_dmso <- mini_mac %>%   filter(Treatment_1 == \"DMSO\")  # Run the RLE function plot_rle(mini_mac_dmso, label_column = \"Row\", normalisation = \"limma_voom\")   # Transcriptional analysis # Single comparison # First perform the differential expression analysis treatment_samples <- \"Staurosporine_10\" control_samples <- \"DMSO_0\" top_table <- compute_single_de(mini_mac, treatment_samples, control_samples, method = \"limma_voom\")  top_genes <- top_table %>%   filter(p_value_adj < 0.1) %>%   select(gene) %>%   pull()  # A volcano plot with very small number of genes, as it's a subset of the full dataset  plot_volcano(top_table, max.overlaps = 16)  # Multiple comparisons # Filter out lower concentrations of compounds and untreated samples treatments <- mini_mac %>%   filter(Concentration_1 == 10) %>%   select(combined_id) %>%   filter(!grepl(\"DMSO\", combined_id)) %>%   pull() %>%   unique() mini_mac <- compute_multi_de(mini_mac, treatments, control_samples = \"DMSO_0\", method = \"limma_voom\", num_cores = 1)  # plot shared differentially expressed genes plot_multi_de(mini_mac, group_by = \"combined_id\", value = \"log2FC\", p_value_cutoff = 0.01, direction=\"up\", n_genes = 5, control = \"DMSO_0\", by=\"fc\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Scalable workflow for high-throughput transcriptomic profiling","text":"","code":"citation(\"macpie\") #> To cite the macpie package in publications, please use: #> #>  Bartonicek N, Liu X, Twomey L, Meier M, Lupat R, Craig S, Yoannidis D, Li J, Semple T, #>  Simpson K, Li M, Ramm S (2025). “macpie: a scalable workflow for high-throughput #>  transcriptomic profiling.” bioRxiv. doi:10.1101/2025.08.06.669002 #> #> A BibTeX entry for LaTeX users is #> #>  @Article{, #>    title   = {macpie: a scalable workflow for high-throughput transcriptomic profiling}, #>    author  = {Nenad Bartonicek and Xin Liu and Laura Twomey and Michelle Meier and Richard Lupat and Stuart Craig and David Yoannidis and Jason Li and Tim Semple and Kaylene J Simpson and Mark X Li and Susanne Ramm}, #>    journal = {bioRxiv}, #>    year    = {2025}, #>    doi     = {10.1101/2025.08.06.669002}, #>    url     = {https://www.biorxiv.org/content/10.1101/2025.08.06.669002v1} #>  }"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/aggregate_by_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse Replicates by Differential Expression — aggregate_by_de","title":"Collapse Replicates by Differential Expression — aggregate_by_de","text":"function collapses replicate samples tidyseurat object based differential expression (DE) results. returns new tidyseurat object 'DE' assay containing aggregated values.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/aggregate_by_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse Replicates by Differential Expression — aggregate_by_de","text":"","code":"aggregate_by_de(data, metric_col = \"metric\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/aggregate_by_de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse Replicates by Differential Expression — aggregate_by_de","text":"data tidyseurat object DE results metric_col character string indicating column name DE dataframe use aggregation. Defaults \"metric\".","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/aggregate_by_de.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse Replicates by Differential Expression — aggregate_by_de","text":"new tidyseurat object collapsed metadata","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/aggregate_by_de.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Collapse Replicates by Differential Expression — aggregate_by_de","text":"function performs following steps: Converts list DE comparisons gene--condition matrix. Aggregates metadata across replicates combined_id. Creates new Seurat object matrix \"DE\" assay","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/aggregate_by_de.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse Replicates by Differential Expression — aggregate_by_de","text":"","code":"data(mini_mac) mac_collapsed <- aggregate_by_de(mini_mac)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_chem_descriptors.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute chemical descriptors from SMILES — compute_chem_descriptors","title":"Compute chemical descriptors from SMILES — compute_chem_descriptors","text":"function parses SMILES strings computes chemical descriptors using rcdk. stores cleaned, non-redundant descriptors tools$chem_descriptors.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_chem_descriptors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute chemical descriptors from SMILES — compute_chem_descriptors","text":"","code":"compute_chem_descriptors(   data,   compound_column = NULL,   treatment_ids = NULL,   r_squared = 0.6,   descriptors = NULL )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_chem_descriptors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute chemical descriptors from SMILES — compute_chem_descriptors","text":"data tidyseurat object smiles column. compound_column Column metadata compound identifiers, default combined_ids treatment_ids list unique sample identifiers, default combined_ids r_squared R squared value, default 0.6 descriptors Specify subset descriptors interest rcdk","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_chem_descriptors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute chemical descriptors from SMILES — compute_chem_descriptors","text":"tidyseurat object new entry tools$chem_descriptors.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_chem_descriptors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute chemical descriptors from SMILES — compute_chem_descriptors","text":"","code":"# \\donttest{ mock_data <- tibble::tibble(   Treatment = c(\"Aspirin\", \"Caffeine\", \"NonExistentCompound_123\") ) result <- compute_smiles(mock_data, compound_column = \"Treatment\" ) data <- compute_chem_descriptors(result,     compound_column = \"Treatment\",     treatment_ids = mock_data$Treatment,     descriptors = \"org.openscience.cdk.qsar.descriptors.molecular.FractionalCSP3Descriptor\") # }"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_de_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare DE-based umap — compute_de_umap","title":"Prepare DE-based umap — compute_de_umap","text":"Prepare DE-based umap","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_de_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare DE-based umap — compute_de_umap","text":"","code":"compute_de_umap(data = NULL)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_de_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare DE-based umap — compute_de_umap","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\".","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_de_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare DE-based umap — compute_de_umap","text":"tidyseurat object umap_de data frame slot tools","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_de_umap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare DE-based umap — compute_de_umap","text":"","code":"data(mini_mac) mini_mac <- compute_de_umap(mini_mac) #> Found more than one class \"dist\" in cache; using the first, from namespace 'spam' #> Also defined by ‘BiocGenerics’"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_hyper_enrich_bg.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate enrichment of DE genes in a gene set Compute one‐sided hypergeometric p-values, z-scores, and combined scores for a list of differentially expressed genes (deg) against each entry in a list of gene sets (genesets). Internal function — compute_hyper_enrich_bg","title":"Calculate enrichment of DE genes in a gene set Compute one‐sided hypergeometric p-values, z-scores, and combined scores for a list of differentially expressed genes (deg) against each entry in a list of gene sets (genesets). Internal function — compute_hyper_enrich_bg","text":"Calculate enrichment DE genes gene set Compute one‐sided hypergeometric p-values, z-scores, combined scores list differentially expressed genes (deg) entry list gene sets (genesets). Internal function","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_hyper_enrich_bg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate enrichment of DE genes in a gene set Compute one‐sided hypergeometric p-values, z-scores, and combined scores for a list of differentially expressed genes (deg) against each entry in a list of gene sets (genesets). Internal function — compute_hyper_enrich_bg","text":"","code":"compute_hyper_enrich_bg(deg = NULL, genesets = NULL, background = \"human\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_hyper_enrich_bg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate enrichment of DE genes in a gene set Compute one‐sided hypergeometric p-values, z-scores, and combined scores for a list of differentially expressed genes (deg) against each entry in a list of gene sets (genesets). Internal function — compute_hyper_enrich_bg","text":"deg vector differentially expressed genes genesets list genes per pathway enrichr background integer character (\"human\", \"mouse\", \"geneset\").  \"human\", uses approximate universe 20 000 genes; \"mouse\", 22 000; \"geneset\", total unique genes genesets.  may also supply custom integer (n) equal exact size tested universe.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_hyper_enrich_bg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate enrichment of DE genes in a gene set Compute one‐sided hypergeometric p-values, z-scores, and combined scores for a list of differentially expressed genes (deg) against each entry in a list of gene sets (genesets). Internal function — compute_hyper_enrich_bg","text":"enrichment stats","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_hyper_enrich_bg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate enrichment of DE genes in a gene set Compute one‐sided hypergeometric p-values, z-scores, and combined scores for a list of differentially expressed genes (deg) against each entry in a list of gene sets (genesets). Internal function — compute_hyper_enrich_bg","text":"","code":"data(mini_mac) treatment_samples=\"Staurosporine_0.1\" control_samples<-\"DMSO_0\" top_table <- compute_single_de(mini_mac, treatment_samples, control_samples, method = \"limma_voom\") top_genes <- top_table$gene[top_table$p_value_adj<0.01] data(genesets) results <- compute_hyper_enrich_bg(top_genes, genesets) head(results) #>                                        Term Overlap    P.value Adjusted.P.value #> Androgen Response         Androgen Response   1/100 0.01985198        0.0394069 #> IL-2/STAT5 Signaling   IL-2/STAT5 Signaling   1/199 0.03921281        0.0394069 #> Apical Junction             Apical Junction   1/200 0.03940690        0.0394069 #> Xenobiotic Metabolism Xenobiotic Metabolism   1/200 0.03940690        0.0394069 #>                       Genes Combined.Score #> Androgen Response     ACTN1       27.16313 #> IL-2/STAT5 Signaling   AHCY       15.58983 #> Apical Junction       ACTN1       15.52386 #> Xenobiotic Metabolism  AHCY       15.52386"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform DE of multiple samples in a screen vs control — compute_multi_de","title":"Perform DE of multiple samples in a screen vs control — compute_multi_de","text":"Perform DE multiple samples screen vs control","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform DE of multiple samples in a screen vs control — compute_multi_de","text":"","code":"compute_multi_de(   data = NULL,   treatment_samples = NULL,   control_samples = NULL,   method = \"edgeR\",   num_cores = 2,   batch = 1,   k = 2,   spikes = NULL )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform DE of multiple samples in a screen vs control — compute_multi_de","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\" treatment_samples Value column \"combined_id\" representing replicates treatment samples data control_samples Value column \"combined_id\"  representing replicates control samples data method One \"Seurat_wilcox\", \"DESeq2\", \"edgeR\", \"RUVg\", \"RUVs\", \"RUVr\", \"limma_voom\" num_cores Number cores batch Either empty, single value, vector corresponding number samples k Parameter k RUVSeq methods, check RUVSeq tutorial spikes List genes use spike controls","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_de.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform DE of multiple samples in a screen vs control — compute_multi_de","text":"List DE counts vs control","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_de.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform DE of multiple samples in a screen vs control — compute_multi_de","text":"","code":"data(\"mini_mac\") control_samples <- \"DMSO_0\" mini_mac$combined_id<-make.names(mini_mac$combined_id) treatment_samples <- c(\"Staurosporine_10\", \"Paclitaxel_10\",  \"Chlorambucil_10\", \"Vinblastine_sulfate_10\", \"Etoposide_10\" ,  \"Cytarabine_10\", \"Camptothecin_10\", \"Anastrozole_10\",  \"Sb590885_10\", \"Fluvastatin_sodium_10\") mini_mac_test<-compute_multi_de(mini_mac, treatment_samples,  control_samples, num_cores = 1, method = \"edgeR\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_enrichr.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform enrichR-style analysis on a screen — compute_multi_enrichr","title":"Perform enrichR-style analysis on a screen — compute_multi_enrichr","text":"Perform enrichR-style analysis screen","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_enrichr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform enrichR-style analysis on a screen — compute_multi_enrichr","text":"","code":"compute_multi_enrichr(   data,   genesets = NULL,   species = NULL,   direction = \"both\",   p_value_cutoff = 0.01,   n_distinct = 10 )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_enrichr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform enrichR-style analysis on a screen — compute_multi_enrichr","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\". genesets Named list genes species One \"human\", \"mouse\", \"fly\", \"yeast\", \"worm\" \"fish\" direction Direction differentially expressed genes, one \"\", \"\", \"\" (default). p_value_cutoff Cutoff adjusted p-value (column p_value_adj), default 0.01 n_distinct Minimum number genes geneset, default 5","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_enrichr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform enrichR-style analysis on a screen — compute_multi_enrichr","text":"tidyseurat object appended pathway_enrichment dataframe slot tools","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_enrichr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform enrichR-style analysis on a screen — compute_multi_enrichr","text":"","code":"data(mini_mac) data(genesets) compute_multi_enrichr(mini_mac, genesets = genesets) #> # A Seurat-tibble abstraction: 308 × 21 #> # Features=500 | Cells=308 | Active assay=RNA | Assays=RNA #>    .cell      orig.ident   nCount_RNA nFeature_RNA Plate_ID Well_ID Row   Column #>    <chr>      <fct>             <dbl>        <int> <chr>    <chr>   <chr>  <int> #>  1 AACAGGCAAT PMMSq033_mi…         65           29 PMMSq033 B02     B          2 #>  2 AACCAGCCAG PMMSq033_mi…        522           97 PMMSq033 C02     C          2 #>  3 AACCAGTTGA PMMSq033_mi…        415           82 PMMSq033 D02     D          2 #>  4 AACCGGCGTA PMMSq033_mi…        578           93 PMMSq033 E02     E          2 #>  5 AACCTAGTCC PMMSq033_mi…        286           72 PMMSq033 F02     F          2 #>  6 AACTCTACAC PMMSq033_mi…        515           96 PMMSq033 G02     G          2 #>  7 AACTGTGTCA PMMSq033_mi…        408           87 PMMSq033 H02     H          2 #>  8 AAGATGTCCA PMMSq033_mi…        332           78 PMMSq033 I02     I          2 #>  9 AAGCATATGG PMMSq033_mi…        498           92 PMMSq033 J02     J          2 #> 10 AAGCTCACCT PMMSq033_mi…        539          102 PMMSq033 K02     K          2 #> # ℹ 298 more rows #> # ℹ 13 more variables: Species <chr>, Cell_type <chr>, Model_type <chr>, #> #   Time <fct>, Unit <chr>, Treatment_1 <chr>, Concentration_1 <fct>, #> #   Unit_1 <chr>, Sample_type <chr>, Project <chr>, combined_id <chr>, #> #   percent.mt <dbl>, percent.ribo <dbl>"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_screen_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Find similarities between expression profiles with fgsea. Mitochondrial/ribosomal genes are filtered from the analysis — compute_multi_screen_profile","title":"Find similarities between expression profiles with fgsea. Mitochondrial/ribosomal genes are filtered from the analysis — compute_multi_screen_profile","text":"Find similarities expression profiles fgsea. Mitochondrial/ribosomal genes filtered analysis","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_screen_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find similarities between expression profiles with fgsea. Mitochondrial/ribosomal genes are filtered from the analysis — compute_multi_screen_profile","text":"","code":"compute_multi_screen_profile(   data = NULL,   target = NULL,   geneset = NULL,   n_genes_profile = 200,   direction = \"both\",   minSize = 15,   maxSize = 500,   num_cores = 1 )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_screen_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find similarities between expression profiles with fgsea. Mitochondrial/ribosomal genes are filtered from the analysis — compute_multi_screen_profile","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\". target Value target expression profile data (target) others compared . geneset List genes whose enrichment expression profiles evaluated. n_genes_profile Number genes take target profile ranked list, default 200. direction Direction expression DE genes target profile: one \"\", \"\" \"\", default \"\". minSize Minimum size gene sets consider (default 15). maxSize Maximum size gene sets consider (default 500). num_cores Number cores use parallel processing.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_screen_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find similarities between expression profiles with fgsea. Mitochondrial/ribosomal genes are filtered from the analysis — compute_multi_screen_profile","text":"tidyseurat object screen_profile data frame slot tools.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multi_screen_profile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find similarities between expression profiles with fgsea. Mitochondrial/ribosomal genes are filtered from the analysis — compute_multi_screen_profile","text":"","code":"data(mini_mac) mini_mac@tools$diff_exprs <- mini_mac@tools$diff_exprs[1:2] mini_mac <- compute_multi_screen_profile(mini_mac, target = \"Staurosporine_10\", n_genes_profile = 20, direction = \"up\", num_cores = 1)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multiple_dose_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Model Gene Dose-Response Curves Across Treatments — compute_multiple_dose_response","title":"Model Gene Dose-Response Curves Across Treatments — compute_multiple_dose_response","text":"function fits dose-response models set genes across different treatments using drc package. returns EC50 values per gene per treatment.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multiple_dose_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model Gene Dose-Response Curves Across Treatments — compute_multiple_dose_response","text":"","code":"compute_multiple_dose_response(   data,   genes = NULL,   normalisation = \"limma_voom\",   control_value = \"DMSO\",   batch = 1,   k = 2,   num_cores = 1 )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multiple_dose_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model Gene Dose-Response Curves Across Treatments — compute_multiple_dose_response","text":"data Seurat TidySeurat object containing expression data metadata. genes character vector gene names model. NULL, significant DE genes across comparisons used. normalisation character string indicating normalization method. One : \"raw\", \"logNorm\", \"cpm\", \"clr\", \"SCT\", \"DESeq2\", \"edgeR\", \"RUVg\", \"RUVs\", \"RUVr\", \"limma_voom\", \"zinb\". Default \"limma_voom\". control_value string indicating control condition \"Treatment_1\". Default \"DMSO\". batch Batch variable use normalization applicable. Default 1. k Number unwanted factors RUV normalization. Default 2. num_cores Number CPU cores use parallel model fitting. Default 1.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multiple_dose_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model Gene Dose-Response Curves Across Treatments — compute_multiple_dose_response","text":"data frame EC50 values per gene treatment.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_multiple_dose_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model Gene Dose-Response Curves Across Treatments — compute_multiple_dose_response","text":"","code":"data(mini_mac) res <- compute_multiple_dose_response(   data = mini_mac,   genes = c(\"FSHR\", \"ITFG2\"),   normalisation = \"limma_voom\",   control_value = \"DMSO\",   num_cores = 1 ) #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. #> StaurosporineDMSOControl measurements detected for level: 1 #> Control measurements detected for level: 1 #> MediaControl measurements detected for level: 1 #> Control measurements detected for level: 1 #> PaclitaxelThapsigarginError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  :  #>   non-finite finite-difference value [4] #> Vinblastine_sulfateChlorambucilEtoposideCytarabineError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  :  #>   non-finite finite-difference value [4] #> Error in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  :  #>   non-finite finite-difference value [1] #> Azd-59915-azacytidineMik665LuminespibCamptothecinAnastrozoleSb590885Fluvastatin_sodiumCeralasertibCapivasertibError in optim(startVec, opfct, hessian = TRUE, method = optMethod, control = list(maxit = maxIt,  :  #>   non-finite finite-difference value [4] #> Erlotinib_hydrochlorideNutlin-3aMk-2206_dihydrochlorideRibociclibAdavosertibTrametinibTemsirolimusAbemaciclibPonatinibFludarabine head(res) #>       Staurosporine DMSO Media Paclitaxel Thapsigargin Vinblastine_sulfate #> FSHR         4.4164   NA    NA 5783042.00           NA             0.12721 #> ITFG2        3.9857   NA    NA     109.89      0.70869             0.36661 #>       Chlorambucil Etoposide Cytarabine   Azd-5991 5-azacytidine  Mik665 #> FSHR        6.6185    4.4211         NA 7.6479e+19      0.069563 46.1340 #> ITFG2      26.1280   23.8280         NA 9.2609e-01      0.048804  1.4967 #>       Luminespib Camptothecin Anastrozole Sb590885 Fluvastatin_sodium #> FSHR     0.08212       3.1342      62.325  0.15654             1.6629 #> ITFG2    4.49240     236.6200     110.150  1.17420            14.4120 #>       Ceralasertib Capivasertib Erlotinib_hydrochloride Nutlin-3a #> FSHR       1.26270    0.0067156                 0.26679   0.33298 #> ITFG2      0.37764           NA                 0.30657   0.57002 #>       Mk-2206_dihydrochloride Ribociclib Adavosertib Trametinib Temsirolimus #> FSHR                  3.02950   0.065756     0.21233   0.017333       9.7503 #> ITFG2                 0.54178   0.506880     1.03570   1.102000      18.6660 #>       Abemaciclib Ponatinib Fludarabine #> FSHR      1.89380    3.0276 140255.0000 #> ITFG2     0.63033    2.7319      1.9245"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_normalised_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve normalised counts of MAC-seq data — compute_normalised_counts","title":"Retrieve normalised counts of MAC-seq data — compute_normalised_counts","text":"function retrieves  counts number methods available normalisation, default limma-voomLmFit.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_normalised_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve normalised counts of MAC-seq data — compute_normalised_counts","text":"","code":"compute_normalised_counts(   data = NULL,   method = NULL,   batch = NULL,   k = NULL,   spikes = NULL,   max_counts = NULL )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_normalised_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve normalised counts of MAC-seq data — compute_normalised_counts","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\" method One \"raw\", \"logNorm\", \"cpm\", \"clr\", \"SCT\", \"DESeq2\", \"edgeR\", \"RUVg\", \"RUVs\", \"RUVr\", \"limma_voom\" batch Either empty, single value, vector corresponding number samples k Parameter k RUVSeq methods, check RUVSeq tutorial spikes List genes use spike controls max_counts Maximum count gene across samples","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_normalised_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve normalised counts of MAC-seq data — compute_normalised_counts","text":"Data frame normalised counts","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_normalised_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve normalised counts of MAC-seq data — compute_normalised_counts","text":"","code":"data(mini_mac) compute_normalised_counts(mini_mac) #>                 AACAGGCAAT AACCAGCCAG AACCAGTTGA AACCGGCGTA AACCTAGTCC #> NAMPT             13.66997  14.260025   14.44157  13.909156   13.56072 #> ENSG00000278869   12.08500   9.867707   10.19365   9.661228   10.75337 #> CABP7-DT          12.08500   9.867707   10.19365   9.661228   10.75337 #>                 AACTCTACAC AACTGTGTCA AAGATGTCCA AAGCATATGG AAGCTCACCT #> NAMPT            14.045187   13.47592   14.06636  13.843252  14.546433 #> ENSG00000278869   9.797259   10.30599   10.60693   9.936361   9.902577 #> CABP7-DT          9.797259   10.30599   10.60693   9.936361   9.902577 #>                 AAGGCATGCG AAGTTCCTTG AATACCGGTA AATCCATCTG AATCGTCCGC #> NAMPT             14.09024  14.236369   12.65557  14.390264   14.19258 #> ENSG00000278869   10.38980   9.988441   10.33364   9.866702   10.28569 #> CABP7-DT          10.38980   9.988441   10.33364   9.866702   10.28569 #>                 AATGACCTTC AATGAGAGCA AATGTCAGTG AATTAGGCCG AATTGCGATG #> NAMPT             14.13132   13.84006   14.23717   14.78534   14.04032 #> ENSG00000278869   10.22443   10.38063   10.14970   10.26178   10.33988 #> CABP7-DT          10.22443   10.38063   10.14970   10.26178   10.33988 #>                 ACAACAGTCG ACAACCATAC ACAACGGAGC ACAAGCGCGA ACACAATCTC #> NAMPT             14.22746   13.67637   13.29803   13.91466  14.152842 #> ENSG00000278869   10.32057   11.80190   10.49068   10.21422   9.904915 #> CABP7-DT          10.32057   10.21694   10.49068   10.21422   9.904915 #>                 ACACAGTGAA ACACCGAATT ACACGCAGTA ACACGGTCCT ACACTTGCTG #> NAMPT             13.77927   10.32576   13.33117  14.389019   12.62004 #> ENSG00000278869   10.97192   10.32576   10.16124   9.996701   10.29811 #> CABP7-DT          10.97192   10.32576   10.16124   9.996701   10.29811 #>                 ACAGTGCCAA ACATGTGTGC ACCAGGACCA ACCATAACAC ACCGAACCGT #> NAMPT             12.62198  14.458157   14.78237   13.93570   13.72066 #> ENSG00000278869   11.03701   9.934595   10.13852   10.23526   10.02022 #> CABP7-DT          11.03701   9.934595   10.13852   10.23526   10.02022 #>                 ACCGAGAGTC ACCGGTACAG ACCGTACTTC ACCTCCGACA ACCTCTCTCC #> NAMPT             13.58220   13.33547   13.61461   13.80380   13.68839 #> ENSG00000278869   10.41227   10.52812   10.44468   10.34436   10.22896 #> CABP7-DT          10.41227   10.52812   10.44468   10.34436   10.22896 #>                 ACCTGTCCGA ACGAATGACA ACGCTGGATA ACGTAGGCAC ACGTGCTGAT #> NAMPT             13.90623  13.378382   14.08211   13.58088   14.05796 #> ENSG00000278869   10.44680   9.918951   10.38167   10.41096   10.35752 #> CABP7-DT          10.44680   9.918951   10.38167   10.41096   10.35752 #>                 ACTCCAAGCC ACTGGCGCAT ACTGGCTTCC ACTTAACTGC ACTTCATCAC #> NAMPT             14.32798   14.19152   13.23157  14.524254   13.89201 #> ENSG00000278869   10.08005   10.10406   10.90964   9.769367   10.19157 #> CABP7-DT          10.08005   10.10406   10.90964   9.769367   10.19157 #>                 ACTTCGTTGA ACTTCTCCTG ACTTGAGGAA ACTTGTAAGG AGAACCACGG #> NAMPT             13.99649   12.88988  13.439895   12.75603   14.19658 #> ENSG00000278869   10.08960   10.56795   9.980464   10.43410   10.49614 #> CABP7-DT          10.08960   10.56795   9.980464   10.43410   10.49614 #>                 AGAAGCAATC AGACCGTTAT AGACTAGCAT AGAGATGCAG AGAGCTTACA #> NAMPT             14.22715  14.205986   13.93058   13.96693   14.25161 #> ENSG00000278869   10.13969   9.958058   10.76066   10.26649   10.00369 #> CABP7-DT          10.13969   9.958058   10.76066   10.26649   10.00369 #>                 AGAGTGTAAC AGAGTTCTGC AGATAGTGCT AGCAATGCGC AGCATGTCAT #> NAMPT             13.66390   14.53844  13.406628   13.95211   14.20371 #> ENSG00000278869   10.20447   10.63155   9.947196   10.04522   10.29682 #> CABP7-DT          10.20447   10.63155   9.947196   10.04522   10.29682 #>                 AGCCACTAGC AGCCAGAATA AGCCAGCTCT AGCGATAACG AGCTATTCCA #> NAMPT             14.39311  14.045900  13.896092   13.11280  14.355971 #> ENSG00000278869   10.14518   9.958437   9.989202   10.30545   9.963654 #> CABP7-DT          10.14518   9.958437   9.989202   10.30545   9.963654 #>                 AGGCGTCTGT AGGTCACCAA AGTAACTCAC AGTAAGCGTT AGTCCACGTA #> NAMPT             14.59436   13.67424   13.90536   14.07932  14.083966 #> ENSG00000278869   10.20205   10.21480   10.20492   10.37888  12.318431 #> CABP7-DT          10.20205   10.21480   10.20492   10.37888   9.996503 #>                 AGTCTCGGCA AGTCTGTACG AGTGCAATGT ATAACGCCTC ATAAGAGGTC #> NAMPT             14.48354   13.37684   13.81293   14.11309   14.19242 #> ENSG00000278869   10.39608   10.20691   10.35350    9.86516   10.49198 #> CABP7-DT          10.39608   10.20691   10.35350    9.86516   10.49198 #>                 ATAAGGTGCA ATACACGACA ATACCTCCGG ATAGCAGTGC ATAGGCCATT #> NAMPT             13.59311   14.15351  13.380159   12.64341   13.91116 #> ENSG00000278869   10.13368   10.24661   9.920727   10.32148   10.00427 #> CABP7-DT          10.13368   10.24661   9.920727   10.32148   10.00427 #>                 ATATCCGCAT ATCAGCACTT ATCAGCGAGG ATCCAATACG ATCCGCTGTG #> NAMPT             13.20469   14.30919   14.28599  13.835359   13.51872 #> ENSG00000278869   10.39733   10.40230   10.37910   9.928468   10.34879 #> CABP7-DT          10.39733   10.40230   10.37910   9.928468   10.34879 #>                 ATCCGTCCAT ATCGACGGCT ATCGCGATTA ATCGGTAGGC ATCTAAGGAG #> NAMPT            13.655788   14.27063   13.72080   13.77757  14.418766 #> ENSG00000278869   9.955348   10.36374   10.02036   10.07713   9.895204 #> CABP7-DT          9.955348   10.36374   10.02036   10.07713   9.895204 #>                 ATGACGGTAA ATGACTCAGT ATGCGGACTG ATGGTCTTAG ATGTGGAAGC #> NAMPT             14.47485   13.83903  14.708160   13.34782   13.85146 #> ENSG00000278869   10.22693    9.93214   9.850179   10.54047   10.39203 #> CABP7-DT          10.22693    9.93214   9.850179   10.54047   10.39203 #>                 ATTATCGGAC ATTCGGAACA CAACAATCCA CAAGAAGCAT CAAGATGAGG #> NAMPT             14.38714   12.83998   14.14760   13.75141  13.759497 #> ENSG00000278869   10.29968   10.51805   10.24071   10.29198   9.852606 #> CABP7-DT          10.29968   10.51805   10.24071   10.29198   9.852606 #>                 CAAGCCAACG CAAGTGGATC CACAGTTCAT CACGAGTCTG CACGCTCCAA #> NAMPT             12.79278   14.13392   14.03263   14.62014   14.13498 #> ENSG00000278869   11.20782    9.88599   10.33219   10.09658   10.43454 #> CABP7-DT          11.20782    9.88599   10.33219   10.09658   10.43454 #>                 CACTGAGCAC CAGATCAATG CAGTGCTCTT CAGTTAAGCA CATAGCTATC #> NAMPT             14.35395   13.84167   14.23031   13.81527   13.89587 #> ENSG00000278869   10.10602   10.38224    9.98238   10.35584   10.19543 #> CABP7-DT          10.10602   10.38224    9.98238   10.35584   10.19543 #>                 CATCACCACC CATGTACGCC CATTACACTG CATTCGACGA CCAACTATGG #> NAMPT             14.75381   13.92909   14.08192  13.895667   12.88798 #> ENSG00000278869   10.50588   10.02220   10.38148   9.988777   10.56605 #> CABP7-DT          10.50588   10.02220   10.38148   9.988777   10.56605 #>                 CCAAGGAGTT CCAATTGTTC CCACAAGTGC CCAGCTTAGT CCATAACTTG #> NAMPT            14.453685   14.38994  14.464874   14.09772  13.624526 #> ENSG00000278869   9.809829   10.30248   9.941312   10.92780   9.717635 #> CABP7-DT          9.809829   10.30248   9.941312   10.92780   9.717635 #>                 CCATAGATCA CCGAACAAGC CCGAAGACCT CCGAATAGTG CCGACTTCTC #> NAMPT            14.192856   13.64834   14.32621   14.43232   14.71488 #> ENSG00000278869   9.800538   12.06338   10.62577   10.04000   10.32257 #> CABP7-DT          9.800538   10.47842   10.62577   10.04000   10.32257 #>                 CCGATCCACT CCGATGATAC CCGCGTTATG CCGCTAGCTT CCGGAGTATC #> NAMPT             13.59321   14.04795   13.86349   14.13613   14.81530 #> ENSG00000278869   12.00824   10.58852   10.16305   10.22924   10.06041 #> CABP7-DT          10.42328   10.58852   10.16305   10.22924   10.06041 #>                 CCGGCCAATT CCGGTCTCTA CCGTACGATG CCGTCAGAAC CCTAGACACG #> NAMPT             13.99348   14.58924   13.39697  14.166851   13.85250 #> ENSG00000278869   10.29304   10.06568   10.58962   9.774533   10.15206 #> CABP7-DT          10.29304   10.06568   10.58962   9.774533   10.15206 #>                 CCTAGTTGAG CCTATTCTGT CCTCAACCGA CCTCCATAAG CCTGATGCCA #> NAMPT             14.44526   14.80778   14.62671   14.11069   13.94918 #> ENSG00000278869   10.19734   10.55986   10.23439   10.20380    9.86172 #> CABP7-DT          10.19734   10.55986   10.23439   10.20380    9.86172 #>                 CCTGCAATAC CCTTGTATTC CGAGATCTCT CGAGGAACAA CGATAACCGC #> NAMPT             13.49066   13.96961   13.38090   14.73580   14.19375 #> ENSG00000278869   10.32073   10.06272   10.57355   11.67691   10.28686 #> CABP7-DT          10.32073   10.06272   10.57355   10.09195   10.28686 #>                 CGATCCTGTG CGCCAACCAT CGCCAGTGTT CGCGGATTCA CGCTTCTTGG #> NAMPT            14.069789   13.76564   14.45898  13.696850   14.54643 #> ENSG00000278869   9.982326   11.44371   10.06667   9.996411   10.29851 #> CABP7-DT          9.982326   11.44371   10.06667   9.996411   10.29851 #>                 CGGAATACAC CGGAGATTGG CGGAGCTCAA CGGATCGGTA CGGATTCTAG #> NAMPT             14.10723   14.45082   13.96841  14.499409   13.11294 #> ENSG00000278869   10.40679   10.36335   10.26797   9.855552   10.30559 #> CABP7-DT          10.40679   10.36335   10.26797   9.855552   10.30559 #>                 CGGCAACTTA CGGCTCATCA CGGTCGTATT CGGTGACATC CGTAACGGAT #> NAMPT             12.82179   14.11113   14.16814   12.88258   14.34739 #> ENSG00000278869   10.01443   10.41069   10.08067   10.56065   10.09946 #> CABP7-DT          10.01443   10.41069   10.08067   10.56065   10.09946 #>                 CGTAAGATTC CGTACTGTAA CGTAGAAGAC CGTCCTAGGA CGTCGGCAAT #> NAMPT             13.64759   13.57998   14.45721  13.888355   13.45407 #> ENSG00000278869   10.18816   10.12055   10.36975   9.981465   10.28415 #> CABP7-DT          10.18816   10.12055   10.36975   9.981465   10.28415 #>                 CGTGAGTTAT CGTGTCAAGC CTAACTTCAG CTAATAGCGT CTACACCAGG #> NAMPT             14.21134   12.86255  14.389230   13.88852  14.203103 #> ENSG00000278869   10.12387   10.54062   9.996913   12.01405   9.955175 #> CABP7-DT          10.12387   10.54062   9.996913   10.42908   9.955175 #>                 CTAGCACAAT CTATGAACGG CTCAAGGACC CTCACCTGTC CTCCTATTGT #> NAMPT            13.973762  14.283509   14.02354   14.41938  13.524988 #> ENSG00000278869   9.886299   9.891191   10.32310   10.02706   9.824548 #> CABP7-DT          9.886299   9.891191   10.32310   10.02706   9.824548 #>                 CTCGCAACGT CTGGATTGAC CTGTCTGTGT CTTATGTTGC CTTCATATCG #> NAMPT            13.903956   14.25770   13.56746   14.12393  13.892189 #> ENSG00000278869   9.997065   10.17024   10.39753   10.21704   9.804727 #> CABP7-DT          9.997065   10.17024   10.39753   10.21704   9.804727 #>                 CTTGCTGACG CTTGGATCTT GAAGAGTTCT GAAGGATTAG GAATCGAGCC #> NAMPT             13.53461   14.10169   14.60146   13.85138   13.17640 #> ENSG00000278869   10.72725   10.01423   10.20914   10.15094   10.36904 #> CABP7-DT          10.72725   10.01423   10.20914   10.15094   10.36904 #>                 GAATCTTCTC GAATTACGGC GACCATCTAA GACGACCACA GAGAACGAAG #> NAMPT             13.20838   14.26026  14.169591   14.15530   14.32893 #> ENSG00000278869   10.03845   10.35336   9.921664   10.45486   11.66597 #> CABP7-DT          10.03845   10.35336   9.921664   10.45486   10.08101 #>                 GAGACAAGGC GAGACATCTT GAGCGAGTCA GAGTAGACCA GATACGCTTA #> NAMPT             14.17458   13.31867   12.82448   13.94739   12.69029 #> ENSG00000278869   11.85265   10.14874   10.50256   10.04050   11.10533 #> CABP7-DT          10.26769   10.14874   10.50256   10.04050   11.10533 #>                 GATAGACTGT GATAGAGGCG GATAGGTCAA GATATCAGGA GATCTCATTC #> NAMPT             12.95078   13.50194   14.17048   13.76605   13.58436 #> ENSG00000278869   10.62885   10.69458   10.08301   10.30662   10.12493 #> CABP7-DT          10.62885   10.69458   10.08301   10.30662   10.12493 #>                 GATCTGGTCG GATGAGTGAC GATGGATACA GATGTGACAG GATTGCACGC #> NAMPT             13.44772  14.225836   14.69629   13.99576   10.88166 #> ENSG00000278869   10.27780   9.977908   10.17273   10.08887   10.88166 #> CABP7-DT          10.27780   9.977908   10.17273   10.08887   10.88166 #>                 GCACACTATA GCACTGCGTT GCACTTAATC GCAGGAGATG GCAGTACTGG #> NAMPT             14.06808   13.50116  13.875953   13.89685  14.519691 #> ENSG00000278869   10.36764   10.33124   9.969063   10.43742   9.996129 #> CABP7-DT          10.36764   10.33124   9.969063   10.43742   9.996129 #>                 GCATATGAGT GCATCCGATC GCCAAGTACA GCCACGATTC GCCATAGGTT #> NAMPT             14.49169   14.25239   13.43202   14.41545   13.66035 #> ENSG00000278869   10.24377   10.00446   10.26210   10.02313   10.20092 #> CABP7-DT          10.24377   10.00446   10.26210   10.02313   10.20092 #>                 GCCATATCGA GCCGTCAATA GCCTGGACAT GCGTAATTAC GCTATTATCC #> NAMPT            14.140329   13.76553  14.089849   13.80946  13.486204 #> ENSG00000278869   9.892401   10.30610  11.426884   10.35003   9.785764 #> CABP7-DT          9.892401   10.30610   9.841921   10.35003   9.785764 #>                 GCTCAGTAAT GCTGCTTATA GGAATAAGCA GGACGATGCT GGCATCGTGA #> NAMPT             13.63412   13.83237   14.28263   12.39894   13.61543 #> ENSG00000278869   10.82677   10.13193   10.37574   10.07701   10.44550 #> CABP7-DT          10.82677   10.13193   10.37574   10.07701   10.44550 #>                 GGCATTATTG GGCCGAGATT GGCGCTATAA GGCGTTAAGT GGCTATTGAT #> NAMPT             14.04289   13.62700  14.160058   13.67315   13.21275 #> ENSG00000278869   10.13600   10.16757  11.497093   10.21372   10.04282 #> CABP7-DT          10.13600   10.16757   9.912131   10.21372   10.04282 #>                 GGCTGCTACT GGTAATGTGT GGTGTTCACC GGTTCACTGG GTAACCAGTA #> NAMPT             13.78544   14.27067   14.54249   14.02450   13.62434 #> ENSG00000278869   10.32600   10.02274   10.15017   10.56507   10.16491 #> CABP7-DT          10.32600   10.02274   10.15017   10.56507   10.16491 #>                 GTAACCTTGG GTAAGAACCT GTAAGGCTCC GTAATCCACG GTATTGTGGA #> NAMPT             13.73078   13.77462   13.65875   13.50599   14.16883 #> ENSG00000278869   10.03034   10.07418   10.19932   10.04656   10.08136 #> CABP7-DT          10.03034   10.07418   10.19932   10.04656   10.08136 #>                 GTCCGCATCA GTCCTTCGGT GTCGCTCTCT GTCGGTGACA GTCTCGAGTG #> NAMPT             14.12045   15.05770   13.97768  13.309835   13.63661 #> ENSG00000278869   10.42001   10.19971   10.27725   9.850403   10.46669 #> CABP7-DT          10.42001   10.19971   10.27725   9.850403   10.46669 #>                 GTCTCTTAAG GTCTTCCGAG GTGACTATAC GTGGTTAATG GTGTGCCTGT #> NAMPT             14.31048   13.69240  13.944329   14.18121   13.72460 #> ENSG00000278869   10.40359   10.52248   9.856866   10.27432   10.26517 #> CABP7-DT          10.40359   10.52248   9.856866   10.27432   10.26517 #>                 GTGTGTGTCC GTTCATTGCC GTTCCGGTGA GTTCGTCGAA GTTGAATTGG #> NAMPT             14.26303   14.22101   13.25959   13.86624   13.57186 #> ENSG00000278869   10.17557   10.13355   10.45223    9.95935   10.40194 #> CABP7-DT          10.17557   10.13355   10.45223    9.95935   10.40194 #>                 GTTGATCCGC GTTGTATGCT TAACCGTAGC TAACGTCGAT TAAGGTACGG #> NAMPT            12.701573  14.043267   14.33462   14.06657  14.598048 #> ENSG00000278869   9.894218   9.955805   10.08669   10.15967   9.843161 #> CABP7-DT          9.894218   9.955805   10.08669   10.15967   9.843161 #>                 TACTACCGCC TAGCGCCAAC TAGGTTGCAA TAGTAGTCTC TAGTCCGCTG #> NAMPT            14.569266   13.52407   13.96091  14.282132   13.62775 #> ENSG00000278869   9.925409   10.71671   10.26047   9.889814   10.45783 #> CABP7-DT          9.925409   10.71671   10.26047   9.889814   10.45783 #>                 TAGTGGAACT TATCATGCAG TATCGTTACG TCAAGTGCAG TCACAGATAC #> NAMPT             12.60432   13.34823   13.97041   13.79348   14.55655 #> ENSG00000278869   10.28239   10.17831   10.06351   10.33404   10.03298 #> CABP7-DT          10.28239   10.17831   10.06351   10.33404   10.03298 #>                 TCACCGCCTA TCACGCCACT TCACGTTGGC TCATTGTCCA TCCACACTAG #> NAMPT             13.97246   13.98971   13.50309   14.64208   13.02373 #> ENSG00000278869   10.27202   10.08282   10.33316   10.11852   10.21638 #> CABP7-DT          10.27202   10.08282   10.33316   10.11852   10.21638 #>                 TCCACGGTCA TCCACTCGCT TCCGACTAAC TCCGTTATCT TCCTAAGAGA #> NAMPT             14.64278   12.33585   14.71994   14.10845   14.34250 #> ENSG00000278869   10.11922   10.75088   10.19638   10.20156   10.43561 #> CABP7-DT          10.11922   10.75088   10.19638   10.20156   10.43561 #>                 TCCTCTAGTA TCGAAGCATT TCGAGAGAGC TCGCACTTGA TCGCCTACTG #> NAMPT             13.62554   13.77115   11.95421  14.833341   12.67466 #> ENSG00000278869   10.81819   10.60123   10.36925   9.879145   10.35273 #> CABP7-DT          10.81819   10.60123   10.36925   9.879145   10.35273 #>                 TCGCGTAGCA TCGGCGTTAA TCTACATCCG TCTCTCCTAT TGAAGAAGGT #> NAMPT             13.52208   14.43634   14.58437   14.92699   14.93352 #> ENSG00000278869   10.35215   10.04402   10.49691    9.97279   10.28966 #> CABP7-DT          10.35215   10.04402   10.49691    9.97279   10.28966 #>                 TGAGCGTTCC TGAGTACGTA TGGAATGGAG TGTCATTCGC TGTGCTTCAG #> NAMPT             14.47326   13.31961   13.66720   14.58681  14.197272 #> ENSG00000278869   10.08094   10.51225   10.20777   10.49935  11.534307 #> CABP7-DT          10.08094   10.51225   10.20777   10.49935   9.949344 #>                 TGTTCAGGAT TTACACACGT TTACTGTGAC TTATGCCGCG TTCACGGAAG #> NAMPT             13.63357  14.565143   14.50972   14.45371   14.27686 #> ENSG00000278869   10.17414   9.707162   10.60283   10.06139   10.36997 #> CABP7-DT          10.17414   9.707162   10.60283   10.06139   10.36997 #>                 TTCGAGTGAT TTCTGTACCT TTGGTAACAG #> NAMPT             14.59300   14.17005  14.297836 #> ENSG00000278869   10.20068   10.71062   9.905519 #> CABP7-DT          10.20068   10.71062   9.905519 #>  [ reached getOption(\"max.print\") -- omitted 497 rows ]"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_qc_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate QC metrics — compute_qc_metrics","title":"Calculate QC metrics — compute_qc_metrics","text":"calculate QC metrics standard deviation (sd), median absolute deviation (MAD), interquartile range (IQR), Z score read counts per condition/group interest","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_qc_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate QC metrics — compute_qc_metrics","text":"","code":"compute_qc_metrics(data = NULL, group_by = NULL, order_by = NULL)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_qc_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate QC metrics — compute_qc_metrics","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\". group_by metadata column name group data order_by column name \"median\" median read counts.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_qc_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate QC metrics — compute_qc_metrics","text":"list data frame QC metrics box plot showing read counts per condition","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_qc_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate QC metrics — compute_qc_metrics","text":"","code":"data(mini_mac) compute_qc_metrics(data = mini_mac, group_by = \"combined_id\", order_by = \"median\") #> $stats_summary #> # A tibble: 83 × 6 #>    combined_id     sd_value mad_value group_median z_score   IQR #>    <chr>              <dbl>     <dbl>        <dbl>   <dbl> <dbl> #>  1 Abemaciclib_0.1     39.1     32.6           465   0.542  38   #>  2 Abemaciclib_1       32.5     47.4           415  -0.119  32.5 #>  3 Abemaciclib_10     104.      63.8           382  -0.555  99   #>  4 Adavosertib_0.1     65.5     93.4           417  -0.093  65.5 #>  5 Adavosertib_1       63.1     83.0           440   0.212  63   #>  6 Adavosertib_10      62.5     90.4           353  -0.939  62.5 #>  7 Anastrozole_0.1     13.2      7.41          466   0.555  12.5 #>  8 Anastrozole_1       50.7     13.3           405  -0.251  46   #>  9 Anastrozole_10      24.3      2.96          491   0.886  21.5 #> 10 Azd.5991_0.1        66.6     53.4           425   0.013  64.5 #> # ℹ 73 more rows #>  #> $plot  #>"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve normalised counts of MAC-seq data — compute_single_de","title":"Retrieve normalised counts of MAC-seq data — compute_single_de","text":"function retrieves  counts number methods available normalisation, default limma-voomLmFit.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve normalised counts of MAC-seq data — compute_single_de","text":"","code":"compute_single_de(   data = NULL,   treatment_samples = NULL,   control_samples = NULL,   method = NULL,   batch = 1,   k = 2,   spikes = NULL )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve normalised counts of MAC-seq data — compute_single_de","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\" treatment_samples Value column \"combined_id\" representing replicates treatment samples data control_samples Value column \"combined_id\"  representing replicates control samples data method One \"Seurat_wilcox\", \"DESeq2\", \"edgeR\", \"RUVg\", \"RUVs\", \"RUVr\", \"limma_voom\" batch Either empty, single value, vector corresponding number samples k Parameter k RUVSeq methods, check RUVSeq tutorial spikes List genes use spike controls","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_de.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve normalised counts of MAC-seq data — compute_single_de","text":"Data frame DE counts","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_de.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve normalised counts of MAC-seq data — compute_single_de","text":"","code":"data(mini_mac) treatment_samples=\"Staurosporine_0.1\" control_samples<-\"DMSO_0\" top_table <- compute_single_de(mini_mac, treatment_samples, control_samples, method = \"limma_voom\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_dose_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Model Gene Dose-Response Curve Using drc — compute_single_dose_response","title":"Model Gene Dose-Response Curve Using drc — compute_single_dose_response","text":"Model Gene Dose-Response Curve Using drc","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_dose_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model Gene Dose-Response Curve Using drc — compute_single_dose_response","text":"","code":"compute_single_dose_response(   data,   gene = NULL,   pathway = NULL,   normalisation = \"limma_voom\",   treatment_value,   control_value = \"DMSO\",   batch = 1,   k = 2 )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_dose_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model Gene Dose-Response Curve Using drc — compute_single_dose_response","text":"data Seurat TidySeurat object containing expression metadata. gene gene name (must match row name object). pathway character string present list enriched pathways. normalisation One \"raw\", \"logNorm\", \"cpm\", \"clr\", \"SCT\", \"DESeq2\", \"edgeR\", \"RUVg\", \"RUVs\", \"RUVr\", \"limma_voom\", \"zinb\". empty, defaults cpm treatment_value character string matching one value metadata column \"Treatment_1\". control_value character string matching one value metadata column \"Treatment_1\". batch Either empty, single value, vector corresponding number samples k Parameter k RUVSeq methods, check RUVSeq tutorial","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_dose_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model Gene Dose-Response Curve Using drc — compute_single_dose_response","text":"list drc model, predicted values, ggplot curve","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_dose_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model Gene Dose-Response Curve Using drc — compute_single_dose_response","text":"","code":"# \\donttest{ data(mini_mac) res <- compute_single_dose_response(data = mini_mac, gene = \"FSHR\", normalisation = \"limma_voom\", treatment_value = \"Camptothecin\") #>  #> Estimated effective doses #>  #>        Estimate Std. Error   Lower   Upper #> e:1:50   2.6528     2.3796 -2.2585  7.5641 res$plot  res <- compute_single_dose_response(data = mini_mac, pathway = \"p53 Pathway\", treatment_value = \"Camptothecin\") #> Warning: NaNs produced #> Warning: NaNs produced #> Warning: NaNs produced #>  #> Estimated effective doses #>  #>        Estimate Std. Error Lower Upper #> e:1:50   3.4395    10.0000   NaN   NaN res$plot  # }"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_enrichr.html","id":null,"dir":"Reference","previous_headings":"","what":"Pathway enrichment analysis — compute_single_enrichr","title":"Pathway enrichment analysis — compute_single_enrichr","text":"pathway_enrichment performs hypergeometric test enrichment set genes user-provided genesets enricher databases","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_enrichr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pathway enrichment analysis — compute_single_enrichr","text":"","code":"compute_single_enrichr(   genes = NULL,   db = NULL,   genesets = NULL,   species = NULL )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_enrichr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pathway enrichment analysis — compute_single_enrichr","text":"genes Differentially expressed genes enrichment analysis db Valid name enrichR database genesets Named list genes species One \"human\", \"mouse\", \"fly\", \"yeast\", \"worm\" \"fish\"","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_enrichr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pathway enrichment analysis — compute_single_enrichr","text":"Data frame pathway-enrichment statistics","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_single_enrichr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pathway enrichment analysis — compute_single_enrichr","text":"","code":"data(mini_mac) top_genes <- mini_mac@tools$diff_exprs[[\"Staurosporine_10\"]]$gene data(genesets) compute_single_enrichr(genes = top_genes, genesets = genesets, species=\"human\") #>                                                                Term Overlap #> Adipogenesis                                           Adipogenesis   5/200 #> Interferon Gamma Response                 Interferon Gamma Response   5/200 #> mTORC1 Signaling                                   mTORC1 Signaling   5/200 #> Angiogenesis                                           Angiogenesis    1/36 #> Apical Surface                                       Apical Surface    1/44 #> Reactive Oxygen Species Pathway     Reactive Oxygen Species Pathway    1/49 #> Androgen Response                                 Androgen Response   2/100 #> Pperoxisome                                             Pperoxisome   2/104 #> Bile Acid Metabolism                           Bile Acid Metabolism   2/112 #> Cholesterol Homeostasis                     Cholesterol Homeostasis    1/74 #> Mitotic Spindle                                     Mitotic Spindle   3/199 #> Apical Junction                                     Apical Junction   3/200 #> Estrogen Response Early                     Estrogen Response Early   3/200 #> Estrogen Response Late                       Estrogen Response Late   3/200 #> Inflammatory Response                         Inflammatory Response   3/200 #> p53 Pathway                                             p53 Pathway   3/200 #> Xenobiotic Metabolism                         Xenobiotic Metabolism   3/200 #> Protein Secretion                                 Protein Secretion    1/96 #> Interferon Alpha Response                 Interferon Alpha Response    1/97 #> Unfolded Protein Response                 Unfolded Protein Response   1/113 #> IL-2/STAT5 Signaling                           IL-2/STAT5 Signaling   2/199 #> Complement                                               Complement   2/200 #> E2F Targets                                             E2F Targets   2/200 #> Epithelial Mesenchymal Transition Epithelial Mesenchymal Transition   2/200 #> G2-M Checkpoint                                     G2-M Checkpoint   2/200 #> Hypoxia                                                     Hypoxia   2/200 #> KRAS Signaling Up                                 KRAS Signaling Up   2/200 #> TNF-alpha Signaling via NF-kB         TNF-alpha Signaling via NF-kB   2/200 #> Spermatogenesis                                     Spermatogenesis   1/135 #> UV Response Dn                                       UV Response Dn   1/144 #> DNA Repair                                               DNA Repair   1/150 #> Fatty Acid Metabolism                         Fatty Acid Metabolism   1/158 #> UV Response Up                                       UV Response Up   1/158 #> Apoptosis                                                 Apoptosis   1/161 #> Glycolysis                                               Glycolysis   1/200 #> heme Metabolism                                     heme Metabolism   1/200 #>                                     P.value Adjusted.P.value #> Adipogenesis                      0.5626019        0.9938373 #> Interferon Gamma Response         0.5626019        0.9938373 #> mTORC1 Signaling                  0.5626019        0.9938373 #> Angiogenesis                      0.5983803        0.9938373 #> Apical Surface                    0.6721497        0.9938373 #> Reactive Oxygen Species Pathway   0.7112179        0.9938373 #> Androgen Response                 0.7173573        0.9938373 #> Pperoxisome                       0.7373165        0.9938373 #> Bile Acid Metabolism              0.7736422        0.9938373 #> Cholesterol Homeostasis           0.8469498        0.9938373 #> Mitotic Spindle                   0.8776790        0.9938373 #> Apical Junction                   0.8797767        0.9938373 #> Estrogen Response Early           0.8797767        0.9938373 #> Estrogen Response Late            0.8797767        0.9938373 #> Inflammatory Response             0.8797767        0.9938373 #> p53 Pathway                       0.8797767        0.9938373 #> Xenobiotic Metabolism             0.8797767        0.9938373 #> Protein Secretion                 0.9125226        0.9938373 #> Interferon Alpha Response         0.9147201        0.9938373 #> Unfolded Protein Response         0.9432475        0.9938373 #> IL-2/STAT5 Signaling              0.9610868        0.9938373 #> Complement                        0.9619081        0.9938373 #> E2F Targets                       0.9619081        0.9938373 #> Epithelial Mesenchymal Transition 0.9619081        0.9938373 #> G2-M Checkpoint                   0.9619081        0.9938373 #> Hypoxia                           0.9619081        0.9938373 #> KRAS Signaling Up                 0.9619081        0.9938373 #> TNF-alpha Signaling via NF-kB     0.9619081        0.9938373 #> Spermatogenesis                   0.9675986        0.9938373 #> UV Response Dn                    0.9742425        0.9938373 #> DNA Repair                        0.9778976        0.9938373 #> Fatty Acid Metabolism             0.9819787        0.9938373 #> UV Response Up                    0.9819787        0.9938373 #> Apoptosis                         0.9833071        0.9938373 #> Glycolysis                        0.9938373        0.9938373 #> heme Metabolism                   0.9938373        0.9938373 #>                                                           Genes Combined.Score #> Adipogenesis                       ELMOD3;GPAM;ATP1B3;DHCR7;CAT     0.00000000 #> Interferon Gamma Response           VAMP8;NMI;PTGS2;NAMPT;CIITA     0.00000000 #> mTORC1 Signaling                  XBP1;CTSC;NAMPT;DHCR7;SLC37A4     0.00000000 #> Angiogenesis                                             S100A4     0.05482027 #> Apical Surface                                            CD160    -0.03836116 #> Reactive Oxygen Species Pathway                             CAT    -0.07015874 #> Androgen Response                                   ACTN1;CENPN    -0.10638314 #> Pperoxisome                                          PEX11A;CAT    -0.11483888 #> Bile Acid Metabolism                                 PEX11A;CAT    -0.12426327 #> Cholesterol Homeostasis                                   DHCR7    -0.10513242 #> Mitotic Spindle                             SMC4;CDC42EP1;DOCK4    -0.11700205 #> Apical Junction                              ACTN1;CLDN18;NLGN2    -0.11602410 #> Estrogen Response Early                       PEX11A;XBP1;DHCR7    -0.11602410 #> Estrogen Response Late                        XBP1;PLXNB1;DHCR7    -0.11602410 #> Inflammatory Response                            NMI;NAMPT;ROS1    -0.11602410 #> p53 Pathway                                  VAMP8;S100A4;EPHX1    -0.11602410 #> Xenobiotic Metabolism                            AHCY;EPHX1;CAT    -0.11602410 #> Protein Secretion                                          CTSC    -0.08378043 #> Interferon Alpha Response                                   NMI    -0.08260677 #> Unfolded Protein Response                                  XBP1    -0.06424828 #> IL-2/STAT5 Signaling                                  XBP1;AHCY    -0.05361359 #> Complement                                           CTSC;DOCK4    -0.05276816 #> E2F Targets                                           SMC4;CTCF    -0.05276816 #> Epithelial Mesenchymal Transition                    MGP;PDGFRB    -0.05276816 #> G2-M Checkpoint                                       SMC4;CTCF    -0.05276816 #> Hypoxia                                          S100A4;SLC37A4    -0.05276816 #> KRAS Signaling Up                                  PTGS2;ANXA10    -0.05276816 #> TNF-alpha Signaling via NF-kB                       PTGS2;NAMPT    -0.05276816 #> Spermatogenesis                                            DMC1    -0.04312421 #> UV Response Dn                                           PDGFRB    -0.03621412 #> DNA Repair                                                EIF1B    -0.03214383 #> Fatty Acid Metabolism                                     EPHX1    -0.02733699 #> UV Response Up                                            EPHX1    -0.02733699 #> Apoptosis                                                PDGFRB    -0.02570532 #> Glycolysis                                              SLC37A4    -0.01119908 #> heme Metabolism                                             CAT    -0.01119908"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_smiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate tidyseurat object with SMILES — compute_smiles","title":"Annotate tidyseurat object with SMILES — compute_smiles","text":"function retrieves isomeric SMILES PubChem based compound names Treatment_1 column tidyseurat object.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_smiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate tidyseurat object with SMILES — compute_smiles","text":"","code":"compute_smiles(data, compound_column)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_smiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate tidyseurat object with SMILES — compute_smiles","text":"data tidyseurat object compound_column Column generic name compound","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_smiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate tidyseurat object with SMILES — compute_smiles","text":"tidyseurat object smiles column added metadata.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/compute_smiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate tidyseurat object with SMILES — compute_smiles","text":"","code":"mock_data <- tibble::tibble( Treatment_1 = c(\"Aspirin\", \"Caffeine\", \"NonExistentCompound_123\") ) result <- compute_smiles(mock_data, compound_column = \"Treatment_1\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/convert_human_to_mouse.html","id":null,"dir":"Reference","previous_headings":"","what":"For a given gene set of human symbols return mouse symbols — convert_human_to_mouse","title":"For a given gene set of human symbols return mouse symbols — convert_human_to_mouse","text":"given gene set human symbols return mouse symbols","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/convert_human_to_mouse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"For a given gene set of human symbols return mouse symbols — convert_human_to_mouse","text":"","code":"convert_human_to_mouse(gene_list)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/convert_human_to_mouse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"For a given gene set of human symbols return mouse symbols — convert_human_to_mouse","text":"gene_list List human genes converted mouse IDs","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/convert_human_to_mouse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"For a given gene set of human symbols return mouse symbols — convert_human_to_mouse","text":"genes","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/convert_human_to_mouse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"For a given gene set of human symbols return mouse symbols — convert_human_to_mouse","text":"","code":"# \\donttest{ convert_human_to_mouse(c(\"BRCA1\", \"TRAF1\", \"MYBL1\")) #> [1] \"Brca1\" \"Traf1\" \"Mybl1\" # }"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/download_geneset.html","id":null,"dir":"Reference","previous_headings":"","what":"Title — download_geneset","title":"Title — download_geneset","text":"Title","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/download_geneset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Title — download_geneset","text":"","code":"download_geneset(species = \"human\", db = \"MSigDB_Hallmark_2020\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/download_geneset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Title — download_geneset","text":"species One \"human\", \"mouse\", \"fly\", \"yeast\", \"worm\" \"fish\" db Valid name enrichR database","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/download_geneset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Title — download_geneset","text":"List genes per geneset","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/download_geneset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Title — download_geneset","text":"","code":"genesets <- download_geneset(\"human\", \"MSigDB_Hallmark_2020\") head(genesets[[\"Adipogenesis\"]]) #> [1] \"ECH1\"    \"CIDEA\"   \"PEX14\"   \"LEP\"     \"UQCRC1\"  \"SPARCL1\""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/filter_genes_by_expression.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter genes by expression and grouping — filter_genes_by_expression","title":"Filter genes by expression and grouping — filter_genes_by_expression","text":"Filter genes expression grouping","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/filter_genes_by_expression.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter genes by expression and grouping — filter_genes_by_expression","text":"","code":"filter_genes_by_expression(   data,   group_by = \"combined_id\",   min_counts = 10,   min_samples = 2 )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/filter_genes_by_expression.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter genes by expression and grouping — filter_genes_by_expression","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\" group_by Name column defines groups replicates min_counts Minimum number reads per gene per group min_samples Minimum number samples group","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/filter_genes_by_expression.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter genes by expression and grouping — filter_genes_by_expression","text":"tidyseurat object","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/filter_genes_by_expression.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter genes by expression and grouping — filter_genes_by_expression","text":"","code":"data(mini_mac) mini_mac <- filter_genes_by_expression(mini_mac,                                        group_by = \"combined_id\",                                         min_counts = 10, min_samples = 2)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/find_clusters_de_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate clusters for umap based on DE analysis — find_clusters_de_umap","title":"Calculate clusters for umap based on DE analysis — find_clusters_de_umap","text":"Calculate clusters umap based DE analysis","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/find_clusters_de_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate clusters for umap based on DE analysis — find_clusters_de_umap","text":"","code":"find_clusters_de_umap(data = NULL, k = 10)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/find_clusters_de_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate clusters for umap based on DE analysis — find_clusters_de_umap","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\". k Number nearest neighbors buildSNNGraph used construct shared nearest-neighbor (SNN) graph","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/find_clusters_de_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate clusters for umap based on DE analysis — find_clusters_de_umap","text":"tidyseurat object cluster information metadata slot","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/find_clusters_de_umap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate clusters for umap based on DE analysis — find_clusters_de_umap","text":"","code":"data(mini_mac) mini_mac <- compute_de_umap(mini_mac) #> Found more than one class \"dist\" in cache; using the first, from namespace 'spam' #> Also defined by ‘BiocGenerics’ mini_mac <- find_clusters_de_umap(mini_mac)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/genesets.html","id":null,"dir":"Reference","previous_headings":"","what":"Pathway gene‐sets for PMMSq033 — genesets","title":"Pathway gene‐sets for PMMSq033 — genesets","text":"named list gene sets used hypergeometric enrichment tests PMMSq033 dataset.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/genesets.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pathway gene‐sets for PMMSq033 — genesets","text":"named list length character vectors. element character vector gene symbols corresponding one pathway.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/genesets.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pathway gene‐sets for PMMSq033 — genesets","text":"Generated extdata/PMMSq033/pathways.Rds via data-raw/data.R preprocessing script.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/macpie_colours.html","id":null,"dir":"Reference","previous_headings":"","what":"Color palettes used by macpie — macpie_colours","title":"Color palettes used by macpie — macpie_colours","text":"named list discrete continuous color palettes consistent styling macpie plots.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/macpie_colours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color palettes used by macpie — macpie_colours","text":"","code":"macpie_colours"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/macpie_colours.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Color palettes used by macpie — macpie_colours","text":"named list following elements: discrete: Preferred unikn palette colors. discrete_40: 60-color extension sampled high cardinality. discrete_400: 400-color diverging Zissou1 palette (reversed). high: Single high-emphasis color. low: Single low-emphasis color. divergent: 100-step divergent palette. continuous: 100-step continuous palette (high white low). continuous_rev: Reverse continuous. scale_3: Three-color scale small categorical data.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/macpie_colours.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Color palettes used by macpie — macpie_colours","text":"","code":"macpie_colours$discrete #> [1] \"#59C7EB\" \"#E0607E\" \"#0A9086\" \"#FEA090\" \"#3E5496\" \"#EFDC60\" \"#8E2043\" #> [8] \"#9AA0A7\" \"#077187\" barplot(rep(1, 10), col = macpie_colours$discrete_40, border = NA)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/macpie_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"colour theme for macpie plots — macpie_theme","title":"colour theme for macpie plots — macpie_theme","text":"custom ggplot2 theme optimized macpie figures, clean backgrounds, consistent text sizing, configurable axis/legend elements.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/macpie_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"colour theme for macpie plots — macpie_theme","text":"","code":"macpie_theme(   show_x_title = TRUE,   show_y_title = TRUE,   legend_position_ = \"bottom\",   x_labels_angle = 0 )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/macpie_theme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"colour theme for macpie plots — macpie_theme","text":"show_x_title Logical; TRUE, displays x-axis title. show_y_title Logical; TRUE, displays y-axis title. legend_position_ Character; position legend (e.g., 'bottom', 'none'). x_labels_angle Numeric; rotation angle (degrees) x-axis text labels.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/macpie_theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"colour theme for macpie plots — macpie_theme","text":"ggplot2 theme object can added plot.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/macpie_theme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"colour theme for macpie plots — macpie_theme","text":"","code":"library(ggplot2) ggplot(mtcars, aes(wt, mpg)) +   geom_point(color = macpie_colours$high) +   macpie_theme()"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/mini_mac.html","id":null,"dir":"Reference","previous_headings":"","what":"A small example MACseq plate — mini_mac","title":"A small example MACseq plate — mini_mac","text":"384-cell × 500-gene subset PMMSq033 dataset, included runnable examples fast CRAN checks.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/mini_mac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A small example MACseq plate — mini_mac","text":"","code":"data(mini_mac)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/mini_mac.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A small example MACseq plate — mini_mac","text":"Seurat object one assay: RNA counts slot , normalized data, metadata","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/mini_mac.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A small example MACseq plate — mini_mac","text":"Prepared subsetting PMMSq033.rds data/","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a box plot to show gene expression (CPM) — plot_counts","title":"Generate a box plot to show gene expression (CPM) — plot_counts","text":"function generate box plot show CPM levels DE genes among selected treatment samples control samples.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a box plot to show gene expression (CPM) — plot_counts","text":"","code":"plot_counts(   data = NULL,   genes = NULL,   group_by = NULL,   treatment_samples = NULL,   control_samples = NULL,   color_by = NULL,   normalisation = NULL,   batch = 1 )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a box plot to show gene expression (CPM) — plot_counts","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\". genes Genes plotted group_by column specifies treatment group input data treatment_samples Value column \"combined_id\" representing replicates treatment samples data control_samples Value column \"combined_id\"  representing replicates control samples data color_by column specifies group coloring normalisation One \"raw\", \"logNorm\", \"cpm\", \"clr\", \"SCT\", \"DESeq2\", \"edgeR\", \"RUVg\", \"RUVs\", \"RUVr\", \"limma_voom\" batch indicate patch factor","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a box plot to show gene expression (CPM) — plot_counts","text":"ggplot2 object","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a box plot to show gene expression (CPM) — plot_counts","text":"","code":"data(mini_mac) genes <- mini_mac@tools$diff_exprs$Staurosporine_10$gene[1:6] p <- plot_counts(mini_mac, genes = genes, group_by = \"combined_id\",  treatment_samples = \"Staurosporine_10\",  control_samples = \"DMSO_0\", normalisation = \"clr\") #> Normalizing layer: counts #> Normalizing across cells #>    |                                                  | 0 % ~calculating     |+                                                 | 1 % ~00s             |++                                                | 3 % ~00s             |++                                                | 4 % ~00s             |+++                                               | 5 % ~00s             |++++                                              | 6 % ~00s             |++++                                              | 8 % ~00s             |+++++                                             | 9 % ~00s             |++++++                                            | 10% ~00s             |++++++                                            | 12% ~00s             |+++++++                                           | 13% ~00s             |++++++++                                          | 14% ~00s             |++++++++                                          | 16% ~00s             |+++++++++                                         | 17% ~00s             |++++++++++                                        | 18% ~00s             |++++++++++                                        | 19% ~00s             |+++++++++++                                       | 21% ~00s             |++++++++++++                                      | 22% ~00s             |++++++++++++                                      | 23% ~00s             |+++++++++++++                                     | 25% ~00s             |+++++++++++++                                     | 26% ~00s             |++++++++++++++                                    | 27% ~00s             |+++++++++++++++                                   | 29% ~00s             |+++++++++++++++                                   | 30% ~00s             |++++++++++++++++                                  | 31% ~00s             |+++++++++++++++++                                 | 32% ~00s             |+++++++++++++++++                                 | 34% ~00s             |++++++++++++++++++                                | 35% ~00s             |+++++++++++++++++++                               | 36% ~00s             |+++++++++++++++++++                               | 38% ~00s             |++++++++++++++++++++                              | 39% ~00s             |+++++++++++++++++++++                             | 40% ~00s             |+++++++++++++++++++++                             | 42% ~00s             |++++++++++++++++++++++                            | 43% ~00s             |+++++++++++++++++++++++                           | 44% ~00s             |+++++++++++++++++++++++                           | 45% ~00s             |++++++++++++++++++++++++                          | 47% ~00s             |+++++++++++++++++++++++++                         | 48% ~00s             |+++++++++++++++++++++++++                         | 49% ~00s             |++++++++++++++++++++++++++                        | 51% ~00s             |++++++++++++++++++++++++++                        | 52% ~00s             |+++++++++++++++++++++++++++                       | 53% ~00s             |++++++++++++++++++++++++++++                      | 55% ~00s             |++++++++++++++++++++++++++++                      | 56% ~00s             |+++++++++++++++++++++++++++++                     | 57% ~00s             |++++++++++++++++++++++++++++++                    | 58% ~00s             |++++++++++++++++++++++++++++++                    | 60% ~00s             |+++++++++++++++++++++++++++++++                   | 61% ~00s             |++++++++++++++++++++++++++++++++                  | 62% ~00s             |++++++++++++++++++++++++++++++++                  | 64% ~00s             |+++++++++++++++++++++++++++++++++                 | 65% ~00s             |++++++++++++++++++++++++++++++++++                | 66% ~00s             |++++++++++++++++++++++++++++++++++                | 68% ~00s             |+++++++++++++++++++++++++++++++++++               | 69% ~00s             |++++++++++++++++++++++++++++++++++++              | 70% ~00s             |++++++++++++++++++++++++++++++++++++              | 71% ~00s             |+++++++++++++++++++++++++++++++++++++             | 73% ~00s             |++++++++++++++++++++++++++++++++++++++            | 74% ~00s             |++++++++++++++++++++++++++++++++++++++            | 75% ~00s             |+++++++++++++++++++++++++++++++++++++++           | 77% ~00s             |+++++++++++++++++++++++++++++++++++++++           | 78% ~00s             |++++++++++++++++++++++++++++++++++++++++          | 79% ~00s             |+++++++++++++++++++++++++++++++++++++++++         | 81% ~00s             |+++++++++++++++++++++++++++++++++++++++++         | 82% ~00s             |++++++++++++++++++++++++++++++++++++++++++        | 83% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 84% ~00s             |+++++++++++++++++++++++++++++++++++++++++++       | 86% ~00s             |++++++++++++++++++++++++++++++++++++++++++++      | 87% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 88% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++     | 90% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++    | 91% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++   | 92% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++   | 94% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++  | 95% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++++ | 96% ~00s             |+++++++++++++++++++++++++++++++++++++++++++++++++ | 97% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 99% ~00s             |++++++++++++++++++++++++++++++++++++++++++++++++++| 100% elapsed=00s"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_de_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot UMAP dimensionality reduction on DE genes — plot_de_umap","title":"Plot UMAP dimensionality reduction on DE genes — plot_de_umap","text":"Plot UMAP dimensionality reduction DE genes","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_de_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot UMAP dimensionality reduction on DE genes — plot_de_umap","text":"","code":"plot_de_umap(data = NULL, color_by = NULL, label = NULL, max_overlaps = NULL)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_de_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot UMAP dimensionality reduction on DE genes — plot_de_umap","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\" color_by string specifying column data used color samples. label string specifying column data used label sample. max_overlaps Maximum number overlaps ggrepel","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_de_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot UMAP dimensionality reduction on DE genes — plot_de_umap","text":"ggplot object","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a distance heatmap — plot_distance","title":"Create a distance heatmap — plot_distance","text":"Plot heatmap show poisson distance count matrix pre-processed data. poisson distance matrix calculated subset wells specify two parameters. specifying group_by column metadata specific treatment interest, poisson distance calculated corresponding wells.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a distance heatmap — plot_distance","text":"","code":"plot_distance(data = NULL, group_by = NULL, treatment = NULL)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a distance heatmap — plot_distance","text":"data Seurat object group_by metadata column name group data treatment specify one treatment group group_by parameter","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a distance heatmap — plot_distance","text":"returns pheatmap object","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a distance heatmap — plot_distance","text":"","code":"data(mini_mac) p <- plot_distance(mini_mac, group_by = \"combined_id\", treatment = \"DMSO_0\") #> tidyseurat says: A data frame is returned for independent data analysis."},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_gene_ranks.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a knee plot A knee plot to show total number of total read counts for each gene in a given treatment group — plot_gene_ranks","title":"Generate a knee plot A knee plot to show total number of total read counts for each gene in a given treatment group — plot_gene_ranks","text":"Generate knee plot knee plot show total number total read counts gene given treatment group","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_gene_ranks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a knee plot A knee plot to show total number of total read counts for each gene in a given treatment group — plot_gene_ranks","text":"","code":"plot_gene_ranks(data = NULL, group_by = NULL, samples = NULL, scale = TRUE)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_gene_ranks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a knee plot A knee plot to show total number of total read counts for each gene in a given treatment group — plot_gene_ranks","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\". group_by column specifies treatment group input data samples Treatment group scale Boolean statement log10 transformation axes","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_gene_ranks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a knee plot A knee plot to show total number of total read counts for each gene in a given treatment group — plot_gene_ranks","text":"ggplot object knee plot","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_gene_ranks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a knee plot A knee plot to show total number of total read counts for each gene in a given treatment group — plot_gene_ranks","text":"","code":"data(\"mini_mac\") p <- plot_gene_ranks(mini_mac,group_by = \"combined_id\",  samples = \"Staurosporine_10\", scale = TRUE)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_mds.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot MDS dimensionality reduction — plot_mds","title":"Plot MDS dimensionality reduction — plot_mds","text":"function uses limma's plot MDS visualise groupoing data points. function used gene.selection = \"common\" increase speed.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_mds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot MDS dimensionality reduction — plot_mds","text":"","code":"plot_mds(   data = NULL,   group_by = NULL,   label = NULL,   max_overlaps = NULL,   n_labels = 50 )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_mds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot MDS dimensionality reduction — plot_mds","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\" group_by string specifying column data used color samples. label string specifying column data used label sample. max_overlaps Maximum number overlaps ggrepel n_labels integer specifying number labels show, based PC1 PC2 extremeness. Default set 50","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_mds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot MDS dimensionality reduction — plot_mds","text":"ggplot object","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_mds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot MDS dimensionality reduction — plot_mds","text":"","code":"data(\"mini_mac\") p <- plot_mds(mini_mac, group_by = \"Sample_type\", label = \"Sample_type\",  n_labels = 10, max_overlaps = 100) #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis. #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis."},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_metadata_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Heatmaps of Metadata Function — plot_metadata_heatmap","title":"Generate Heatmaps of Metadata Function — plot_metadata_heatmap","text":"function generates heatmaps metadata, either existing object CSV file.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_metadata_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Heatmaps of Metadata Function — plot_metadata_heatmap","text":"","code":"plot_metadata_heatmap(   metadata = NULL,   metadata_file = NULL,   legend = TRUE,   output_file = NULL,   plate = NULL )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_metadata_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Heatmaps of Metadata Function — plot_metadata_heatmap","text":"metadata Metadata object class data frame, matrix tibble. metadata_file Path metadata CSV file path. legend character value (\"show\" \"none\") control whether display legends. output_file file path name save heatmaps graph (png, pdf, jpg). plate Plate plotted. Default first plate.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_metadata_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Heatmaps of Metadata Function — plot_metadata_heatmap","text":"Displays plot ggplot object saves file (jpg, png, pdf).","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_metadata_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Heatmaps of Metadata Function — plot_metadata_heatmap","text":"","code":"#Example metadata_file_path <- system.file(\"extdata\", \"PMMSq033_metadata.csv\", package = \"macpie\") metadata<-read_metadata(metadata_file_path) plot_metadata_heatmap(metadata=metadata)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_multi_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate heatmap of DE genes from multiple treatments This is the function to generate a heatmap of DE genes from running compute_multi_DE that shared by more than one treatment group. There are a few options available to help you to extract shared DE genes. — plot_multi_de","title":"Generate heatmap of DE genes from multiple treatments This is the function to generate a heatmap of DE genes from running compute_multi_DE that shared by more than one treatment group. There are a few options available to help you to extract shared DE genes. — plot_multi_de","text":"Generate heatmap DE genes multiple treatments function generate heatmap DE genes running compute_multi_DE shared one treatment group. options available help extract shared DE genes.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_multi_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate heatmap of DE genes from multiple treatments This is the function to generate a heatmap of DE genes from running compute_multi_DE that shared by more than one treatment group. There are a few options available to help you to extract shared DE genes. — plot_multi_de","text":"","code":"plot_multi_de(   data = NULL,   group_by = NULL,   value = NULL,   p_value_cutoff = 0.01,   direction = \"both\",   n_genes = 10,   control = \"DMSO_0\",   by = \"fc\",   gene_list = NULL )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_multi_de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate heatmap of DE genes from multiple treatments This is the function to generate a heatmap of DE genes from running compute_multi_DE that shared by more than one treatment group. There are a few options available to help you to extract shared DE genes. — plot_multi_de","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\". group_by column specifies treatment group input data value use logCPM, log2FC metric heatmap p_value_cutoff Cutoff adjusted p-value (column p_value_adj), default 0.01 direction Direction select regulated genes directions n_genes Top n genes extracted treatment comparison control control group included final heatmap, usually DMSO_0 Extract top n genes either absolute fold change adjusted p-value gene_list External list genes plot heatmap ","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_multi_de.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate heatmap of DE genes from multiple treatments This is the function to generate a heatmap of DE genes from running compute_multi_DE that shared by more than one treatment group. There are a few options available to help you to extract shared DE genes. — plot_multi_de","text":"pheatmap object","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_multi_de.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate heatmap of DE genes from multiple treatments This is the function to generate a heatmap of DE genes from running compute_multi_DE that shared by more than one treatment group. There are a few options available to help you to extract shared DE genes. — plot_multi_de","text":"","code":"data(\"mini_mac\") plot_multi_de(mini_mac,group_by = \"combined_id\",               value = \"log2fC\", p_value_cutoff = 0.01, direction=\"up\",               n_genes = 10, control = \"DMSO_0\", by=\"fc\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_multi_screen_profile.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot multi-screen profile from fgsea results — plot_multi_screen_profile","title":"Plot multi-screen profile from fgsea results — plot_multi_screen_profile","text":"Plot multi-screen profile fgsea results","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_multi_screen_profile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot multi-screen profile from fgsea results — plot_multi_screen_profile","text":"","code":"plot_multi_screen_profile(   data,   color_by = NULL,   size_by = \"logPadj\",   label_angle = 90 )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_multi_screen_profile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot multi-screen profile from fgsea results — plot_multi_screen_profile","text":"data tidyseurat object screen_profile @tools slot. color_by string specifying column screen_profile use color (default: automatically chosen). size_by string specifying column screen_profile use point size (default: log10(padj)). label_angle Angle x-axis labels (default: 90).","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_multi_screen_profile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot multi-screen profile from fgsea results — plot_multi_screen_profile","text":"ggplot object","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_multi_screen_profile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot multi-screen profile from fgsea results — plot_multi_screen_profile","text":"","code":"data(mini_mac) mini_mac <- compute_multi_screen_profile(mini_mac, target = \"Staurosporine_10\") plot_multi_screen_profile(mini_mac, color_by = \"Sample_type\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_plate_layout.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot MAC-seq data on a plate layout — plot_plate_layout","title":"Plot MAC-seq data on a plate layout — plot_plate_layout","text":"Plot MAC-seq data plate layout","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_plate_layout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot MAC-seq data on a plate layout — plot_plate_layout","text":"","code":"plot_plate_layout(   data = NULL,   metric = NULL,   annotation = NULL,   midpoint = NULL )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_plate_layout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot MAC-seq data on a plate layout — plot_plate_layout","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\" metric string specifying column data used color sample. Defaults \"nCount_RNA\". annotation string specifying column data used label sample. Defaults \"Treatment_1\". midpoint value used heatmap scale bar, can either mean value median value.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_plate_layout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot MAC-seq data on a plate layout — plot_plate_layout","text":"ggplot object","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_plate_layout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot MAC-seq data on a plate layout — plot_plate_layout","text":"","code":"data(\"mini_mac\") p <- plot_plate_layout(mini_mac, metric = \"nCount_RNA\", annotation = \"Treatment_1\", midpoint = \"mean\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_qc_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a lollipop chart — plot_qc_metrics","title":"Create a lollipop chart — plot_qc_metrics","text":"Plot QC metrics standard deviation (sd), median absolute deviation (MAD), interquartile range (IQR), Z score read counts per condition/group interest lollipop chart","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_qc_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a lollipop chart — plot_qc_metrics","text":"","code":"plot_qc_metrics(stats_summary, group_by, metrics)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_qc_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a lollipop chart — plot_qc_metrics","text":"stats_summary stats_summary list group_by metadata column name group data metrics specify one QC metrics stats_summary calculated QC_metrics","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_qc_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a lollipop chart — plot_qc_metrics","text":"ggplot object lollipop chart specified QC metrics.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_qc_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a lollipop chart — plot_qc_metrics","text":"","code":"data(\"mini_mac\") qc_stats <- compute_qc_metrics(mini_mac, group_by = \"combined_id\", order_by = \"median\") plot_qc_metrics(qc_stats, group_by = \"combined_id\", metrics = \"sd_value\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_qc_metrics_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a heatmap for multiple QC metrics — plot_qc_metrics_heatmap","title":"Create a heatmap for multiple QC metrics — plot_qc_metrics_heatmap","text":"Plots multiple QC metrics stats_summary heatmap, normalizing values 0 1.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_qc_metrics_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a heatmap for multiple QC metrics — plot_qc_metrics_heatmap","text":"","code":"plot_qc_metrics_heatmap(   stats_summary = NULL,   group_by = NULL,   metrics = NULL,   order_by = NULL )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_qc_metrics_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a heatmap for multiple QC metrics — plot_qc_metrics_heatmap","text":"stats_summary list containing QC metrics. group_by metadata column name group data. metrics vector QC metrics visualize. order_by metric use sorting group_by values.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_qc_metrics_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a heatmap for multiple QC metrics — plot_qc_metrics_heatmap","text":"ggplot object representing heatmap QC metrics.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_qc_metrics_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a heatmap for multiple QC metrics — plot_qc_metrics_heatmap","text":"","code":"data(\"mini_mac\") qc_stats <- compute_qc_metrics(mini_mac, group_by = \"combined_id\", order_by = \"median\") plot_qc_metrics_heatmap(stats_summary = qc_stats$stats_summary, group_by = \"combined_id\")"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_rle.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an RLE Plot — plot_rle","title":"Create an RLE Plot — plot_rle","text":"function generates Relative Log Expression (RLE) plot visualizing distribution expression data normalization log transformation.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_rle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an RLE Plot — plot_rle","text":"","code":"plot_rle(   data,   barcodes = NULL,   label_column = NULL,   labels = NULL,   log = TRUE,   batch = NULL,   normalisation = NULL,   spikes = NULL )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_rle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an RLE Plot — plot_rle","text":"data tidyseurat object merged metadata. Must contain columns \"Well_ID\", \"Row\", \"Column\". barcodes vector sample barcodes corresponding Cells(seurat_object). label_column metadata column name group barcodes. labels vector labels length 'barcodes\" group barcodes. log logical value indicating whether data log-transformed. Defaults TRUE. batch Either empty, single value, vector corresponding number samples. normalisation One \"raw\", \"logNorm\", \"cpm\", \"clr\", \"SCT\", \"DESeq2\", \"edgeR\", \"RUVg\", \"RUVs\", \"RUVr\", \"limma_voom\", \"zinb\". empty, defaults raw. spikes List genes use spike controls RUVg","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_rle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an RLE Plot — plot_rle","text":"ggplot object representing RLE plot.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_rle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an RLE Plot — plot_rle","text":"function performs following steps: Ensures integrity input data Log-transforms data Computes RLE subtracting row medians value. Creates boxplot using ggplot2 visualize distribution RLE values.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_rle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an RLE Plot — plot_rle","text":"","code":"data(\"mini_mac\") p <- plot_rle(mini_mac, label_column = \"Row\") #> tidyseurat says: Key columns are missing. A data frame is returned for independent data analysis."},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_volcano.html","id":null,"dir":"Reference","previous_headings":"","what":"Volcano plot of differentially expressed genes — plot_volcano","title":"Volcano plot of differentially expressed genes — plot_volcano","text":"Volcano plot differentially expressed genes","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_volcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Volcano plot of differentially expressed genes — plot_volcano","text":"","code":"plot_volcano(   top_table,   x = \"log2FC\",   y = \"p_value_adj\",   fdr_cutoff = 0.05,   max.overlaps = 30 )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_volcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Volcano plot of differentially expressed genes — plot_volcano","text":"top_table Data frame columns contain FC P-values, default log2FC p_value_adj x Name column logFC values y Name column adjusted p-values fdr_cutoff Cutoff labels plotted based adjusted p-values max.overlaps Maximum number overlaps points package ggrepel","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_volcano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Volcano plot of differentially expressed genes — plot_volcano","text":"ggplot object","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/plot_volcano.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Volcano plot of differentially expressed genes — plot_volcano","text":"","code":"data(\"mini_mac\") top_table <- mini_mac@tools$diff_exprs$Staurosporine_10 plot_volcano(top_table = top_table, max.overlaps = 100) #> Warning: ggrepel: 353 unlabeled data points (too many overlaps). Consider increasing max.overlaps"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/read_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Metadata from a File — read_metadata","title":"Read Metadata from a File — read_metadata","text":"function reads metadata specified file, validates file format, extracts columns match predefined set column names.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/read_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Metadata from a File — read_metadata","text":"","code":"read_metadata(   file_path,   header = TRUE,   sep = \",\",   string_as_factors = FALSE,   predefined_columns = c(\"Plate_ID\", \"Well_ID\", \"Row\", \"Column\", \"Species\",     \"Treatment_1\", \"Concentration_1\", \"Sample_type\", \"Barcode\") )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/read_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Metadata from a File — read_metadata","text":"file_path character string specifying path metadata file. file must CSV Excel format. header Logical. TRUE, first row file used column names. Defaults TRUE. sep character string specifying column separator CSV files. Defaults \",\". string_as_factors Logical. TRUE, character columns data frame converted factors. Defaults FALSE. predefined_columns character vector column names match file. Defaults predefined set column names: c(\"Plate_ID\", \"Well_ID\", \"Row\", \"Column\", \"Species\", \"Cell_type\", \"Model_type\",   \"Time\", \"Unit\", \"Treatment_1\", \"Concentration_1\", \"Unit_1\", \"Sample_type\", \"Barcode\", \"Project\").","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/read_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Metadata from a File — read_metadata","text":"data frame containing matched columns least one predefined column found. Returns NULL prints error message predefined columns found.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/read_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read Metadata from a File — read_metadata","text":"function first checks file exists validates format (CSV Excel). attempts read file match column names predefined set column names. Supported file formats include: CSV files .csv extension. Excel files .xls .xlsx extensions (requires readxl package).","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/read_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Metadata from a File — read_metadata","text":"","code":"# Example CSV file file_path <- system.file(\"/extdata/PMMSq033_metadata.csv\", package = \"macpie\") result <- read_metadata(file_path)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/summarise_de.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a table to summarise gene numbers from a differential expression test. — summarise_de","title":"Generate a table to summarise gene numbers from a differential expression test. — summarise_de","text":"Generate table summarise gene numbers differential expression test.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/summarise_de.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a table to summarise gene numbers from a differential expression test. — summarise_de","text":"","code":"summarise_de(   top_table,   lfc_threshold = 1,   padj_threshold = 0.01,   multi = FALSE,   group_by = \"combined_id\" )"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/summarise_de.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a table to summarise gene numbers from a differential expression test. — summarise_de","text":"top_table data table showing results compute_single_de lfc_threshold Threshold log2FC padj_threshold Threshold adjusted p value multi indicate summarise single de comparison multi de comparison group_by Name column defines groups replicates","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/summarise_de.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a table to summarise gene numbers from a differential expression test. — summarise_de","text":"tibble summarising number genes significantly","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/summarise_de.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a table to summarise gene numbers from a differential expression test. — summarise_de","text":"","code":"data(\"mini_mac\") top_table <- mini_mac@tools$diff_exprs$Staurosporine_10 summarise_de(top_table, lfc_threshold = 1, padj_threshold = 0.05) #> # A tibble: 1 × 6 #>   Total_genes_tested Significantly_upregulated Significantly_downregulated #>                <int>                     <int>                       <int> #> 1                500                       361                          26 #> # ℹ 3 more variables: Total_significant <int>, Padj_threshold <dbl>, #> #   Log2FC_threshold <dbl> summarise_de(mini_mac, lfc_threshold = 1,  padj_threshold = 0.01, multi=TRUE) #> # A tibble: 15 × 7 #>    combined_id  Total_genes_tested Significantly_upregu…¹ Significantly_downre…² #>    <chr>                     <int>                  <int>                  <int> #>  1 Anastrozole…                500                      0                      0 #>  2 Camptotheci…                500                    363                     15 #>  3 Capivaserti…                500                      0                      0 #>  4 Ceralaserti…                500                      0                      0 #>  5 Chlorambuci…                500                      0                      0 #>  6 Cytarabine_…                500                      0                      0 #>  7 Erlotinib_h…                500                      2                      0 #>  8 Etoposide_10                500                      2                      0 #>  9 Fluvastatin…                500                      0                      0 #> 10 Mk.2206_dih…                500                      0                      0 #> 11 Nutlin.3a_10                500                      2                      0 #> 12 Paclitaxel_…                500                      8                      1 #> 13 Sb590885_10                 500                      0                      0 #> 14 Staurospori…                500                    359                     14 #> 15 Vinblastine…                500                      3                      0 #> # ℹ abbreviated names: ¹​Significantly_upregulated, ²​Significantly_downregulated #> # ℹ 3 more variables: Total_significant <int>, padj_threshold <dbl>, #> #   Log2FC_threshold <dbl>"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/validate_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and clean the metadata file generated from findmetadata function — validate_metadata","title":"Check and clean the metadata file generated from findmetadata function — validate_metadata","text":"checks column completeness removes special characters spaces comma except Treatment_1 replaces special characters spaces comma underscore generates quick summary different treatment sample groups metadata","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/validate_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and clean the metadata file generated from findmetadata function — validate_metadata","text":"","code":"validate_metadata(metadata)"},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/validate_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and clean the metadata file generated from findmetadata function — validate_metadata","text":"metadata output findmetadata function","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/validate_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check and clean the metadata file generated from findmetadata function — validate_metadata","text":"list containing: cleaned_metadata cleaned metadata data frame validation modifications. summary_table summary table grouped Plate_ID, showing count unique values selected columns.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/validate_metadata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check and clean the metadata file generated from findmetadata function — validate_metadata","text":"function validates metadata dataset, cleans specific fields, checks issues, generates summary table grouped Plate_ID.","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/validate_metadata.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check and clean the metadata file generated from findmetadata function — validate_metadata","text":"Mark Li","code":""},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/reference/validate_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check and clean the metadata file generated from findmetadata function — validate_metadata","text":"","code":"# \\donttest{ # Example CSV file file_path <- system.file(\"/extdata/PMMSq033_metadata.csv\", package = \"macpie\") metadata <- read_metadata(file_path) metadt_qc <- validate_metadata(metadata) #>  #> Validation Issues: #> smiles: Contains special characters. #> smiles: Contains special characters. #> Model_type: Contains special characters. #> Compound_ID: Contains special characters. #>  #> Generating summary table grouped by Plate_ID... # }"},{"path":[]},{"path":"https://github.com/PMCC-BioinformaticsCore/macpie.git/news/index.html","id":"new-functions-1-1-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"macpie 1.1.0","text":"Initial CRAN release macpie: scalable R toolkit high-throughput transcriptomic (HTTr) analysis. Quality control metrics: validate_metadata(), compute_qc_metrics(), plot_rle, plot_mds(), etc. Differential expression: compute_single_de(), compute_multi_de(), plot_volcano(), plot_counts(). Support chemical structure processing: compute_chem_descriptors(), compute_smiles(), compute_single_dose_response(), compute_multi_screen_profile().","code":""}]
